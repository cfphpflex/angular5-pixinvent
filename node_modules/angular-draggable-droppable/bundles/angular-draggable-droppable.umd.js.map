{
  "version": 3,
  "file": "angular-draggable-droppable.umd.js",
  "sources": [
    "ng://angular-draggable-droppable/src/drag-and-drop.module.ts",
    "ng://angular-draggable-droppable/src/droppable.directive.ts",
    "ng://angular-draggable-droppable/src/draggable.directive.ts",
    "ng://angular-draggable-droppable/src/draggable-helper.provider.ts"
  ],
  "sourcesContent": [
    "import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { DraggableDirective } from './draggable.directive';\nimport { DroppableDirective } from './droppable.directive';\nimport { DraggableHelper } from './draggable-helper.provider';\n\n@NgModule({\n  declarations: [DraggableDirective, DroppableDirective],\n  exports: [DraggableDirective, DroppableDirective]\n})\nexport class DragAndDropModule {\n  static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: DragAndDropModule,\n      providers: [DraggableHelper]\n    };\n  }\n}\n",
    "import {\n  Directive,\n  OnInit,\n  ElementRef,\n  OnDestroy,\n  Output,\n  EventEmitter,\n  NgZone\n} from '@angular/core';\nimport { Subject } from 'rxjs/Subject';\nimport { Subscription } from 'rxjs/Subscription';\nimport { Observable } from 'rxjs/Observable';\nimport { distinctUntilChanged } from 'rxjs/operators/distinctUntilChanged';\nimport { pairwise } from 'rxjs/operators/pairwise';\nimport { filter } from 'rxjs/operators/filter';\nimport { map } from 'rxjs/operators/map';\nimport { mergeMap } from 'rxjs/operators/mergeMap';\nimport { DraggableHelper } from './draggable-helper.provider';\n\nfunction isCoordinateWithinRectangle(\n  clientX: number,\n  clientY: number,\n  rect: ClientRect\n): boolean {\n  return (\n    clientX >= rect.left &&\n    clientX <= rect.right &&\n    clientY >= rect.top &&\n    clientY <= rect.bottom\n  );\n}\n\nexport interface DropData {\n  dropData: any;\n}\n\n@Directive({\n  selector: '[mwlDroppable]'\n})\nexport class DroppableDirective implements OnInit, OnDestroy {\n  /**\n   * Called when a draggable element starts overlapping the element\n   */\n  @Output() dragEnter = new EventEmitter<DropData>();\n\n  /**\n   * Called when a draggable element stops overlapping the element\n   */\n  @Output() dragLeave = new EventEmitter<DropData>();\n\n  /**\n   * Called when a draggable element is moved over the element\n   */\n  @Output() dragOver = new EventEmitter<DropData>();\n\n  /**\n   * Called when a draggable element is dropped on this element\n   */\n  @Output() drop = new EventEmitter<DropData>();\n\n  currentDragSubscription: Subscription;\n\n  constructor(\n    private element: ElementRef,\n    private draggableHelper: DraggableHelper,\n    private zone: NgZone\n  ) {}\n\n  ngOnInit(): void {\n    interface CurrentDragData {\n      clientX: number;\n      clientY: number;\n      dropData: any;\n    }\n\n    this.currentDragSubscription = this.draggableHelper.currentDrag.subscribe(\n      (drag: Subject<CurrentDragData>) => {\n        const droppableRectangle: ClientRect = this.element.nativeElement.getBoundingClientRect();\n\n        let currentDragDropData: any;\n        const overlaps = drag.pipe(\n          map(({ clientX, clientY, dropData }) => {\n            currentDragDropData = dropData;\n            return isCoordinateWithinRectangle(\n              clientX,\n              clientY,\n              droppableRectangle\n            );\n          })\n        );\n\n        const overlapsChanged = overlaps.pipe(distinctUntilChanged());\n\n        let dragOverActive: boolean; // TODO - see if there's a way of doing this via rxjs\n\n        overlapsChanged\n          .pipe(filter(overlapsNow => overlapsNow))\n          .subscribe(() => {\n            dragOverActive = true;\n            this.zone.run(() => {\n              this.dragEnter.next({\n                dropData: currentDragDropData\n              });\n            });\n          });\n\n        overlaps.pipe(filter(overlapsNow => overlapsNow)).subscribe(() => {\n          this.zone.run(() => {\n            this.dragOver.next({\n              dropData: currentDragDropData\n            });\n          });\n        });\n\n        overlapsChanged\n          .pipe(pairwise())\n          .pipe(\n            filter(([didOverlap, overlapsNow]) => didOverlap && !overlapsNow)\n          )\n          .subscribe(() => {\n            dragOverActive = false;\n            this.zone.run(() => {\n              this.dragLeave.next({\n                dropData: currentDragDropData\n              });\n            });\n          });\n\n        drag.pipe(mergeMap(() => overlaps)).subscribe({\n          complete: () => {\n            if (dragOverActive) {\n              this.zone.run(() => {\n                this.drop.next({\n                  dropData: currentDragDropData\n                });\n              });\n            }\n          }\n        });\n      }\n    );\n  }\n\n  ngOnDestroy(): void {\n    this.currentDragSubscription.unsubscribe();\n  }\n}\n",
    "import {\n  Directive,\n  OnInit,\n  ElementRef,\n  Renderer2,\n  Output,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnChanges,\n  NgZone,\n  SimpleChanges\n} from '@angular/core';\nimport { Subject } from 'rxjs/Subject';\nimport { Observable } from 'rxjs/Observable';\nimport { merge } from 'rxjs/observable/merge';\nimport { map } from 'rxjs/operators/map';\nimport { mergeMap } from 'rxjs/operators/mergeMap';\nimport { takeUntil } from 'rxjs/operators/takeUntil';\nimport { take } from 'rxjs/operators/take';\nimport { takeLast } from 'rxjs/operators/takeLast';\nimport { pairwise } from 'rxjs/operators/pairwise';\nimport { share } from 'rxjs/operators/share';\nimport { filter } from 'rxjs/operators/filter';\nimport { DraggableHelper } from './draggable-helper.provider';\n\nexport interface Coordinates {\n  x: number;\n  y: number;\n}\n\nexport interface DragAxis {\n  x: boolean;\n  y: boolean;\n}\n\nexport interface SnapGrid {\n  x?: number;\n  y?: number;\n}\n\nexport type ValidateDrag = (coordinates: Coordinates) => boolean;\n\nexport interface PointerEvent {\n  clientX: number;\n  clientY: number;\n  event: MouseEvent | TouchEvent;\n}\n\nconst MOVE_CURSOR: string = 'move';\n\n@Directive({\n  selector: '[mwlDraggable]'\n})\nexport class DraggableDirective implements OnInit, OnChanges, OnDestroy {\n  /**\n   * an object of data you can pass to the drop event\n   */\n  @Input() dropData: any;\n\n  /**\n   * The axis along which the element is draggable\n   */\n  @Input() dragAxis: DragAxis = { x: true, y: true };\n\n  /**\n   * Snap all drags to an x / y grid\n   */\n  @Input() dragSnapGrid: SnapGrid = {};\n\n  /**\n   * Show a ghost element that shows the drag when dragging\n   */\n  @Input() ghostDragEnabled: boolean = true;\n\n  /**\n   * Allow custom behaviour to control when the element is dragged\n   */\n  @Input() validateDrag: ValidateDrag;\n\n  /**\n   * The cursor to use when dragging the element\n   */\n  @Input() dragCursor = MOVE_CURSOR;\n\n  /**\n   * Called when the element can be dragged along one axis and has the mouse or pointer device pressed on it\n   */\n  @Output() dragPointerDown = new EventEmitter<Coordinates>();\n\n  /**\n   * Called when the element has started to be dragged.\n   * Only called after at least one mouse or touch move event\n   */\n  @Output() dragStart = new EventEmitter<Coordinates>();\n\n  /**\n   * Called when the element is being dragged\n   */\n  @Output() dragging = new EventEmitter<Coordinates>();\n\n  /**\n   * Called after the element is dragged\n   */\n  @Output() dragEnd = new EventEmitter<Coordinates>();\n\n  /**\n   * @hidden\n   */\n  pointerDown: Subject<PointerEvent> = new Subject();\n\n  /**\n   * @hidden\n   */\n  pointerMove: Subject<PointerEvent> = new Subject();\n\n  /**\n   * @hidden\n   */\n  pointerUp: Subject<PointerEvent> = new Subject();\n\n  private eventListenerSubscriptions: {\n    mousemove?: () => void;\n    mousedown?: () => void;\n    mouseup?: () => void;\n    mouseenter?: () => void;\n    mouseleave?: () => void;\n    touchstart?: () => void;\n    touchmove?: () => void;\n    touchend?: () => void;\n    touchcancel?: () => void;\n  } = {};\n\n  /**\n   * @hidden\n   */\n  constructor(\n    public element: ElementRef,\n    private renderer: Renderer2,\n    private draggableHelper: DraggableHelper,\n    private zone: NgZone\n  ) {}\n\n  ngOnInit(): void {\n    this.checkEventListeners();\n\n    const pointerDrag: Observable<any> = this.pointerDown\n      .pipe(filter(() => this.canDrag()))\n      .pipe(\n        mergeMap((pointerDownEvent: PointerEvent) => {\n          const currentDrag: Subject<any> = new Subject();\n\n          this.zone.run(() => {\n            this.dragPointerDown.next({ x: 0, y: 0 });\n          });\n\n          const pointerMove: Observable<Coordinates> = this.pointerMove\n            .pipe(\n              map((pointerMoveEvent: PointerEvent) => {\n                pointerMoveEvent.event.preventDefault();\n\n                return {\n                  currentDrag,\n                  x: pointerMoveEvent.clientX - pointerDownEvent.clientX,\n                  y: pointerMoveEvent.clientY - pointerDownEvent.clientY,\n                  clientX: pointerMoveEvent.clientX,\n                  clientY: pointerMoveEvent.clientY\n                };\n              })\n            )\n            .pipe(\n              map((moveData: Coordinates) => {\n                if (this.dragSnapGrid.x) {\n                  moveData.x =\n                    Math.floor(moveData.x / this.dragSnapGrid.x) *\n                    this.dragSnapGrid.x;\n                }\n\n                if (this.dragSnapGrid.y) {\n                  moveData.y =\n                    Math.floor(moveData.y / this.dragSnapGrid.y) *\n                    this.dragSnapGrid.y;\n                }\n\n                return moveData;\n              })\n            )\n            .pipe(\n              map((moveData: Coordinates) => {\n                if (!this.dragAxis.x) {\n                  moveData.x = 0;\n                }\n\n                if (!this.dragAxis.y) {\n                  moveData.y = 0;\n                }\n\n                return moveData;\n              })\n            )\n            .pipe(\n              filter(\n                ({ x, y }) => !this.validateDrag || this.validateDrag({ x, y })\n              )\n            )\n            .pipe(takeUntil(merge(this.pointerUp, this.pointerDown)))\n            .pipe(share());\n\n          pointerMove.pipe(take(1)).subscribe(() => {\n            pointerDownEvent.event.preventDefault();\n\n            this.zone.run(() => {\n              this.dragStart.next({ x: 0, y: 0 });\n            });\n\n            this.setCursor(this.dragCursor);\n\n            this.draggableHelper.currentDrag.next(currentDrag);\n          });\n\n          pointerMove.pipe(takeLast(1)).subscribe(({ x, y }) => {\n            this.zone.run(() => {\n              this.dragEnd.next({ x, y });\n            });\n            currentDrag.complete();\n            this.setCssTransform(null);\n            if (this.ghostDragEnabled) {\n              this.renderer.setStyle(\n                this.element.nativeElement,\n                'pointerEvents',\n                null\n              );\n            }\n          });\n\n          return pointerMove;\n        })\n      )\n      .pipe(share());\n\n    merge(\n      pointerDrag.pipe(take(1)).pipe(map(value => [, value])),\n      pointerDrag.pipe(pairwise())\n    )\n      .pipe(\n        filter(([previous, next]) => {\n          if (!previous) {\n            return true;\n          }\n          return previous.x !== next.x || previous.y !== next.y;\n        })\n      )\n      .pipe(map(([previous, next]) => next))\n      .subscribe(({ x, y, currentDrag, clientX, clientY }) => {\n        this.zone.run(() => {\n          this.dragging.next({ x, y });\n        });\n        if (this.ghostDragEnabled) {\n          this.renderer.setStyle(\n            this.element.nativeElement,\n            'pointerEvents',\n            'none'\n          );\n        }\n        this.setCssTransform(`translate(${x}px, ${y}px)`);\n        currentDrag.next({\n          clientX,\n          clientY,\n          dropData: this.dropData\n        });\n      });\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes['dragAxis']) {\n      this.checkEventListeners();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.unsubscribeEventListeners();\n    this.pointerDown.complete();\n    this.pointerMove.complete();\n    this.pointerUp.complete();\n  }\n\n  private checkEventListeners(): void {\n    const canDrag: boolean = this.canDrag();\n    const hasEventListeners: boolean =\n      Object.keys(this.eventListenerSubscriptions).length > 0;\n\n    if (canDrag && !hasEventListeners) {\n      this.zone.runOutsideAngular(() => {\n        this.eventListenerSubscriptions.mousedown = this.renderer.listen(\n          this.element.nativeElement,\n          'mousedown',\n          (event: MouseEvent) => {\n            this.onMouseDown(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseup = this.renderer.listen(\n          'document',\n          'mouseup',\n          (event: MouseEvent) => {\n            this.onMouseUp(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchstart = this.renderer.listen(\n          this.element.nativeElement,\n          'touchstart',\n          (event: TouchEvent) => {\n            this.onTouchStart(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchend = this.renderer.listen(\n          'document',\n          'touchend',\n          (event: TouchEvent) => {\n            this.onTouchEnd(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.touchcancel = this.renderer.listen(\n          'document',\n          'touchcancel',\n          (event: TouchEvent) => {\n            this.onTouchEnd(event);\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseenter = this.renderer.listen(\n          this.element.nativeElement,\n          'mouseenter',\n          () => {\n            this.onMouseEnter();\n          }\n        );\n\n        this.eventListenerSubscriptions.mouseleave = this.renderer.listen(\n          this.element.nativeElement,\n          'mouseleave',\n          () => {\n            this.onMouseLeave();\n          }\n        );\n      });\n    } else if (!canDrag && hasEventListeners) {\n      this.unsubscribeEventListeners();\n    }\n  }\n\n  private onMouseDown(event: MouseEvent): void {\n    if (!this.eventListenerSubscriptions.mousemove) {\n      this.eventListenerSubscriptions.mousemove = this.renderer.listen(\n        'document',\n        'mousemove',\n        (mouseMoveEvent: MouseEvent) => {\n          this.pointerMove.next({\n            event: mouseMoveEvent,\n            clientX: mouseMoveEvent.clientX,\n            clientY: mouseMoveEvent.clientY\n          });\n        }\n      );\n    }\n    this.pointerDown.next({\n      event,\n      clientX: event.clientX,\n      clientY: event.clientY\n    });\n  }\n\n  private onMouseUp(event: MouseEvent): void {\n    if (this.eventListenerSubscriptions.mousemove) {\n      this.eventListenerSubscriptions.mousemove();\n      delete this.eventListenerSubscriptions.mousemove;\n    }\n    this.pointerUp.next({\n      event,\n      clientX: event.clientX,\n      clientY: event.clientY\n    });\n  }\n\n  private onTouchStart(event: TouchEvent): void {\n    if (!this.eventListenerSubscriptions.touchmove) {\n      this.eventListenerSubscriptions.touchmove = this.renderer.listen(\n        'document',\n        'touchmove',\n        (touchMoveEvent: TouchEvent) => {\n          this.pointerMove.next({\n            event: touchMoveEvent,\n            clientX: touchMoveEvent.targetTouches[0].clientX,\n            clientY: touchMoveEvent.targetTouches[0].clientY\n          });\n        }\n      );\n    }\n    this.pointerDown.next({\n      event,\n      clientX: event.touches[0].clientX,\n      clientY: event.touches[0].clientY\n    });\n  }\n\n  private onTouchEnd(event: TouchEvent): void {\n    if (this.eventListenerSubscriptions.touchmove) {\n      this.eventListenerSubscriptions.touchmove();\n      delete this.eventListenerSubscriptions.touchmove;\n    }\n    this.pointerUp.next({\n      event,\n      clientX: event.changedTouches[0].clientX,\n      clientY: event.changedTouches[0].clientY\n    });\n  }\n\n  private onMouseEnter(): void {\n    this.setCursor(this.dragCursor);\n  }\n\n  private onMouseLeave(): void {\n    this.setCursor(null);\n  }\n\n  private setCssTransform(value: string | null): void {\n    if (this.ghostDragEnabled) {\n      const transformAttributes = [\n        'transform',\n        '-webkit-transform',\n        '-ms-transform',\n        '-moz-transform',\n        '-o-transform'\n      ];\n      transformAttributes.forEach(transformAttribute => {\n        this.renderer.setStyle(\n          this.element.nativeElement,\n          transformAttribute,\n          value\n        );\n      });\n    }\n  }\n\n  private canDrag(): boolean {\n    return this.dragAxis.x || this.dragAxis.y;\n  }\n\n  private setCursor(value: string | null): void {\n    this.renderer.setStyle(this.element.nativeElement, 'cursor', value);\n  }\n\n  private unsubscribeEventListeners(): void {\n    Object.keys(this.eventListenerSubscriptions).forEach(type => {\n      (this as any).eventListenerSubscriptions[type]();\n      delete (this as any).eventListenerSubscriptions[type];\n    });\n  }\n}\n",
    "import { Subject } from 'rxjs/Subject';\n\nexport class DraggableHelper {\n  currentDrag: Subject<any> = new Subject();\n}\n"
  ],
  "names": [
    "Output",
    "ElementRef",
    "filter$1",
    "pairwise$1",
    "pairwise",
    "distinctUntilChanged$1",
    "map$1",
    "EventEmitter",
    "Input",
    "NgZone",
    "Renderer2",
    "filter",
    "merge",
    "take",
    "map",
    "share",
    "takeLast$1",
    "take$1",
    "takeUntil",
    "merge$1",
    "Subject",
    "Subject$1",
    "mergeMap$1"
  ],
  "mappings": "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"
}
