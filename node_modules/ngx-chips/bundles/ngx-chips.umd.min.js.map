{
  "version": 3,
  "file": "ngx-chips.umd.min.js",
  "sources": [
    "ng://ngx-chips/modules/core/pipes/highlight.pipe.ts",
    "ng://ngx-chips/modules/core/constants/index.ts",
    "ng://ngx-chips/modules/components/dropdown/tag-input-dropdown.component.ts",
    "ng://ngx-chips/modules/defaults.ts",
    "ng://ngx-chips/modules/core/providers/options-provider.ts",
    "ng://ngx-chips/modules/core/accessor.ts",
    "ng://ngx-chips/modules/core/helpers/listen.ts",
    "ng://ngx-chips/modules/components/tag-input-form/tag-input-form.component.ts",
    "ng://ngx-chips/modules/components/tag/tag-ripple.component.ts",
    "ng://ngx-chips/modules/components/tag/tag.component.ts",
    "ng://ngx-chips/modules/components/tag-input/animations.ts",
    "ng://ngx-chips/modules/components/tag-input/tag-input.ts"
  ],
  "sourcesContent": [
    "import {Pipe, PipeTransform} from '@angular/core';\n\nconst escape = s => s.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');\n\n@Pipe({\n    name: 'highlight'\n})\nexport class HighlightPipe implements PipeTransform {\n    /**\n     * @name transform\n     * @param value {string}\n     * @param arg {string}\n     */\n    public transform(value: string, arg: string): string {\n        if (!arg.trim()) {\n            return value;\n        }\n\n        try {\n            const regex = new RegExp(`(${escape(arg)})`, 'i');\n            return value.replace(regex, '<b>$1</b>');\n        } catch (e) {\n            return value;\n        }\n    }\n}\n",
    "/*\n** constants and default values for <tag-input>\n */\n\nexport const PLACEHOLDER = '+ Tag';\nexport const SECONDARY_PLACEHOLDER = 'Enter a new tag';\nexport const KEYDOWN = 'keydown';\nexport const KEYUP = 'keyup';\nexport const FOCUS = 'focus';\nexport const MAX_ITEMS_WARNING = 'The number of items specified was greater than the property max-items.';\n\nexport const ACTIONS_KEYS = {\n    DELETE: 'DELETE',\n    SWITCH_PREV: 'SWITCH_PREV',\n    SWITCH_NEXT: 'SWITCH_NEXT',\n    TAB: 'TAB'\n};\n\nexport const KEY_PRESS_ACTIONS = {\n    8: ACTIONS_KEYS.DELETE,\n    37: ACTIONS_KEYS.SWITCH_PREV,\n    39: ACTIONS_KEYS.SWITCH_NEXT,\n    9: ACTIONS_KEYS.TAB\n};\n\nexport const DRAG_AND_DROP_KEY = 'Text';\nexport const NEXT = 'NEXT';\nexport const PREV = 'PREV';\n\n",
    "import {\n    Component,\n    ContentChildren,\n    EventEmitter,\n    forwardRef,\n    HostListener,\n    Injector,\n    Input,\n    QueryList,\n    TemplateRef,\n    Type,\n    ViewChild,\n} from '@angular/core';\n\n// rx\nimport { Observable } from 'rxjs/Observable';\nimport { map, filter, first, debounceTime } from 'rxjs/operators';\n\nimport { Ng2Dropdown, Ng2MenuItem } from 'ng2-material-dropdown';\nimport { OptionsProvider } from '../../core/providers/options-provider';\nimport { TagInputComponent } from '../tag-input/tag-input';\nimport { TagInputDropdownOptions } from '../../defaults';\nimport { TagModel } from '../../core/accessor';\n\nconst defaults: Type<TagInputDropdownOptions> = forwardRef(() => OptionsProvider.defaults.dropdown);\n\n@Component({\n    selector: 'tag-input-dropdown',\n    template: `<ng2-dropdown [dynamicUpdate]=\"dynamicUpdate\">\n    <ng2-dropdown-menu [focusFirstElement]=\"focusFirstElement\"\n                       [zIndex]=\"zIndex\"\n                       [appendToBody]=\"appendToBody\"\n                       [offset]=\"offset\">\n        <ng2-menu-item *ngFor=\"let item of items; let index = index; let last = last\"\n                       [value]=\"item\"\n                       [ngSwitch]=\"!!templates.length\">\n\n            <span *ngSwitchCase=\"false\"\n                  [innerHTML]=\"item[displayBy] | highlight : tagInput.inputForm.value.value\">\n            </span>\n\n            <ng-template *ngSwitchDefault\n                      [ngTemplateOutlet]=\"templates.first\"\n                      [ngTemplateOutletContext]=\"{ item: item, index: index, last: last }\">\n            </ng-template>\n        </ng2-menu-item>\n    </ng2-dropdown-menu>\n</ng2-dropdown>\n`\n})\nexport class TagInputDropdown {\n    /**\n     * @name dropdown\n     */\n    @ViewChild(Ng2Dropdown) public dropdown: Ng2Dropdown;\n\n    /**\n     * @name menuTemplate\n     * @desc reference to the template if provided by the user\n     */\n    @ContentChildren(TemplateRef) public templates: QueryList<TemplateRef<any>>;\n\n    /**\n     * @name offset\n     */\n    @Input() public offset: string = new defaults().offset;\n\n    /**\n     * @name focusFirstElement\n     */\n    @Input() public focusFirstElement = new defaults().focusFirstElement;\n\n    /**\n     * - show autocomplete dropdown if the value of input is empty\n     * @name showDropdownIfEmpty\n     */\n    @Input() public showDropdownIfEmpty = new defaults().showDropdownIfEmpty;\n\n    /**\n     * @description observable passed as input which populates the autocomplete items\n     * @name autocompleteObservable\n     */\n    @Input() public autocompleteObservable: (text: string) => Observable<any>;\n\n    /**\n     * - desc minimum text length in order to display the autocomplete dropdown\n     * @name minimumTextLength\n     */\n    @Input() public minimumTextLength = new defaults().minimumTextLength;\n\n    /**\n     * - number of items to display in the autocomplete dropdown\n     * @name limitItemsTo\n     */\n    @Input() public limitItemsTo: number = new defaults().limitItemsTo;\n\n    /**\n     * @name displayBy\n     */\n    @Input() public displayBy = new defaults().displayBy;\n\n    /**\n     * @name identifyBy\n     */\n    @Input() public identifyBy = new defaults().identifyBy;\n\n    /**\n     * @description a function a developer can use to implement custom matching for the autocomplete\n     * @name matchingFn\n     */\n    @Input() public matchingFn: (value: string, target: TagModel) => boolean = new defaults().matchingFn;\n\n    /**\n     * @name appendToBody\n     */\n    @Input() public appendToBody = new defaults().appendToBody;\n\n    /**\n     * @name keepOpen\n     * @description option to leave dropdown open when adding a new item\n     */\n    @Input() public keepOpen = new defaults().keepOpen;\n\n    /**\n     * @name dynamicUpdate\n     */\n    @Input() public dynamicUpdate = new defaults().dynamicUpdate;\n\n    /**\n    * @name zIndex\n     */\n    @Input() public zIndex = new defaults().zIndex;\n\n    /**\n     * list of items that match the current value of the input (for autocomplete)\n     * @name items\n     */\n    public items: TagModel[] = [];\n\n    /**\n     * @name tagInput\n     */\n    public tagInput: TagInputComponent = this.injector.get(TagInputComponent);\n\n    /**\n     * @name _autocompleteItems\n     */\n    private _autocompleteItems: TagModel[] = [];\n\n    /**\n     * @name autocompleteItems\n     * @param items\n     */\n    public set autocompleteItems(items: TagModel[]) {\n        this._autocompleteItems = items;\n    }\n\n    /**\n     * @name autocompleteItems\n     * @desc array of items that will populate the autocomplete\n     */\n    @Input() public get autocompleteItems(): TagModel[] {\n        const items = this._autocompleteItems;\n\n        if (!items) {\n            return [];\n        }\n\n        return items.map((item: TagModel) => {\n            return typeof item === 'string' ? {\n                [this.displayBy]: item,\n                [this.identifyBy]: item\n            } : item;\n        });\n    }\n\n    constructor(private readonly injector: Injector) {}\n\n    /**\n     * @name ngOnInit\n     */\n    public ngOnInit(): void {\n        this.onItemClicked().subscribe((item: Ng2MenuItem) => {\n            this.requestAdding(item);\n        });\n\n        // reset itemsMatching array when the dropdown is hidden\n        this.onHide().subscribe(this.resetItems);\n\n        const DEBOUNCE_TIME = 200;\n        const KEEP_OPEN = this.keepOpen;\n\n        this.tagInput\n            .onTextChange\n            .asObservable()\n            .pipe(\n                debounceTime(DEBOUNCE_TIME),\n                filter((value: string) => {\n                    if (KEEP_OPEN === false) {\n                        return value.length > 0;\n                    }\n\n                    return true;\n                })\n            )\n            .subscribe(this.show);\n    }\n\n    /**\n     * @name updatePosition\n     */\n    public updatePosition(): void {\n        const position = this.tagInput.inputForm.getElementPosition();\n\n        this.dropdown.menu.updatePosition(position, this.dynamicUpdate);\n    }\n\n    /**\n     * @name isVisible\n     */\n    public get isVisible(): boolean {\n        return this.dropdown.menu.state.menuState.isVisible;\n    }\n\n    /**\n     * @name onHide\n     */\n    public onHide(): EventEmitter<Ng2Dropdown> {\n        return this.dropdown.onHide;\n    }\n\n    /**\n     * @name onItemClicked\n     */\n    public onItemClicked(): EventEmitter<string> {\n        return this.dropdown.onItemClicked;\n    }\n\n    /**\n     * @name selectedItem\n     */\n    public get selectedItem(): Ng2MenuItem {\n        return this.dropdown.menu.state.dropdownState.selectedItem;\n    }\n\n    /**\n     * @name state\n     */\n    public get state(): any {\n        return this.dropdown.menu.state;\n    }\n\n    /**\n     *\n     * @name show\n     */\n    public show = (): void => {\n        const maxItemsReached = this.tagInput.items.length === this.tagInput.maxItems;\n        const value = this.getFormValue();\n        const hasMinimumText = value.trim().length >= this.minimumTextLength;\n        const position = this.calculatePosition();\n        const items = this.getMatchingItems(value);\n        const hasItems = items.length > 0;\n        const isHidden = this.isVisible === false;\n        const showDropdownIfEmpty = this.showDropdownIfEmpty && hasItems && !value;\n        const isDisabled = this.tagInput.disable;\n        const assertions = [];\n\n        const shouldShow = isHidden && ((hasItems && hasMinimumText) || showDropdownIfEmpty);\n        const shouldHide = this.isVisible && !hasItems;\n\n        if (this.autocompleteObservable && hasMinimumText) {\n            return this.getItemsFromObservable(value);\n        }\n\n        if ((!this.showDropdownIfEmpty && !value) || maxItemsReached || isDisabled) {\n            return this.dropdown.hide();\n        }\n\n        this.setItems(items);\n\n        if (shouldShow) {\n            this.dropdown.show(position);\n        } else if (shouldHide) {\n            this.hide();\n        }\n    }\n\n    /**\n     * @name hide\n     */\n    public hide(): void {\n        this.resetItems();\n        this.dropdown.hide();\n    }\n\n    /**\n     * @name scrollListener\n     */\n    @HostListener('window:scroll')\n    public scrollListener(): void {\n        if (!this.isVisible || !this.dynamicUpdate) {\n            return;\n        }\n\n        this.updatePosition();\n    }\n\n    /**\n     * @name onWindowBlur\n     */\n    @HostListener('window:blur')\n    public onWindowBlur(): void {\n        this.dropdown.hide();\n    }\n\n    /**\n     * @name getFormValue\n     */\n    private getFormValue(): string {\n        return this.tagInput.formValue.trim();\n    }\n\n    /**\n     * @name calculatePosition\n     */\n    private calculatePosition(): ClientRect {\n        return this.tagInput.inputForm.getElementPosition();\n    }\n\n    /**\n     * @name requestAdding\n     * @param item {Ng2MenuItem}\n     */\n    private requestAdding = async (item: Ng2MenuItem) => {\n        const tag = this.createTagModel(item);\n        await this.tagInput.onAddingRequested(true, tag).catch(() => {});\n    }\n\n    /**\n     * @name createTagModel\n     * @param item\n     */\n    private createTagModel(item: Ng2MenuItem): TagModel {\n        const display = typeof item.value === 'string' ? item.value : item.value[this.displayBy];\n        const value = typeof item.value === 'string' ? item.value : item.value[this.identifyBy];\n\n        return {\n            ...item.value,\n            [this.tagInput.displayBy]: display,\n            [this.tagInput.identifyBy]: value\n        };\n    }\n\n    /**\n     *\n     * @param value {string}\n     */\n    private getMatchingItems(value: string): TagModel[] {\n        if (!value && !this.showDropdownIfEmpty) {\n            return [];\n        }\n\n        const dupesAllowed = this.tagInput.allowDupes;\n\n        return this.autocompleteItems.filter((item: TagModel) => {\n            const hasValue = dupesAllowed ? false : this.tagInput.tags.some(tag => {\n                const identifyBy = this.tagInput.identifyBy;\n                const model = typeof tag.model === 'string' ? tag.model : tag.model[identifyBy];\n\n                return model === item[this.identifyBy];\n            });\n\n            return this.matchingFn(value, item) && (hasValue === false);\n        });\n    }\n\n    /**\n     * @name setItems\n     */\n    private setItems(items: TagModel[]): void {\n        this.items = items.slice(0, this.limitItemsTo || items.length);\n    }\n\n    /**\n     * @name resetItems\n     */\n    private resetItems = (): void => {\n        this.items = [];\n    }\n\n    /**\n     * @name populateItems\n     * @param data\n     */\n    private populateItems(data: any): TagInputDropdown {\n        this.autocompleteItems = data.map(item => {\n            return typeof item === 'string' ? {\n                [this.displayBy]: item,\n                [this.identifyBy]: item\n            } : item;\n        });\n\n        return this;\n    }\n\n    /**\n     * @name getItemsFromObservable\n     * @param text\n     */\n    private getItemsFromObservable = (text: string): void => {\n        this.setLoadingState(true);\n\n        const subscribeFn = (data: any[]) => {\n            // hide loading animation\n            this.setLoadingState(false)\n                // add items\n                .populateItems(data);\n\n            this.setItems(this.getMatchingItems(text));\n\n            if (this.items.length) {\n                this.dropdown.show(this.calculatePosition());\n            } else if (!this.showDropdownIfEmpty && this.isVisible) {\n                this.dropdown.hide();\n            } else if (!this.showDropdownIfEmpty) {\n                this.dropdown.hide();\n            }\n        };\n\n        this.autocompleteObservable(text)\n            .pipe(first())\n            .subscribe(subscribeFn, () => this.setLoadingState(false));\n    }\n\n    /**\n     * @name setLoadingState\n     * @param state\n     */\n    private setLoadingState(state: boolean): TagInputDropdown {\n        this.tagInput.isLoading = state;\n\n        return this;\n    }\n}\n",
    "import { Observable } from 'rxjs/Observable';\nimport { ValidatorFn, AsyncValidatorFn } from '@angular/forms';\n\nimport { SECONDARY_PLACEHOLDER, PLACEHOLDER } from './core/constants/index';\nimport { TagInputDropdown } from './components/dropdown/tag-input-dropdown.component';\nimport { TagModel } from './core/accessor';\n\nexport interface TagInputOptions {\n    separatorKeys: string[];\n    separatorKeyCodes: number[];\n    maxItems: number;\n    placeholder: string;\n    secondaryPlaceholder: string;\n    validators: ValidatorFn[];\n    asyncValidators: AsyncValidatorFn[];\n    onlyFromAutocomplete: boolean;\n    errorMessages: { [key: string]: string; };\n    theme: string;\n    onTextChangeDebounce: number;\n    inputId: string | null;\n    inputClass: string;\n    clearOnBlur: boolean;\n    hideForm: boolean;\n    addOnBlur: boolean;\n    addOnPaste: boolean;\n    pasteSplitPattern: string | RegExp;\n    blinkIfDupe: boolean;\n    removable: boolean;\n    editable: boolean;\n    allowDupes: boolean;\n    modelAsStrings: boolean;\n    trimTags: boolean;\n    ripple: boolean;\n    tabIndex: string;\n    disable: boolean;\n    dragZone: string;\n    onRemoving?: (tag: TagModel) => Observable<TagModel>;\n    onAdding?: (tag: TagModel) => Observable<TagModel>;\n    displayBy: string;\n    identifyBy: string;\n    animationDuration: {\n        enter: string,\n        leave: string\n    };\n}\n\nexport interface TagInputDropdownOptions {\n    displayBy: string;\n    identifyBy: string;\n    appendToBody: boolean;\n    offset: string;\n    focusFirstElement: boolean;\n    showDropdownIfEmpty: boolean;\n    minimumTextLength: number;\n    limitItemsTo: number;\n    keepOpen: boolean;\n    zIndex: number;\n    dynamicUpdate: boolean;\n    matchingFn: (value: string, target: TagModel) => boolean;\n}\n\nexport const defaults = {\n    tagInput: <TagInputOptions>{\n        separatorKeys: [],\n        separatorKeyCodes: [],\n        maxItems: Infinity,\n        placeholder: PLACEHOLDER,\n        secondaryPlaceholder: SECONDARY_PLACEHOLDER,\n        validators: [],\n        asyncValidators: [],\n        onlyFromAutocomplete: false,\n        errorMessages: {},\n        theme: '',\n        onTextChangeDebounce: 250,\n        inputId: null,\n        inputClass: '',\n        clearOnBlur: false,\n        hideForm: false,\n        addOnBlur: false,\n        addOnPaste: false,\n        pasteSplitPattern: ',',\n        blinkIfDupe: true,\n        removable: true,\n        editable: false,\n        allowDupes: false,\n        modelAsStrings: false,\n        trimTags: true,\n        ripple: true,\n        tabIndex: '',\n        disable: false,\n        dragZone: '',\n        onRemoving: undefined,\n        onAdding: undefined,\n        displayBy: 'display',\n        identifyBy: 'value',\n        animationDuration: {\n            enter: '250ms',\n            leave: '150ms'\n        }\n    },\n    dropdown: <TagInputDropdownOptions>{\n        displayBy: 'display',\n        identifyBy: 'value',\n        appendToBody: true,\n        offset: '50 0',\n        focusFirstElement: false,\n        showDropdownIfEmpty: false,\n        minimumTextLength: 1,\n        limitItemsTo: Infinity,\n        keepOpen: true,\n        dynamicUpdate: true,\n        zIndex: 1000,\n        matchingFn\n    }\n};\n\n/**\n * @name matchingFn\n * @param this\n * @param value\n * @param target\n */\nfunction matchingFn(this: TagInputDropdown, value: string, target: TagModel): boolean {\n    const targetValue = target[this.displayBy].toString();\n\n    return targetValue && targetValue\n        .toLowerCase()\n        .indexOf(value.toLowerCase()) >= 0;\n}\n",
    "import { defaults, TagInputOptions, TagInputDropdownOptions } from '../../defaults';\n\nexport type Options = {\n    tagInput?: {\n        [P in keyof TagInputOptions]?: TagInputOptions[P];\n    };\n    dropdown?: {\n        [P in keyof TagInputDropdownOptions]?: TagInputDropdownOptions[P];\n    }\n}\n\nexport class OptionsProvider {\n    public static defaults = defaults;\n\n    public setOptions(options: Options): void {\n        OptionsProvider.defaults.tagInput = {...defaults.tagInput, ...options.tagInput};\n        OptionsProvider.defaults.dropdown = {...defaults.dropdown, ...options.dropdown};\n    }\n}\n\nexport { TagInputDropdownOptions, TagInputOptions };",
    "import { ControlValueAccessor } from '@angular/forms';\nimport { Input } from '@angular/core';\nimport { OptionsProvider } from './providers/options-provider';\n\nexport class TagModelClass {\n    [key: string]: any;\n}\n\nexport type TagModel = string | TagModelClass;\n\nexport function isObject(obj: any): boolean {\n    return obj === Object(obj);\n}\n\nexport class TagInputAccessor implements ControlValueAccessor {\n    private _items: TagModel[] = [];\n    private _onTouchedCallback: () => void;\n    private _onChangeCallback: (items: TagModel[]) => void;\n\n    /**\n     * @name displayBy\n     */\n    @Input() public displayBy: string = OptionsProvider.defaults.tagInput.displayBy;\n\n    /**\n     * @name identifyBy\n     */\n    @Input() public identifyBy: string = OptionsProvider.defaults.tagInput.identifyBy;\n\n    public get items(): TagModel[] {\n        return this._items;\n    };\n\n    public set items(items: TagModel[]) {\n        this._items = items;\n        this._onChangeCallback(this._items);\n    }\n\n    public onTouched() {\n        this._onTouchedCallback();\n    }\n\n    public writeValue(items: any[]) {\n        this._items = items || [];\n    }\n\n    public registerOnChange(fn: any) {\n        this._onChangeCallback = fn;\n    }\n\n    public registerOnTouched(fn: any) {\n        this._onTouchedCallback = fn;\n    }\n\n    /**\n     * @name getItemValue\n     * @param item\n     */\n    public getItemValue(item: TagModel): string {\n        return isObject(item) ? item[this.identifyBy] : item;\n    }\n\n    /**\n     * @name getItemDisplay\n     * @param item\n     */\n    public getItemDisplay(item: TagModel): string {\n        return isObject(item) ? item[this.displayBy] : item;\n    }\n\n    /**\n     * @name getItemsWithout\n     * @param index\n     */\n    protected getItemsWithout(index: number): TagModel[] {\n        return this.items.filter((item, position) => position !== index);\n    }\n}\n",
    "\n/**\n * @name listen\n * @param listenerType\n * @param action\n * @param condition\n */\nexport function listen(listenerType: string, action: () => any, condition = true): void {\n    // if the event provided does not exist, throw an error\n    if (!this.listeners.hasOwnProperty(listenerType)) {\n        throw new Error('The event entered may be wrong');\n    }\n\n    // if a condition is present and is false, exit early\n    if (!condition) {\n        return;\n    }\n\n    // fire listener\n    this.listeners[listenerType].push(action);\n}\n",
    "import { Component, EventEmitter, Input, Output, ViewChild, OnChanges, SimpleChanges } from '@angular/core';\nimport { AbstractControl, AsyncValidatorFn, FormControl, FormGroup, ValidatorFn, Validators } from '@angular/forms';\n\n@Component({\n    selector: 'tag-input-form',\n    styles: [`.dark tag:focus {\n  -webkit-box-shadow: 0 0 0 1px #323232;\n          box-shadow: 0 0 0 1px #323232; }\n\n.ng2-tag-input.bootstrap3-info {\n  background-color: #fff;\n  display: inline-block;\n  color: #555;\n  vertical-align: middle;\n  max-width: 100%;\n  height: 42px;\n  line-height: 44px; }\n\n.ng2-tag-input.bootstrap3-info input {\n  border: none;\n  -webkit-box-shadow: none;\n          box-shadow: none;\n  outline: none;\n  background-color: transparent;\n  padding: 0 6px;\n  margin: 0;\n  width: auto;\n  max-width: inherit; }\n\n.ng2-tag-input.bootstrap3-info .form-control input::-moz-placeholder {\n  color: #777;\n  opacity: 1; }\n\n.ng2-tag-input.bootstrap3-info .form-control input:-ms-input-placeholder {\n  color: #777; }\n\n.ng2-tag-input.bootstrap3-info .form-control input::-webkit-input-placeholder {\n  color: #777; }\n\n.ng2-tag-input.bootstrap3-info input:focus {\n  border: none;\n  -webkit-box-shadow: none;\n          box-shadow: none; }\n\n.bootstrap3-info.ng2-tag-input.ng2-tag-input--focused {\n  -webkit-box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.4);\n          box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.4);\n  border: 1px solid #ccc; }\n\n.bootstrap3-info.ng2-tag-input.ng2-tag-input--invalid {\n  -webkit-box-shadow: inset 0 1px 1px #d9534f;\n          box-shadow: inset 0 1px 1px #d9534f; }\n\n.ng2-tag-input {\n  display: block;\n  -webkit-box-orient: horizontal;\n  -webkit-box-direction: normal;\n      -ms-flex-direction: row;\n          flex-direction: row;\n  -ms-flex-wrap: wrap;\n      flex-wrap: wrap;\n  position: relative;\n  -webkit-transition: all 0.25s;\n  transition: all 0.25s;\n  padding: 0.25rem 0;\n  min-height: 32px;\n  cursor: text;\n  border-bottom: 2px solid #efefef; }\n  .ng2-tag-input:focus {\n    outline: 0; }\n  .ng2-tag-input.ng2-tag-input--dropping {\n    opacity: 0.7; }\n  .ng2-tag-input.ng2-tag-input--focused {\n    border-bottom: 2px solid #2196F3; }\n  .ng2-tag-input.ng2-tag-input--invalid {\n    border-bottom: 2px solid #f44336; }\n  .ng2-tag-input.ng2-tag-input--loading {\n    border: none; }\n  .ng2-tag-input.ng2-tag-input--disabled {\n    opacity: 0.5;\n    cursor: not-allowed; }\n  .ng2-tag-input form {\n    margin: 0.1em 0; }\n  .ng2-tag-input .ng2-tags-container {\n    -ms-flex-wrap: wrap;\n        flex-wrap: wrap;\n    display: -webkit-box;\n    display: -ms-flexbox;\n    display: flex; }\n\n.minimal.ng2-tag-input {\n  display: block;\n  -webkit-box-orient: horizontal;\n  -webkit-box-direction: normal;\n      -ms-flex-direction: row;\n          flex-direction: row;\n  -ms-flex-wrap: wrap;\n      flex-wrap: wrap;\n  position: relative;\n  cursor: text;\n  border-bottom: 1px solid transparent; }\n  .minimal.ng2-tag-input:focus {\n    outline: 0; }\n  .minimal.ng2-tag-input.ng2-tag-input--dropping {\n    opacity: 0.7; }\n  .minimal.ng2-tag-input.ng2-tag-input--loading {\n    border: none; }\n  .minimal.ng2-tag-input.ng2-tag-input--disabled {\n    opacity: 0.5;\n    cursor: not-allowed; }\n  .minimal.ng2-tag-input .ng2-tags-container {\n    -ms-flex-wrap: wrap;\n        flex-wrap: wrap;\n    display: -webkit-box;\n    display: -ms-flexbox;\n    display: flex; }\n\n.dark.ng2-tag-input {\n  display: block;\n  -webkit-box-orient: horizontal;\n  -webkit-box-direction: normal;\n      -ms-flex-direction: row;\n          flex-direction: row;\n  -ms-flex-wrap: wrap;\n      flex-wrap: wrap;\n  position: relative;\n  cursor: text;\n  border-bottom: 2px solid #444; }\n  .dark.ng2-tag-input:focus {\n    outline: 0; }\n  .dark.ng2-tag-input.ng2-tag-input--dropping {\n    opacity: 0.7; }\n  .dark.ng2-tag-input.ng2-tag-input--loading {\n    border: none; }\n  .dark.ng2-tag-input.ng2-tag-input--disabled {\n    opacity: 0.5;\n    cursor: not-allowed; }\n  .dark.ng2-tag-input .ng2-tags-container {\n    -ms-flex-wrap: wrap;\n        flex-wrap: wrap;\n    display: -webkit-box;\n    display: -ms-flexbox;\n    display: flex; }\n\n.bootstrap.ng2-tag-input {\n  display: block;\n  -webkit-box-orient: horizontal;\n  -webkit-box-direction: normal;\n      -ms-flex-direction: row;\n          flex-direction: row;\n  -ms-flex-wrap: wrap;\n      flex-wrap: wrap;\n  position: relative;\n  cursor: text;\n  border-bottom: 2px solid #efefef; }\n  .bootstrap.ng2-tag-input:focus {\n    outline: 0; }\n  .bootstrap.ng2-tag-input.ng2-tag-input--dropping {\n    opacity: 0.7; }\n  .bootstrap.ng2-tag-input.ng2-tag-input--focused {\n    border-bottom: 2px solid #0275d8; }\n  .bootstrap.ng2-tag-input.ng2-tag-input--invalid {\n    border-bottom: 2px solid #d9534f; }\n  .bootstrap.ng2-tag-input.ng2-tag-input--loading {\n    border: none; }\n  .bootstrap.ng2-tag-input.ng2-tag-input--disabled {\n    opacity: 0.5;\n    cursor: not-allowed; }\n  .bootstrap.ng2-tag-input .ng2-tags-container {\n    -ms-flex-wrap: wrap;\n        flex-wrap: wrap;\n    display: -webkit-box;\n    display: -ms-flexbox;\n    display: flex; }\n\n.bootstrap3-info.ng2-tag-input {\n  display: block;\n  -webkit-box-orient: horizontal;\n  -webkit-box-direction: normal;\n      -ms-flex-direction: row;\n          flex-direction: row;\n  -ms-flex-wrap: wrap;\n      flex-wrap: wrap;\n  position: relative;\n  padding: 4px;\n  cursor: text;\n  -webkit-box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075);\n          box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075);\n  border-radius: 4px; }\n  .bootstrap3-info.ng2-tag-input:focus {\n    outline: 0; }\n  .bootstrap3-info.ng2-tag-input.ng2-tag-input--dropping {\n    opacity: 0.7; }\n  .bootstrap3-info.ng2-tag-input.ng2-tag-input--invalid {\n    border-bottom: 1px solid #d9534f; }\n  .bootstrap3-info.ng2-tag-input.ng2-tag-input--loading {\n    border: none; }\n  .bootstrap3-info.ng2-tag-input.ng2-tag-input--disabled {\n    opacity: 0.5;\n    cursor: not-allowed; }\n  .bootstrap3-info.ng2-tag-input form {\n    margin: 0.1em 0; }\n  .bootstrap3-info.ng2-tag-input .ng2-tags-container {\n    -ms-flex-wrap: wrap;\n        flex-wrap: wrap;\n    display: -webkit-box;\n    display: -ms-flexbox;\n    display: flex; }\n\n.error-message {\n  font-size: 0.8em;\n  color: #f44336;\n  margin: 0.5em 0 0 0; }\n\n.bootstrap .error-message {\n  color: #d9534f; }\n\n.ng2-tag-input__text-input {\n  display: inline;\n  vertical-align: middle;\n  border: none;\n  padding: 0 0.5rem;\n  height: 38px;\n  font-size: 1em;\n  font-family: \"Roboto\", \"Helvetica Neue\", sans-serif; }\n  .ng2-tag-input__text-input:focus {\n    outline: 0; }\n  .ng2-tag-input__text-input[disabled=true] {\n    opacity: 0.5;\n    background: #fff; }\n`],\n    template: `<!-- form -->\n<form (submit)=\"submit($event)\" [formGroup]=\"form\">\n    <input #input\n\n           type=\"text\"\n           class=\"ng2-tag-input__text-input\"\n           autocomplete=\"off\"\n           tabindex=\"{{ disabled ? -1 : tabindex ? tabindex : 0 }}\"\n           minlength=\"1\"\n\n           [(ngModel)]=\"inputText\"\n           [formControlName]=\"'item'\"\n           [ngClass]=\"inputClass\"\n           [attr.id]=\"inputId\"\n           [attr.placeholder]=\"placeholder\"\n           [attr.aria-label]=\"placeholder\"\n           [attr.tabindex]=\"tabindex\"\n           [attr.disabled]=\"disabled ? disabled : null\"\n\n           (focus)=\"onFocus.emit($event)\"\n           (blur)=\"onBlur.emit($event)\"\n           (keydown)=\"onKeyDown($event)\"\n           (keyup)=\"onKeyup.emit($event)\"\n    />\n</form>\n`\n})\nexport class TagInputForm implements OnChanges {\n    /**\n     * @name onSubmit\n     */\n    @Output() public onSubmit: EventEmitter<any> = new EventEmitter();\n\n    /**\n     * @name onBlur\n     */\n    @Output() public onBlur: EventEmitter<any> = new EventEmitter();\n\n    /**\n     * @name onFocus\n     */\n    @Output() public onFocus: EventEmitter<any> = new EventEmitter();\n\n    /**\n     * @name onKeyup\n     */\n    @Output() public onKeyup: EventEmitter<any> = new EventEmitter();\n\n    /**\n     * @name onKeydown\n     */\n    @Output() public onKeydown: EventEmitter<any> = new EventEmitter();\n\n    // inputs\n\n    /**\n     * @name placeholder\n     */\n    @Input() public placeholder: string;\n\n    /**\n     * @name validators\n     */\n    @Input() public validators: ValidatorFn[] = [];\n\n    /**\n     * @name asyncValidators\n     * @desc array of AsyncValidator that are used to validate the tag before it gets appended to the list\n     */\n    @Input() public asyncValidators: AsyncValidatorFn[] = [];\n\n    /**\n     * @name inputId\n     */\n    @Input() public inputId: string;\n\n    /**\n     * @name inputClass\n     */\n    @Input() public inputClass: string;\n\n    /**\n     * @name inputText\n     */\n    @Input() public get inputText(): string {\n        return this.inputTextValue;\n    }\n\n    /**\n     * @name tabindex\n     * @desc pass through the specified tabindex to the input\n     */\n    @Input() public tabindex = '';\n\n    /**\n     * @name disabled\n     */\n    @Input() public disabled = false;\n\n    /**\n     * @name inputText\n     * @param text {string}\n     */\n    public set inputText(text: string) {\n        this.inputTextValue = text;\n        this.inputTextChange.emit(text);\n    }\n\n    /**\n     * @name input\n     */\n    @ViewChild('input') public input;\n\n    /**\n     * @name form\n     */\n    public form: FormGroup;\n\n    /**\n     * @name inputTextChange\n     */\n    @Output() public inputTextChange: EventEmitter<string> = new EventEmitter();\n\n    /**\n     * @name inputTextValue\n     */\n    public inputTextValue = '';\n\n    public ngOnInit() {\n        // creating form\n        this.form = new FormGroup({\n            item: new FormControl({value: '', disabled: this.disabled}, this.validators, this.asyncValidators)\n        });\n    }\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if (changes.disabled && !changes.disabled.firstChange) {\n            if (changes.disabled.currentValue) {\n                this.form.controls['item'].disable();\n            } else {\n                this.form.controls['item'].enable();\n            }\n        }\n    }\n\n\t/**\n     * @name value\n     */\n    public get value(): FormControl {\n        return this.form.get('item') as FormControl;\n    }\n\n\t/**\n     * @name isInputFocused\n     */\n    public isInputFocused(): boolean {\n        return document.activeElement === this.input.nativeElement;\n    }\n\n\t/**\n     * @name getErrorMessages\n     * @param messages\n     */\n    public getErrorMessages(messages: {[key: string]: string}): string[] {\n        return Object.keys(messages)\n            .filter(err => this.value.hasError(err))\n            .map(err => messages[err]);\n    }\n\n    /**\n     * @name hasErrors\n     */\n    public hasErrors(): boolean {\n        const { dirty, value, valid } = this.form;\n        return dirty && value.item && !valid;\n    }\n\n\t/**\n     * @name focus\n     */\n    public focus(): void {\n        this.input.nativeElement.focus();\n    }\n\n    /**\n     * @name blur\n     */\n    public blur(): void {\n        this.input.nativeElement.blur();\n    }\n\n\t/**\n     * @name getElementPosition\n     */\n    public getElementPosition(): ClientRect {\n        return this.input.nativeElement.getBoundingClientRect();\n    }\n\n    /**\n     * - removes input from the component\n     * @name destroy\n     */\n    public destroy(): void {\n        const input = this.input.nativeElement;\n        input.parentElement.removeChild(input);\n    }\n\n    /**\n     * @name onKeyDown\n     * @param $event\n     */\n    public onKeyDown($event) {\n        return this.onKeydown.emit($event);\n    }\n\n    /**\n     * @name submit\n     */\n    public submit($event: any): void {\n        if (this.form.valid) {\n            this.onSubmit.emit($event);\n        }\n    }\n}\n",
    "import {\n    Component,\n    Input\n} from '@angular/core';\n\n\nimport {\n    animate,\n    trigger,\n    style,\n    transition,\n    keyframes,\n    state\n} from '@angular/animations';\n\n@Component({\n    selector: 'tag-ripple',\n    styles: [`\n        :host {\n            width: 100%;\n            height: 100%;\n            left: 0;\n            overflow: hidden;\n            position: absolute;\n        }\n        \n        .tag-ripple {\n            background: rgba(0, 0, 0, 0.1);\n            top: 50%;\n            left: 50%;\n            height: 100%;\n            transform: translate(-50%, -50%);\n            position: absolute;\n        }\n    `],\n    template: `\n        <div class=\"tag-ripple\" [@ink]=\"state\"></div>\n    `,\n    animations: [\n        trigger('ink', [\n            state('none', style({width: 0, opacity: 0})),\n            transition('none => clicked', [\n                animate(300, keyframes([\n                    style({opacity: 1, offset: 0, width: '30%', borderRadius: '100%'}),\n                    style({opacity: 1, offset: 0.5, width: '50%'}),\n                    style({opacity: 0.5, offset: 1, width: '100%', borderRadius: '16px'})\n                ]))\n            ])\n        ])\n    ]\n})\nexport class TagRipple {\n    @Input() public state: string = 'none';\n}\n",
    "import {\n    Component,\n    Input,\n    Output,\n    EventEmitter,\n    TemplateRef,\n    ElementRef,\n    HostListener,\n    HostBinding,\n    ViewChild,\n    ChangeDetectorRef,\n    Renderer2\n} from '@angular/core';\n\nimport { TagModel } from '../../core/accessor';\nimport { TagRipple } from '../tag/tag-ripple.component';\n\n// angular universal hacks\n/* tslint:disable-next-line */\nconst KeyboardEvent = (window as any).KeyboardEvent;\nconst MouseEvent = (window as any).MouseEvent;\n\n// mocking navigator\nconst navigator = typeof window !== 'undefined' ? window.navigator : {\n    userAgent: 'Chrome',\n    vendor: 'Google Inc'\n};\n\nconst isChrome = /Chrome/.test(navigator.userAgent) && /Google Inc/.test(navigator.vendor);\n\n@Component({\n    selector: 'tag',\n    template: `<div (click)=\"select($event)\"\n     (dblclick)=\"toggleEditMode()\"\n     (mousedown)=\"rippleState='clicked'\"\n     (mouseup)=\"rippleState='none'\"\n     [ngSwitch]=\"!!template\"\n     [class.disabled]=\"disabled\"\n     [attr.tabindex]=\"-1\"\n     [attr.aria-label]=\"getDisplayValue(model)\">\n\n    <div *ngSwitchCase=\"true\" [attr.contenteditable]=\"editing\">\n        <!-- CUSTOM TEMPLATE -->\n        <ng-template\n            [ngTemplateOutletContext]=\"{ item: model, index: index }\"\n            [ngTemplateOutlet]=\"template\">\n        </ng-template>\n    </div>\n\n    <div *ngSwitchCase=\"false\" class=\"tag-wrapper\">\n        <!-- TAG NAME -->\n        <div [attr.contenteditable]=\"editing\"\n             [attr.title]=\"getDisplayValue(model)\"\n             class=\"tag__text inline\"\n             spellcheck=\"false\"\n             (keydown.enter)=\"disableEditMode($event)\"\n             (keydown.escape)=\"disableEditMode($event)\"\n             (click)=\"editing ? $event.stopPropagation() : undefined\"\n             (blur)=\"onBlurred($event)\">\n            {{ getDisplayValue(model) }}\n        </div>\n\n        <!-- 'X' BUTTON -->\n        <delete-icon\n            aria-label=\"Remove tag\"\n            role=\"button\"\n            (click)=\"remove($event)\"\n            *ngIf=\"isDeleteIconVisible()\">\n        </delete-icon>\n    </div>\n</div>\n\n<tag-ripple [state]=\"rippleState\"\n            [attr.tabindex]=\"-1\"\n            *ngIf=\"isRippleVisible\">\n</tag-ripple>\n`,\n    styles: [`:host,\n:host > div,\n:host > div:focus {\n  outline: 0;\n  overflow: hidden;\n  -webkit-transition: opacity 1s;\n  transition: opacity 1s;\n  z-index: 1; }\n\n:host {\n  max-width: 400px; }\n\n:host.blink {\n  -webkit-animation: blink 0.3s normal forwards ease-in-out;\n  animation: blink 0.3s normal forwards ease-in-out; }\n\n@-webkit-keyframes blink {\n  0% {\n    opacity: 0.3; } }\n\n@keyframes blink {\n  0% {\n    opacity: 0.3; } }\n\n:host .disabled {\n  cursor: not-allowed; }\n\n:host [contenteditable='true'] {\n  outline: 0; }\n\n.tag-wrapper {\n  -webkit-box-orient: horizontal;\n  -webkit-box-direction: normal;\n      -ms-flex-direction: row;\n          flex-direction: row;\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex; }\n\n.tag__text {\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap; }\n`]\n})\nexport class TagComponent {\n    /**\n     * @name model {TagModel}\n     */\n    @Input() public model: TagModel;\n\n    /**\n     * @name removable {boolean}\n     */\n    @Input() public removable: boolean;\n\n    /**\n     * @name editable {boolean}\n     */\n    @Input() public editable: boolean;\n\n    /**\n     * @name template {TemplateRef<any>}\n     */\n    @Input() public template: TemplateRef<any>;\n\n    /**\n     * @name displayBy {string}\n     */\n    @Input() public displayBy: string;\n\n    /**\n     * @name identifyBy {string}\n     */\n    @Input() public identifyBy: string;\n\n    /**\n     * @name index {number}\n     */\n    @Input() public index: number;\n\n    /**\n     * @name hasRipple\n     */\n    @Input() public hasRipple: boolean;\n\n    /**\n     * @name disabled\n     */\n    @Input() public disabled = false;\n\n    /**\n     * @name canAddTag\n     */\n    @Input() public canAddTag: (tag: TagModel) => boolean;\n\n    /**\n     * @name onSelect\n     */\n    @Output() public onSelect: EventEmitter<TagModel> = new EventEmitter<TagModel>();\n\n    /**\n     * @name onRemove\n     */\n    @Output() public onRemove: EventEmitter<TagModel> = new EventEmitter<TagModel>();\n\n    /**\n     * @name onBlur\n     */\n    @Output() public onBlur: EventEmitter<TagModel> = new EventEmitter<TagModel>();\n\n    /**\n     * @name onKeyDown\n     */\n    @Output() public onKeyDown: EventEmitter<any> = new EventEmitter<any>();\n\n    /**\n     * @name onTagEdited\n     */\n    @Output() public onTagEdited: EventEmitter<TagModel> = new EventEmitter<TagModel>();\n\n    /**\n     * @name readonly {boolean}\n     */\n    public get readonly(): boolean {\n        return typeof this.model !== 'string' && this.model.readonly === true;\n    };\n\n    /**\n     * @name editing\n     */\n    public editing = false;\n\n    /**\n     * @name moving\n     */\n    @HostBinding('class.moving') public moving: boolean;\n\n    /**\n     * @name rippleState\n     */\n    public rippleState = 'none';\n\n    /**\n     * @name ripple {TagRipple}\n     */\n    @ViewChild(TagRipple) public ripple: TagRipple;\n\n    constructor(public element: ElementRef,\n                public renderer: Renderer2,\n                private cdRef: ChangeDetectorRef) {}\n\n    /**\n     * @name select\n     */\n    public select($event?: MouseEvent): void {\n        if (this.readonly || this.disabled) {\n            return;\n        }\n\n        if ($event) {\n            $event.stopPropagation();\n        }\n\n        this.focus();\n\n        this.onSelect.emit(this.model);\n    }\n\n    /**\n     * @name remove\n     */\n    public remove($event: MouseEvent): void {\n        $event.stopPropagation();\n        this.onRemove.emit(this);\n    }\n\n    /**\n     * @name focus\n     */\n    public focus(): void {\n        this.element.nativeElement.focus();\n    }\n\n    public move(): void {\n        this.moving = true;\n    }\n\n    /**\n     * @name keydown\n     * @param event\n     */\n    @HostListener('keydown', ['$event'])\n    public keydown(event: KeyboardEvent): void {\n        if (this.editing) {\n            event.keyCode === 13 ? this.disableEditMode(event) : undefined;\n            return;\n        }\n\n        this.onKeyDown.emit({event, model: this.model});\n    }\n\n    /**\n     * @name blink\n     */\n    public blink(): void {\n        const classList = this.element.nativeElement.classList;\n        classList.add('blink');\n\n        setTimeout(() => classList.remove('blink'), 50);\n    }\n\n    /**\n     * @name toggleEditMode\n     */\n    public toggleEditMode(): void {\n        if (this.editable) {\n            this.editing ? undefined : this.activateEditMode();\n        }\n    }\n\n    /**\n     * @name onBlurred\n     * @param event\n     */\n    public onBlurred(event: any): void {\n        // Checks if it is editable first before handeling the onBlurred event in order to prevent\n        // a bug in IE where tags are still editable with onlyFromAutocomplete set to true\n\t\tif (!this.editable) {\n            return;\n        }\n\n        this.disableEditMode();\n\n        const value: string = event.target.innerText;\n        const result = typeof this.model === 'string' ? value :\n            {...this.model, [this.displayBy]: value};\n\n        this.onBlur.emit(result);\n    }\n\n    /**\n     * @name getDisplayValue\n     * @param item\n     */\n    public getDisplayValue(item: TagModel): string {\n        return typeof item === 'string' ? item : item[this.displayBy];\n    }\n\n    /**\n     * @desc returns whether the ripple is visible or not\n     * only works in Chrome\n     * @name isRippleVisible\n     */\n    public get isRippleVisible(): boolean {\n        return !this.readonly &&\n            !this.editing &&\n            isChrome &&\n            this.hasRipple;\n    }\n\n    /**\n     * @name disableEditMode\n     * @param $event\n     */\n    public disableEditMode($event?: KeyboardEvent): void {\n        const classList = this.element.nativeElement.classList;\n        const input = this.getContentEditableText();\n\n        this.editing = false;\n        classList.remove('tag--editing');\n\n        if (!input) {\n            this.setContentEditableText(this.model);\n            return;\n        }\n\n        this.storeNewValue(input);\n        this.cdRef.detectChanges();\n\n        if ($event) {\n            $event.preventDefault();\n        }\n    }\n\n    /**\n     * @name isDeleteIconVisible\n     */\n    public isDeleteIconVisible(): boolean {\n        return !this.readonly &&\n            !this.disabled &&\n            this.removable &&\n            !this.editing;\n    }\n\n    /**\n     * @name getContentEditableText\n     */\n    private getContentEditableText(): string {\n        const input = this.getContentEditable();\n\n        return input ? input.innerText.trim() : '';\n    }\n\n    /**\n     * @name setContentEditableText\n     * @param model\n     */\n    private setContentEditableText(model: TagModel) {\n        const input = this.getContentEditable();\n        const value = this.getDisplayValue(model);\n\n        input.innerText = value;\n    }\n\n    /**\n     * @name\n     */\n    private activateEditMode(): void {\n        const classList = this.element.nativeElement.classList;\n        classList.add('tag--editing');\n\n        this.editing = true;\n    }\n\n    /**\n     * @name storeNewValue\n     * @param input\n     */\n    private storeNewValue(input: string): void {\n        const exists = (tag: TagModel) => {\n            return typeof tag === 'string' ?\n            tag === input :\n            tag[this.displayBy] === input;\n        };\n\n        const hasId = () => {\n            return this.model[this.identifyBy] !== this.model[this.displayBy];\n        };\n\n        // if the value changed, replace the value in the model\n        if (exists(this.model)) {\n            return;\n        }\n\n        const model = typeof this.model === 'string' ? input :\n            {\n                [this.identifyBy]: hasId() ? this.model[this.identifyBy] : input,\n                [this.displayBy]: input\n            };\n\n        if (this.canAddTag(model)) {\n            this.onTagEdited.emit({tag: model, index: this.index});\n        } else {\n            this.setContentEditableText(this.model);\n        }\n    }\n\n    /**\n     * @name getContentEditable\n     */\n    private getContentEditable(): HTMLInputElement {\n        return this.element.nativeElement.querySelector('[contenteditable]');\n    }\n}\n",
    "import {\n    animate,\n    trigger,\n    style,\n    transition,\n    keyframes,\n    state,\n    AnimationTriggerMetadata\n} from '@angular/animations';\n\n/**\n * @name animations\n */\nexport const animations = [\n    trigger('animation', [\n        state('in', style({\n            opacity: 1\n        })),\n        state('out', style({\n            opacity: 0\n        })),\n        transition(':enter', [\n            animate(\"{{ enter }}\", keyframes([\n                style({opacity: 0, offset: 0, transform: 'translate(0px, 20px)'}),\n                style({opacity: 0.3, offset: 0.3, transform: 'translate(0px, -10px)'}),\n                style({opacity: 0.5, offset: 0.5, transform: 'translate(0px, 0px)'}),\n                style({opacity: 0.75, offset: 0.75, transform: 'translate(0px, 5px)'}),\n                style({opacity: 1, offset: 1, transform: 'translate(0px, 0px)'})\n            ]))\n        ]),\n        transition(':leave', [\n            animate(\"{{ leave }}\", keyframes([\n                style({opacity: 1, transform: 'translateX(0)', offset: 0}),\n                style({opacity: 1, transform: 'translateX(-15px)', offset: 0.7}),\n                style({opacity: 0, transform: 'translateX(100%)', offset: 1.0})\n            ]))\n        ])\n    ])\n];\n",
    "// angular\nimport {\n    Component,\n    forwardRef,\n    HostBinding,\n    Input,\n    Output,\n    EventEmitter,\n    Renderer2,\n    ViewChild,\n    ViewChildren,\n    ContentChildren,\n    ContentChild,\n    OnInit,\n    TemplateRef,\n    QueryList,\n    AfterViewInit,\n    Type\n} from '@angular/core';\n\nimport {\n    AsyncValidatorFn,\n    FormControl,\n    NG_VALUE_ACCESSOR,\n    ValidatorFn\n} from '@angular/forms';\n\n// rx\nimport { Observable } from 'rxjs/Observable';\nimport { of } from 'rxjs/observable/of';\nimport { combineLatest } from 'rxjs/observable/combineLatest';\nimport { debounceTime, filter, map, first, mapTo, takeWhile,\n     startWith, mergeMap, last, tap\n} from 'rxjs/operators';\n\n// ng2-tag-input\nimport { TagInputAccessor, TagModel } from '../../core/accessor';\nimport { listen } from '../../core/helpers/listen';\nimport * as constants from '../../core/constants';\n\nimport { DragProvider, DraggedTag } from '../../core/providers/drag-provider';\nimport { OptionsProvider } from '../../core/providers/options-provider';\n\nimport { TagInputForm } from '../tag-input-form/tag-input-form.component';\nimport { TagInputDropdown } from '../dropdown/tag-input-dropdown.component';\nimport { TagComponent } from '../tag/tag.component';\n\nimport { animations } from './animations';\nimport { TagInputOptions } from '../../defaults';\nimport { Subscription } from 'rxjs/Subscription';\n\n// angular universal hacks\n/* tslint:disable-next-line */\nconst DragEvent = (window as any).DragEvent;\n\nconst CUSTOM_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => TagInputComponent),\n    multi: true\n};\n\nconst defaults: Type<TagInputOptions> = forwardRef(() => OptionsProvider.defaults.tagInput);\n\n@Component({\n    selector: 'tag-input',\n    providers: [CUSTOM_ACCESSOR],\n    styles: [`.dark tag:focus {\n  -webkit-box-shadow: 0 0 0 1px #323232;\n          box-shadow: 0 0 0 1px #323232; }\n\n.ng2-tag-input.bootstrap3-info {\n  background-color: #fff;\n  display: inline-block;\n  color: #555;\n  vertical-align: middle;\n  max-width: 100%;\n  height: 42px;\n  line-height: 44px; }\n\n.ng2-tag-input.bootstrap3-info input {\n  border: none;\n  -webkit-box-shadow: none;\n          box-shadow: none;\n  outline: none;\n  background-color: transparent;\n  padding: 0 6px;\n  margin: 0;\n  width: auto;\n  max-width: inherit; }\n\n.ng2-tag-input.bootstrap3-info .form-control input::-moz-placeholder {\n  color: #777;\n  opacity: 1; }\n\n.ng2-tag-input.bootstrap3-info .form-control input:-ms-input-placeholder {\n  color: #777; }\n\n.ng2-tag-input.bootstrap3-info .form-control input::-webkit-input-placeholder {\n  color: #777; }\n\n.ng2-tag-input.bootstrap3-info input:focus {\n  border: none;\n  -webkit-box-shadow: none;\n          box-shadow: none; }\n\n.bootstrap3-info.ng2-tag-input.ng2-tag-input--focused {\n  -webkit-box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.4);\n          box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.4);\n  border: 1px solid #ccc; }\n\n.bootstrap3-info.ng2-tag-input.ng2-tag-input--invalid {\n  -webkit-box-shadow: inset 0 1px 1px #d9534f;\n          box-shadow: inset 0 1px 1px #d9534f; }\n\n.ng2-tag-input {\n  display: block;\n  -webkit-box-orient: horizontal;\n  -webkit-box-direction: normal;\n      -ms-flex-direction: row;\n          flex-direction: row;\n  -ms-flex-wrap: wrap;\n      flex-wrap: wrap;\n  position: relative;\n  -webkit-transition: all 0.25s;\n  transition: all 0.25s;\n  padding: 0.25rem 0;\n  min-height: 32px;\n  cursor: text;\n  border-bottom: 2px solid #efefef; }\n  .ng2-tag-input:focus {\n    outline: 0; }\n  .ng2-tag-input.ng2-tag-input--dropping {\n    opacity: 0.7; }\n  .ng2-tag-input.ng2-tag-input--focused {\n    border-bottom: 2px solid #2196F3; }\n  .ng2-tag-input.ng2-tag-input--invalid {\n    border-bottom: 2px solid #f44336; }\n  .ng2-tag-input.ng2-tag-input--loading {\n    border: none; }\n  .ng2-tag-input.ng2-tag-input--disabled {\n    opacity: 0.5;\n    cursor: not-allowed; }\n  .ng2-tag-input form {\n    margin: 0.1em 0; }\n  .ng2-tag-input .ng2-tags-container {\n    -ms-flex-wrap: wrap;\n        flex-wrap: wrap;\n    display: -webkit-box;\n    display: -ms-flexbox;\n    display: flex; }\n\n.minimal.ng2-tag-input {\n  display: block;\n  -webkit-box-orient: horizontal;\n  -webkit-box-direction: normal;\n      -ms-flex-direction: row;\n          flex-direction: row;\n  -ms-flex-wrap: wrap;\n      flex-wrap: wrap;\n  position: relative;\n  cursor: text;\n  border-bottom: 1px solid transparent; }\n  .minimal.ng2-tag-input:focus {\n    outline: 0; }\n  .minimal.ng2-tag-input.ng2-tag-input--dropping {\n    opacity: 0.7; }\n  .minimal.ng2-tag-input.ng2-tag-input--loading {\n    border: none; }\n  .minimal.ng2-tag-input.ng2-tag-input--disabled {\n    opacity: 0.5;\n    cursor: not-allowed; }\n  .minimal.ng2-tag-input .ng2-tags-container {\n    -ms-flex-wrap: wrap;\n        flex-wrap: wrap;\n    display: -webkit-box;\n    display: -ms-flexbox;\n    display: flex; }\n\n.dark.ng2-tag-input {\n  display: block;\n  -webkit-box-orient: horizontal;\n  -webkit-box-direction: normal;\n      -ms-flex-direction: row;\n          flex-direction: row;\n  -ms-flex-wrap: wrap;\n      flex-wrap: wrap;\n  position: relative;\n  cursor: text;\n  border-bottom: 2px solid #444; }\n  .dark.ng2-tag-input:focus {\n    outline: 0; }\n  .dark.ng2-tag-input.ng2-tag-input--dropping {\n    opacity: 0.7; }\n  .dark.ng2-tag-input.ng2-tag-input--loading {\n    border: none; }\n  .dark.ng2-tag-input.ng2-tag-input--disabled {\n    opacity: 0.5;\n    cursor: not-allowed; }\n  .dark.ng2-tag-input .ng2-tags-container {\n    -ms-flex-wrap: wrap;\n        flex-wrap: wrap;\n    display: -webkit-box;\n    display: -ms-flexbox;\n    display: flex; }\n\n.bootstrap.ng2-tag-input {\n  display: block;\n  -webkit-box-orient: horizontal;\n  -webkit-box-direction: normal;\n      -ms-flex-direction: row;\n          flex-direction: row;\n  -ms-flex-wrap: wrap;\n      flex-wrap: wrap;\n  position: relative;\n  cursor: text;\n  border-bottom: 2px solid #efefef; }\n  .bootstrap.ng2-tag-input:focus {\n    outline: 0; }\n  .bootstrap.ng2-tag-input.ng2-tag-input--dropping {\n    opacity: 0.7; }\n  .bootstrap.ng2-tag-input.ng2-tag-input--focused {\n    border-bottom: 2px solid #0275d8; }\n  .bootstrap.ng2-tag-input.ng2-tag-input--invalid {\n    border-bottom: 2px solid #d9534f; }\n  .bootstrap.ng2-tag-input.ng2-tag-input--loading {\n    border: none; }\n  .bootstrap.ng2-tag-input.ng2-tag-input--disabled {\n    opacity: 0.5;\n    cursor: not-allowed; }\n  .bootstrap.ng2-tag-input .ng2-tags-container {\n    -ms-flex-wrap: wrap;\n        flex-wrap: wrap;\n    display: -webkit-box;\n    display: -ms-flexbox;\n    display: flex; }\n\n.bootstrap3-info.ng2-tag-input {\n  display: block;\n  -webkit-box-orient: horizontal;\n  -webkit-box-direction: normal;\n      -ms-flex-direction: row;\n          flex-direction: row;\n  -ms-flex-wrap: wrap;\n      flex-wrap: wrap;\n  position: relative;\n  padding: 4px;\n  cursor: text;\n  -webkit-box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075);\n          box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075);\n  border-radius: 4px; }\n  .bootstrap3-info.ng2-tag-input:focus {\n    outline: 0; }\n  .bootstrap3-info.ng2-tag-input.ng2-tag-input--dropping {\n    opacity: 0.7; }\n  .bootstrap3-info.ng2-tag-input.ng2-tag-input--invalid {\n    border-bottom: 1px solid #d9534f; }\n  .bootstrap3-info.ng2-tag-input.ng2-tag-input--loading {\n    border: none; }\n  .bootstrap3-info.ng2-tag-input.ng2-tag-input--disabled {\n    opacity: 0.5;\n    cursor: not-allowed; }\n  .bootstrap3-info.ng2-tag-input form {\n    margin: 0.1em 0; }\n  .bootstrap3-info.ng2-tag-input .ng2-tags-container {\n    -ms-flex-wrap: wrap;\n        flex-wrap: wrap;\n    display: -webkit-box;\n    display: -ms-flexbox;\n    display: flex; }\n\n.error-message {\n  font-size: 0.8em;\n  color: #f44336;\n  margin: 0.5em 0 0 0; }\n\n.bootstrap .error-message {\n  color: #d9534f; }\n\n.progress-bar, .progress-bar:before {\n  height: 2px;\n  width: 100%;\n  margin: 0; }\n\n.progress-bar {\n  background-color: #2196F3;\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  position: absolute;\n  bottom: 0; }\n\n.progress-bar:before {\n  background-color: #82c4f8;\n  content: '';\n  -webkit-animation: running-progress 2s cubic-bezier(0.4, 0, 0.2, 1) infinite;\n  animation: running-progress 2s cubic-bezier(0.4, 0, 0.2, 1) infinite; }\n\n@-webkit-keyframes running-progress {\n  0% {\n    margin-left: 0;\n    margin-right: 100%; }\n  50% {\n    margin-left: 25%;\n    margin-right: 0; }\n  100% {\n    margin-left: 100%;\n    margin-right: 0; } }\n\n@keyframes running-progress {\n  0% {\n    margin-left: 0;\n    margin-right: 100%; }\n  50% {\n    margin-left: 25%;\n    margin-right: 0; }\n  100% {\n    margin-left: 100%;\n    margin-right: 0; } }\n\ntag {\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-orient: horizontal;\n  -webkit-box-direction: normal;\n      -ms-flex-direction: row;\n          flex-direction: row;\n  -ms-flex-wrap: wrap;\n      flex-wrap: wrap;\n  font-family: \"Roboto\", \"Helvetica Neue\", sans-serif;\n  font-weight: 400;\n  font-size: 1em;\n  letter-spacing: 0.05rem;\n  color: #444;\n  border-radius: 16px;\n  -webkit-transition: all 0.3s;\n  transition: all 0.3s;\n  margin: 0.1rem 0.3rem 0.1rem 0;\n  padding: 0.08rem 0.45rem;\n  height: 32px;\n  line-height: 34px;\n  background: #efefef;\n  -webkit-user-select: none;\n     -moz-user-select: none;\n      -ms-user-select: none;\n          user-select: none;\n  overflow: hidden;\n  outline: 0;\n  cursor: pointer;\n  position: relative; }\n  tag:not(.readonly):not(.tag--editing):focus {\n    background: #2196F3;\n    color: #fff;\n    -webkit-box-shadow: 0 2px 3px 1px #d4d1d1;\n            box-shadow: 0 2px 3px 1px #d4d1d1; }\n  tag:not(.readonly):not(.tag--editing):active {\n    background: #0d8aee;\n    color: #fff;\n    -webkit-box-shadow: 0 2px 3px 1px #d4d1d1;\n            box-shadow: 0 2px 3px 1px #d4d1d1; }\n  tag:not(:focus):not(.tag--editing):not(:active):not(.readonly):hover {\n    background: #e2e2e2;\n    color: initial;\n    -webkit-box-shadow: 0 2px 3px 1px #d4d1d1;\n            box-shadow: 0 2px 3px 1px #d4d1d1; }\n  tag.readonly {\n    cursor: default; }\n  tag.readonly:focus, tag:focus {\n    outline: 0; }\n  tag.tag--editing {\n    background-color: #fff;\n    border: 1px solid #ccc;\n    cursor: text; }\n\n.minimal tag {\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-orient: horizontal;\n  -webkit-box-direction: normal;\n      -ms-flex-direction: row;\n          flex-direction: row;\n  -ms-flex-wrap: wrap;\n      flex-wrap: wrap;\n  border-radius: 0;\n  background: #f9f9f9;\n  -webkit-user-select: none;\n     -moz-user-select: none;\n      -ms-user-select: none;\n          user-select: none;\n  overflow: hidden;\n  outline: 0;\n  cursor: pointer;\n  position: relative; }\n  .minimal tag:not(.readonly):not(.tag--editing):focus {\n    background: #d0d0d0;\n    color: initial; }\n  .minimal tag:not(.readonly):not(.tag--editing):active {\n    background: #d0d0d0;\n    color: initial; }\n  .minimal tag:not(:focus):not(.tag--editing):not(:active):not(.readonly):hover {\n    background: #ececec; }\n  .minimal tag.readonly {\n    cursor: default; }\n  .minimal tag.readonly:focus, .minimal tag:focus {\n    outline: 0; }\n  .minimal tag.tag--editing {\n    cursor: text; }\n\n.dark tag {\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-orient: horizontal;\n  -webkit-box-direction: normal;\n      -ms-flex-direction: row;\n          flex-direction: row;\n  -ms-flex-wrap: wrap;\n      flex-wrap: wrap;\n  color: #f9f9f9;\n  border-radius: 3px;\n  background: #444;\n  -webkit-user-select: none;\n     -moz-user-select: none;\n      -ms-user-select: none;\n          user-select: none;\n  overflow: hidden;\n  outline: 0;\n  cursor: pointer;\n  position: relative; }\n  .dark tag:not(.readonly):not(.tag--editing):focus {\n    background: #efefef;\n    color: #444; }\n  .dark tag:not(:focus):not(.tag--editing):not(:active):not(.readonly):hover {\n    background: #2b2b2b;\n    color: #f9f9f9; }\n  .dark tag.readonly {\n    cursor: default; }\n  .dark tag.readonly:focus, .dark tag:focus {\n    outline: 0; }\n  .dark tag.tag--editing {\n    cursor: text; }\n\n.bootstrap tag {\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-orient: horizontal;\n  -webkit-box-direction: normal;\n      -ms-flex-direction: row;\n          flex-direction: row;\n  -ms-flex-wrap: wrap;\n      flex-wrap: wrap;\n  color: #f9f9f9;\n  border-radius: 0.25rem;\n  background: #0275d8;\n  -webkit-user-select: none;\n     -moz-user-select: none;\n      -ms-user-select: none;\n          user-select: none;\n  overflow: hidden;\n  outline: 0;\n  cursor: pointer;\n  position: relative; }\n  .bootstrap tag:not(.readonly):not(.tag--editing):focus {\n    background: #025aa5; }\n  .bootstrap tag:not(.readonly):not(.tag--editing):active {\n    background: #025aa5; }\n  .bootstrap tag:not(:focus):not(.tag--editing):not(:active):not(.readonly):hover {\n    background: #0267bf;\n    color: #f9f9f9; }\n  .bootstrap tag.readonly {\n    cursor: default; }\n  .bootstrap tag.readonly:focus, .bootstrap tag:focus {\n    outline: 0; }\n  .bootstrap tag.tag--editing {\n    cursor: text; }\n\n.bootstrap3-info tag {\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-orient: horizontal;\n  -webkit-box-direction: normal;\n      -ms-flex-direction: row;\n          flex-direction: row;\n  -ms-flex-wrap: wrap;\n      flex-wrap: wrap;\n  font-family: inherit;\n  font-weight: 400;\n  font-size: 95%;\n  color: #fff;\n  border-radius: 0.25em;\n  background: #5bc0de;\n  -webkit-user-select: none;\n     -moz-user-select: none;\n      -ms-user-select: none;\n          user-select: none;\n  overflow: hidden;\n  outline: 0;\n  cursor: pointer;\n  position: relative;\n  padding: .25em .6em;\n  text-align: center;\n  white-space: nowrap; }\n  .bootstrap3-info tag:not(.readonly):not(.tag--editing):focus {\n    background: #28a1c5; }\n  .bootstrap3-info tag:not(.readonly):not(.tag--editing):active {\n    background: #28a1c5; }\n  .bootstrap3-info tag:not(:focus):not(.tag--editing):not(:active):not(.readonly):hover {\n    background: #46b8da;\n    color: #fff; }\n  .bootstrap3-info tag.readonly {\n    cursor: default; }\n  .bootstrap3-info tag.readonly:focus, .bootstrap3-info tag:focus {\n    outline: 0; }\n  .bootstrap3-info tag.tag--editing {\n    cursor: text; }\n\n:host {\n  display: block; }\n`],\n    template: `<!-- CONTAINER -->\n\n<div ngClass=\"ng2-tag-input {{ theme || '' }}\"\n     (click)=\"focus(true, false)\"\n     [attr.tabindex]=\"-1\"\n\n     (drop)=\"dragZone ? onTagDropped($event, undefined) : undefined\"\n     (dragenter)=\"dragZone ? onDragOver($event) : undefined\"\n     (dragover)=\"dragZone ? onDragOver($event) : undefined\"\n     (dragend)=\"dragZone ? dragProvider.onDragEnd() : undefined\"\n\n     [class.ng2-tag-input--dropping]=\"isDropping()\"\n     [class.ng2-tag-input--disabled]=\"disable\"\n     [class.ng2-tag-input--loading]=\"isLoading\"\n     [class.ng2-tag-input--invalid]=\"hasErrors()\"\n     [class.ng2-tag-input--focused]=\"isInputFocused()\">\n\n    <!-- TAGS -->\n    <div class=\"ng2-tags-container\">\n        <tag *ngFor=\"let item of items; let i = index; trackBy: trackBy\"\n\n             (onSelect)=\"selectItem(item)\"\n             (onRemove)=\"onRemoveRequested(item, i)\"\n             (onKeyDown)=\"handleKeydown($event)\"\n             (onTagEdited)=\"updateEditedTag($event)\"\n             (onBlur)=\"onTagBlurred($event, i)\"\n             draggable=\"{{ editable }}\"\n\n             (dragstart)=\"dragZone ? onDragStarted($event, item, i) : undefined\"\n             (drop)=\"dragZone ? onTagDropped($event, i) : undefined\"\n             (dragenter)=\"dragZone ? onDragOver($event) : undefined\"\n             (dragover)=\"dragZone ? onDragOver($event, i) : undefined\"\n             (dragleave)=\"dragZone ? dragProvider.onDragEnd() : undefined\"\n\n             [canAddTag]=\"isTagValid\"\n             [attr.tabindex]=\"0\"\n             [disabled]=\"disable\"\n             [@animation]=\"animationMetadata\"\n             [hasRipple]=\"ripple\"\n             [index]=\"i\"\n             [removable]=\"removable\"\n             [editable]=\"editable\"\n             [displayBy]=\"displayBy\"\n             [identifyBy]=\"identifyBy\"\n             [template]=\"!!hasCustomTemplate() ? templates.first : undefined\"\n             [draggable]=\"dragZone\"\n             [model]=\"item\">\n        </tag>\n\n        <tag-input-form\n            (onSubmit)=\"onFormSubmit()\"\n            (onBlur)=\"blur()\"\n            (click)=\"dropdown ? dropdown.show() : undefined\"\n            (onKeydown)=\"fireEvents('keydown', $event)\"\n            (onKeyup)=\"fireEvents('keyup', $event)\"\n\n            [(inputText)]=\"inputText\"\n            [disabled]=\"disable\"\n            [validators]=\"validators\"\n            [asyncValidators]=\"asyncValidators\"\n            [hidden]=\"maxItemsReached\"\n            [placeholder]=\"items.length ? placeholder : secondaryPlaceholder\"\n            [inputClass]=\"inputClass\"\n            [inputId]=\"inputId\"\n            [tabindex]=\"tabindex\">\n        </tag-input-form>\n    </div>\n\n    <div class=\"progress-bar\" *ngIf=\"isProgressBarVisible$ | async\"></div>\n</div>\n\n<!-- ERRORS -->\n<div *ngIf=\"hasErrors()\" class=\"error-messages {{ theme || '' }}\">\n    <p *ngFor=\"let error of errors\" class=\"error-message\">\n        <span>{{ error }}</span>\n    </p>\n</div>\n\n<ng-content></ng-content>\n`,\n    animations\n})\nexport class TagInputComponent extends TagInputAccessor implements OnInit, AfterViewInit {\n    /**\n     * @name separatorKeys\n     * @desc keyboard keys with which a user can separate items\n     */\n    @Input() public separatorKeys: string[] = new defaults().separatorKeys;\n\n    /**\n     * @name separatorKeyCodes\n     * @desc keyboard key codes with which a user can separate items\n     */\n    @Input() public separatorKeyCodes: number[] = new defaults().separatorKeyCodes;\n\n    /**\n     * @name placeholder\n     * @desc the placeholder of the input text\n     */\n    @Input() public placeholder: string = new defaults().placeholder;\n\n    /**\n     * @name secondaryPlaceholder\n     * @desc placeholder to appear when the input is empty\n     */\n    @Input() public secondaryPlaceholder: string = new defaults().secondaryPlaceholder;\n\n    /**\n     * @name maxItems\n     * @desc maximum number of items that can be added\n     */\n    @Input() public maxItems: number = new defaults().maxItems;\n\n    /**\n     * @name validators\n     * @desc array of Validators that are used to validate the tag before it gets appended to the list\n     */\n    @Input() public validators: ValidatorFn[] = new defaults().validators;\n\n    /**\n     * @name asyncValidators\n     * @desc array of AsyncValidator that are used to validate the tag before it gets appended to the list\n     */\n    @Input() public asyncValidators: AsyncValidatorFn[] = new defaults().asyncValidators;\n\n    /**\n    * - if set to true, it will only possible to add items from the autocomplete\n    * @name onlyFromAutocomplete\n    */\n    @Input() public onlyFromAutocomplete = new defaults().onlyFromAutocomplete;\n\n    /**\n     * @name errorMessages\n     */\n    @Input() public errorMessages: { [key: string]: string } = new defaults().errorMessages;\n\n    /**\n     * @name theme\n     */\n    @Input() public theme: string = new defaults().theme;\n\n    /**\n     * @name onTextChangeDebounce\n     */\n    @Input() public onTextChangeDebounce = new defaults().onTextChangeDebounce;\n\n    /**\n     * - custom id assigned to the input\n     * @name id\n     */\n    @Input() public inputId = new defaults().inputId;\n\n    /**\n     * - custom class assigned to the input\n     */\n    @Input() public inputClass: string = new defaults().inputClass;\n\n    /**\n     * - option to clear text input when the form is blurred\n     * @name clearOnBlur\n     */\n    @Input() public clearOnBlur: boolean = new defaults().clearOnBlur;\n\n    /**\n     * - hideForm\n     * @name clearOnBlur\n     */\n    @Input() public hideForm: boolean = new defaults().hideForm;\n\n    /**\n     * @name addOnBlur\n     */\n    @Input() public addOnBlur: boolean = new defaults().addOnBlur;\n\n    /**\n     * @name addOnPaste\n     */\n    @Input() public addOnPaste: boolean = new defaults().addOnPaste;\n\n    /**\n     * - pattern used with the native method split() to separate patterns in the string pasted\n     * @name pasteSplitPattern\n     */\n    @Input() public pasteSplitPattern = new defaults().pasteSplitPattern;\n\n    /**\n     * @name blinkIfDupe\n     */\n    @Input() public blinkIfDupe = new defaults().blinkIfDupe;\n\n    /**\n     * @name removable\n     */\n    @Input() public removable = new defaults().removable;\n\n    /**\n     * @name editable\n     */\n    @Input() public editable: boolean = new defaults().editable;\n\n    /**\n     * @name allowDupes\n     */\n    @Input() public allowDupes = new defaults().allowDupes;\n\n    /**\n     * @description if set to true, the newly added tags will be added as strings, and not objects\n     * @name modelAsStrings\n     */\n    @Input() public modelAsStrings = new defaults().modelAsStrings;\n\n    /**\n     * @name trimTags\n     */\n    @Input() public trimTags = new defaults().trimTags;\n\n    /**\n     * @name inputText\n     */\n    @Input() public get inputText(): string {\n        return this.inputTextValue;\n    }\n\n    /**\n     * @name ripple\n     */\n    @Input() public ripple: boolean = new defaults().ripple;\n\n    /**\n     * @name tabindex\n     * @desc pass through the specified tabindex to the input\n     */\n    @Input() public tabindex: string = new defaults().tabIndex;\n\n    /**\n     * @name disable\n     */\n    @Input() public disable: boolean = new defaults().disable;\n\n    /**\n     * @name dragZone\n     */\n    @Input() public dragZone: string = new defaults().dragZone;\n\n    /**\n     * @name onRemoving\n     */\n    @Input() public onRemoving = new defaults().onRemoving;\n\n    /**\n     * @name onAdding\n     */\n    @Input() public onAdding = new defaults().onAdding;\n\n    /**\n     * @name animationDuration\n     */\n    @Input() public animationDuration = new defaults().animationDuration;\n\n    /**\n     * @name onAdd\n     * @desc event emitted when adding a new item\n     */\n    @Output() public onAdd = new EventEmitter<TagModel>();\n\n    /**\n     * @name onRemove\n     * @desc event emitted when removing an existing item\n     */\n    @Output() public onRemove = new EventEmitter<TagModel>();\n\n    /**\n     * @name onSelect\n     * @desc event emitted when selecting an item\n     */\n    @Output() public onSelect = new EventEmitter<TagModel>();\n\n    /**\n     * @name onFocus\n     * @desc event emitted when the input is focused\n     */\n    @Output() public onFocus = new EventEmitter<string>();\n\n    /**\n     * @name onFocus\n     * @desc event emitted when the input is blurred\n     */\n    @Output() public onBlur = new EventEmitter<string>();\n\n    /**\n     * @name onTextChange\n     * @desc event emitted when the input value changes\n     */\n    @Output() public onTextChange = new EventEmitter<TagModel>();\n\n    /**\n     * - output triggered when text is pasted in the form\n     * @name onPaste\n     */\n    @Output() public onPaste = new EventEmitter<string>();\n\n    /**\n     * - output triggered when tag entered is not valid\n     * @name onValidationError\n     */\n    @Output() public onValidationError = new EventEmitter<TagModel>();\n\n    /**\n     * - output triggered when tag is edited\n     * @name onTagEdited\n     */\n    @Output() public onTagEdited = new EventEmitter<TagModel>();\n\n    /**\n     * @name dropdown\n     */\n    @ContentChild(TagInputDropdown) public dropdown: TagInputDropdown;\n\n    /**\n     * @name template\n     * @desc reference to the template if provided by the user\n     */\n    @ContentChildren(TemplateRef, { descendants: false }) public templates: QueryList<TemplateRef<any>>;\n\n    /**\n     * @name inputForm\n     */\n    @ViewChild(TagInputForm) public inputForm: TagInputForm;\n\n    /**\n     * @name selectedTag\n     * @desc reference to the current selected tag\n     */\n    public selectedTag: TagModel | undefined;\n\n    /**\n     * @name isLoading\n     */\n    public isLoading = false;\n\n    /**\n     * @name inputText\n     * @param text\n     */\n    public set inputText(text: string) {\n        this.inputTextValue = text;\n        this.inputTextChange.emit(text);\n    }\n\n    /**\n     * @name tags\n     * @desc list of Element items\n     */\n    @ViewChildren(TagComponent) public tags: QueryList<TagComponent>;\n\n    /**\n     * @name listeners\n     * @desc array of events that get fired using @fireEvents\n     */\n    private listeners = {\n        [constants.KEYDOWN]: <{ (fun): any }[]>[],\n        [constants.KEYUP]: <{ (fun): any }[]>[]\n    };\n\n    /**\n     * @description emitter for the 2-way data binding inputText value\n     * @name inputTextChange\n     */\n    @Output() public inputTextChange: EventEmitter<string> = new EventEmitter();\n\n    /**\n     * @description private variable to bind get/set\n     * @name inputTextValue\n     */\n    public inputTextValue = '';\n\n    /**\n     * @desc removes the tab index if it is set - it will be passed through to the input\n     * @name tabindexAttr\n     */\n    @HostBinding('attr.tabindex')\n    public get tabindexAttr(): string {\n        return this.tabindex !== '' ? '-1' : '';\n    }\n\n    /**\n     * @name animationMetadata\n     */\n    public animationMetadata: { value: string, params: object };\n\n    public errors: string[] = [];\n\n    public isProgressBarVisible$: Observable<boolean>;\n\n    constructor(private readonly renderer: Renderer2,\n                public readonly dragProvider: DragProvider) {\n        super();\n    }\n\n    /**\n     * @name ngAfterViewInit\n     */\n    public ngAfterViewInit(): void {\n        // set up listeners\n\n        this.setUpKeypressListeners();\n        this.setupSeparatorKeysListener();\n        this.setUpInputKeydownListeners();\n\n        if (this.onTextChange.observers.length) {\n            this.setUpTextChangeSubscriber();\n        }\n\n        // if clear on blur is set to true, subscribe to the event and clear the text's form\n        if (this.clearOnBlur || this.addOnBlur) {\n            this.setUpOnBlurSubscriber();\n        }\n\n        // if addOnPaste is set to true, register the handler and add items\n        if (this.addOnPaste) {\n            this.setUpOnPasteListener();\n        }\n\n        const statusChanges$ = this.inputForm.form.statusChanges;\n\n        statusChanges$.pipe(\n            filter((status: string) => status !== 'PENDING')\n        ).subscribe(() => {\n            this.errors = this.inputForm.getErrorMessages(this.errorMessages);\n        });\n\n        this.isProgressBarVisible$ = statusChanges$.pipe(\n            map((status: string) => {\n                return status === 'PENDING' || this.isLoading;\n            })\n        );\n\n        // if hideForm is set to true, remove the input\n        if (this.hideForm) {\n            this.inputForm.destroy();\n        }\n    }\n\n    /**\n     * @name ngOnInit\n     */\n    public ngOnInit(): void {\n        // if the number of items specified in the model is > of the value of maxItems\n        // degrade gracefully and let the max number of items to be the number of items in the model\n        // though, warn the user.\n        const hasReachedMaxItems = this.maxItems !== undefined &&\n            this.items &&\n            this.items.length > this.maxItems;\n\n        if (hasReachedMaxItems) {\n            this.maxItems = this.items.length;\n            console.warn(constants.MAX_ITEMS_WARNING);\n        }\n\n        // Setting editable to false to fix problem with tags in IE still being editable when\n        // onlyFromAutocomplete is true\n        this.editable = this.onlyFromAutocomplete ? false : this.editable;\n\n        this.setAnimationMetadata();\n    }\n\n    /**\n     * @name onRemoveRequested\n     * @param tag\n     * @param index\n     */\n    public onRemoveRequested(tag: TagModel, index: number): Promise<TagModel> {\n        return new Promise(resolve => {\n            const subscribeFn = (model: TagModel) => {\n                this.removeItem(model, index);\n                resolve(tag);\n            };\n\n            this.onRemoving ?\n                this.onRemoving(tag)\n                    .pipe(first())\n                    .subscribe(subscribeFn) : subscribeFn(tag);\n        });\n    }\n\n    /**\n     * @name onAddingRequested\n     * @param fromAutocomplete {boolean}\n     * @param tag {TagModel}\n     */\n    public onAddingRequested(fromAutocomplete: boolean, tag: TagModel, index?: number): Promise<TagModel> {\n        return new Promise((resolve, reject) => {\n            const subscribeFn = (model: TagModel) => {\n                return this\n                    .addItem(fromAutocomplete, model, index)\n                    .then(resolve)\n                    .catch(reject);\n            };\n\n            return this.onAdding ?\n                this.onAdding(tag)\n                    .pipe(first())\n                    .subscribe(subscribeFn, reject) : subscribeFn(tag);\n        });\n    }\n\n    /**\n     * @name appendTag\n     * @param tag {TagModel}\n     */\n    public appendTag = (tag: TagModel, index = this.items.length): void => {\n        const items = this.items;\n        const model = this.modelAsStrings ? tag[this.identifyBy] : tag;\n\n        this.items = [\n            ...items.slice(0, index),\n            model,\n            ...items.slice(index, items.length)\n        ];\n    }\n\n    /**\n     * @name createTag\n     * @param model\n     */\n    public createTag = (model: TagModel): TagModel => {\n        const trim = (val: TagModel, key: string): TagModel => {\n            return typeof val === 'string' ? val.trim() : val[key];\n        };\n\n        return {\n            ...typeof model !== 'string' ? model : {},\n            [this.displayBy]: this.trimTags ? trim(model, this.displayBy) : model,\n            [this.identifyBy]: this.trimTags ? trim(model, this.identifyBy) : model\n        };\n    }\n\n    /**\n     * @name selectItem\n     * @desc selects item passed as parameter as the selected tag\n     * @param item\n     * @param emit\n     */\n    public selectItem(item: TagModel | undefined, emit = true): void {\n        const isReadonly = item && typeof item !== 'string' && item.readonly;\n\n        if (isReadonly || this.selectedTag === item) {\n            return;\n        }\n\n        this.selectedTag = item;\n\n        if (emit) {\n            this.onSelect.emit(item);\n        }\n    }\n\n    /**\n     * @name fireEvents\n     * @desc goes through the list of the events for a given eventName, and fires each of them\n     * @param eventName\n     * @param $event\n     */\n    public fireEvents(eventName: string, $event?): void {\n        this.listeners[eventName].forEach(listener => listener.call(this, $event));\n    }\n\n    /**\n     * @name handleKeydown\n     * @desc handles action when the user hits a keyboard key\n     * @param data\n     */\n    public handleKeydown(data: any): void {\n        const event = data.event;\n        const key = event.keyCode || event.which;\n        const shiftKey = event.shiftKey || false;\n\n        switch (constants.KEY_PRESS_ACTIONS[key]) {\n            case constants.ACTIONS_KEYS.DELETE:\n                if (this.selectedTag && this.removable) {\n                    const index = this.items.indexOf(this.selectedTag);\n                    this.onRemoveRequested(this.selectedTag, index);\n                }\n                break;\n            case constants.ACTIONS_KEYS.SWITCH_PREV:\n                this.moveToTag(data.model, constants.PREV);\n                break;\n            case constants.ACTIONS_KEYS.SWITCH_NEXT:\n                this.moveToTag(data.model, constants.NEXT);\n                break;\n            case constants.ACTIONS_KEYS.TAB:\n                if (shiftKey) {\n                    if (this.isFirstTag(data.model)) {\n                        return;\n                    }\n\n                    this.moveToTag(data.model, constants.PREV);\n                } else {\n                    if (this.isLastTag(data.model) && (this.disable || this.maxItemsReached)) {\n                        return;\n                    }\n\n                    this.moveToTag(data.model, constants.NEXT);\n                }\n                break;\n            default:\n                return;\n        }\n\n        // prevent default behaviour\n        event.preventDefault();\n    }\n\n    public async onFormSubmit() {\n        try {\n            await this.onAddingRequested(false, this.formValue);\n        } catch {\n            return;\n        }\n    }\n\n    /**\n     * @name setInputValue\n     * @param value\n     */\n    public setInputValue(value: string, emitEvent = true): void {\n        const control = this.getControl();\n\n        // update form value with the transformed item\n        control.setValue(value, {\n            emitEvent\n        });\n    }\n\n    /**\n     * @name getControl\n     */\n    private getControl(): FormControl {\n        return <FormControl>this.inputForm.value;\n    }\n\n    /**\n     * @name focus\n     * @param applyFocus\n     * @param displayAutocomplete\n     */\n    public focus(applyFocus = false, displayAutocomplete = false): void {\n        if (this.dragProvider.getState('dragging')) {\n            return;\n        }\n\n        this.selectItem(undefined, false);\n\n        if (applyFocus) {\n            this.inputForm.focus();\n            this.onFocus.emit(this.formValue);\n        }\n    }\n\n    /**\n     * @name blur\n     */\n    public blur(): void {\n        this.onTouched();\n\n        this.onBlur.emit(this.formValue);\n    }\n\n    /**\n     * @name hasErrors\n     */\n    public hasErrors(): boolean {\n        return this.inputForm && this.inputForm.hasErrors();\n    }\n\n    /**\n     * @name isInputFocused\n     */\n    public isInputFocused(): boolean {\n        return this.inputForm && this.inputForm.isInputFocused();\n    }\n\n    /**\n     * - this is the one way I found to tell if the template has been passed and it is not\n     * the template for the menu item\n     * @name hasCustomTemplate\n     */\n    public hasCustomTemplate(): boolean {\n        const template = this.templates ? this.templates.first : undefined;\n        const menuTemplate = this.dropdown && this.dropdown.templates ?\n            this.dropdown.templates.first : undefined;\n\n        return Boolean(template && template !== menuTemplate);\n    }\n\n    /**\n     * @name maxItemsReached\n     */\n    public get maxItemsReached(): boolean {\n        return this.maxItems !== undefined &&\n            this.items.length >= this.maxItems;\n    }\n\n    /**\n     * @name formValue\n     */\n    public get formValue(): string {\n        const form = this.inputForm.value;\n\n        return form ? form.value : '';\n    }\n\n    /**3\n     * @name onDragStarted\n     * @param event\n     * @param index\n     */\n    public onDragStarted(event: DragEvent, tag: TagModel, index: number): void {\n        event.stopPropagation();\n\n        const item = { zone: this.dragZone, tag, index } as DraggedTag;\n\n        this.dragProvider.setSender(this);\n        this.dragProvider.setDraggedItem(event, item);\n        this.dragProvider.setState({dragging: true, index});\n    }\n\n    /**\n     * @name onDragOver\n     * @param event\n     */\n    public onDragOver(event: DragEvent, index?: number): void {\n        this.dragProvider.setState({dropping: true});\n        this.dragProvider.setReceiver(this);\n\n        event.preventDefault();\n    }\n\n    /**\n     * @name onTagDropped\n     * @param event\n     * @param index\n     */\n    public onTagDropped(event: DragEvent, index?: number): void {\n        const item = this.dragProvider.getDraggedItem(event);\n\n        if (item.zone !== this.dragZone) {\n            return;\n        }\n\n        this.dragProvider.onTagDropped(item.tag, item.index, index);\n\n        event.preventDefault();\n        event.stopPropagation();\n    }\n\n    /**\n     * @name isDropping\n     */\n    public isDropping(): boolean {\n        const isReceiver = this.dragProvider.receiver === this;\n        const isDropping = this.dragProvider.getState('dropping');\n\n        return Boolean(isReceiver && isDropping);\n    }\n\n    /**\n     * @name onTagBlurred\n     * @param changedElement {TagModel}\n     * @param index {number}\n     */\n    public onTagBlurred(changedElement: TagModel, index: number): void {\n        this.items[index] = changedElement;\n        this.blur();\n    }\n\n    /**\n     * @name trackBy\n     * @param items\n     */\n    public trackBy(index: number, item: TagModel): string {\n        return item[this.identifyBy];\n    }\n\n    /**\n     * @name updateEditedTag\n     * @param tag\n     */\n    public updateEditedTag({tag, index}: {tag: TagModel, index: number}): void {\n        this.onTagEdited.emit(tag);\n    }\n\n    /**\n     *\n     * @param tag\n     * @param isFromAutocomplete\n     */\n    public isTagValid = (tag: TagModel, fromAutocomplete = false): boolean => {\n        const selectedItem = this.dropdown ? this.dropdown.selectedItem : undefined;\n        const value = this.getItemDisplay(tag).trim();\n\n        if (selectedItem && !fromAutocomplete || !value) {\n            return false;\n        }\n\n        const dupe = this.findDupe(tag, fromAutocomplete);\n\n        // if so, give a visual cue and return false\n        if (!this.allowDupes && dupe && this.blinkIfDupe) {\n            const model = this.tags.find(item => {\n                return this.getItemValue(item.model) === this.getItemValue(dupe);\n            });\n\n            if (model) {\n                model.blink();\n            }\n        }\n\n        const isFromAutocomplete = fromAutocomplete && this.onlyFromAutocomplete;\n\n        const assertions = [\n            // 1. there must be no dupe OR dupes are allowed\n            !dupe || this.allowDupes === true,\n\n            // 2. check max items has not been reached\n            this.maxItemsReached === false,\n\n            // 3. check item comes from autocomplete or onlyFromAutocomplete is false\n            ((isFromAutocomplete) || this.onlyFromAutocomplete === false)\n        ];\n\n        return assertions.filter(item => item).length === assertions.length;\n    }\n\n    /**\n     * @name moveToTag\n     * @param item\n     * @param direction\n     */\n    private moveToTag(item: TagModel, direction: string): void {\n        const isLast = this.isLastTag(item);\n        const isFirst = this.isFirstTag(item);\n        const stopSwitch = (direction === constants.NEXT && isLast) ||\n            (direction === constants.PREV && isFirst);\n\n        if (stopSwitch) {\n            this.focus(true);\n            return;\n        }\n\n        const offset = direction === constants.NEXT ? 1 : -1;\n        const index = this.getTagIndex(item) + offset;\n        const tag = this.getTagAtIndex(index);\n\n        return tag.select.call(tag);\n    }\n\n    /**\n     * @name isFirstTag\n     * @param item {TagModel}\n     */\n    private isFirstTag(item: TagModel): boolean {\n        return this.tags.first.model === item;\n    }\n\n    /**\n     * @name isLastTag\n     * @param item {TagModel}\n     */\n    private isLastTag(item: TagModel): boolean {\n        return this.tags.last.model === item;\n    }\n\n    /**\n     * @name getTagIndex\n     * @param item\n     */\n    private getTagIndex(item: TagModel): number {\n        const tags = this.tags.toArray();\n\n        return tags.findIndex(tag => tag.model === item);\n    }\n\n    /**\n     * @name getTagAtIndex\n     * @param index\n     */\n    private getTagAtIndex(index: number) {\n        const tags = this.tags.toArray();\n\n        return tags[index];\n    }\n\n    /**\n     * @name removeItem\n     * @desc removes an item from the array of the model\n     * @param tag {TagModel}\n     * @param index {number}\n     */\n    private removeItem(tag: TagModel, index: number): void {\n        this.items = this.getItemsWithout(index);\n\n        // if the removed tag was selected, set it as undefined\n        if (this.selectedTag === tag) {\n            this.selectItem(undefined, false);\n        }\n\n        // focus input\n        this.focus(true, false);\n\n        // emit remove event\n        this.onRemove.emit(tag);\n    }\n\n    /**\n     * @name addItem\n     * @desc adds the current text model to the items array\n     * @param fromAutocomplete\n     * @param item\n     */\n    private addItem(fromAutocomplete = false, item: TagModel, index?: number): Promise<TagModel> {\n        const display = this.getItemDisplay(item);\n        const tag = this.createTag(item);\n\n        if (fromAutocomplete) {\n            this.setInputValue(display);\n        }\n\n        return new Promise((resolve, reject) => {\n            /**\n             * @name reset\n             */\n            const reset = (): void => {\n                // reset control and focus input\n                this.setInputValue('');\n\n                // focus input\n                this.focus(true, false);\n\n                resolve(display);\n            };\n\n            const appendItem = (): void => {\n                this.appendTag(tag, index);\n\n                // emit event\n                this.onAdd.emit(tag);\n\n                if (!this.dropdown) {\n                    return;\n                }\n\n                this.dropdown.hide();\n\n                if (this.dropdown.showDropdownIfEmpty) {\n                    this.dropdown.show();\n                }\n            };\n\n            const status = this.inputForm.form.status;\n            const isTagValid = this.isTagValid(tag, fromAutocomplete);\n\n            const onValidationError = () => {\n                this.onValidationError.emit(tag);\n                return reject();\n            };\n\n            if (status === 'VALID' && isTagValid) {\n                appendItem();\n                return reset();\n            }\n\n            if (status === 'INVALID' || !isTagValid) {\n                reset();\n                return onValidationError();\n            }\n\n            if (status === 'PENDING') {\n                const statusUpdate$ = this.inputForm.form.statusChanges;\n\n                return statusUpdate$\n                    .pipe(\n                        filter(statusUpdate => statusUpdate !== 'PENDING'),\n                        first()\n                    )\n                    .subscribe((statusUpdate) => {\n                        if (statusUpdate === 'VALID' && isTagValid) {\n                            appendItem();\n                            resolve();\n                        } else {\n                            onValidationError();\n                        }\n                });\n            }\n        });\n    }\n\n    /**\n     * @name setupSeparatorKeysListener\n     */\n    private setupSeparatorKeysListener(): void {\n        const useSeparatorKeys = this.separatorKeyCodes.length > 0 || this.separatorKeys.length > 0;\n        const listener = ($event) => {\n            const hasKeyCode = this.separatorKeyCodes.indexOf($event.keyCode) >= 0;\n            const hasKey = this.separatorKeys.indexOf($event.key) >= 0;\n\n            if (hasKeyCode || hasKey) {\n                $event.preventDefault();\n                this.onAddingRequested(false, this.formValue)\n                    .catch(() => {});\n            }\n        };\n\n        listen.call(this, constants.KEYDOWN, listener, useSeparatorKeys);\n    }\n\n    /**\n     * @name setUpKeypressListeners\n     */\n    private setUpKeypressListeners(): void {\n        const listener = ($event) => {\n            const isCorrectKey = $event.keyCode === 37 || $event.keyCode === 8;\n\n            if (isCorrectKey &&\n                !this.formValue &&\n                this.items.length) {\n                this.tags.last.select.call(this.tags.last);\n            }\n        };\n\n        // setting up the keypress listeners\n        listen.call(this, constants.KEYDOWN, listener);\n    }\n\n    /**\n     * @name setUpKeydownListeners\n     */\n    private setUpInputKeydownListeners(): void {\n        this.inputForm.onKeydown.subscribe(event => {\n            this.fireEvents('keydown', event);\n\n            if (event.key === 'Backspace' && this.formValue.trim() === '') {\n                event.preventDefault();\n            }\n        });\n    }\n\n    /**\n     * @name setUpOnPasteListener\n     */\n    private setUpOnPasteListener() {\n        const input = this.inputForm.input.nativeElement;\n\n        // attach listener to input\n        this.renderer.listen(input, 'paste', (event) => {\n            this.onPasteCallback(event);\n\n            event.preventDefault();\n            return true;\n        });\n    }\n\n    /**\n     * @name setUpTextChangeSubscriber\n     */\n    private setUpTextChangeSubscriber(): void {\n        this.inputForm.form\n            .valueChanges\n            .pipe(\n                debounceTime(this.onTextChangeDebounce)\n            )\n            .subscribe((value: {item: string}) => {\n                this.onTextChange.emit(value.item);\n            });\n    }\n\n    /**\n     * @name setUpOnBlurSubscriber\n     */\n    private setUpOnBlurSubscriber(): void {\n        const filterFn = (): boolean => {\n            const isVisible = this.dropdown && this.dropdown.isVisible;\n            return !isVisible && !!this.formValue;\n        };\n\n        this.inputForm\n            .onBlur\n            .pipe(\n                debounceTime(100),\n                filter(filterFn)\n            )\n            .subscribe(() => {\n                const reset = () => this.setInputValue('');\n\n                if (this.addOnBlur) {\n                    return this\n                        .onAddingRequested(false, this.formValue)\n                        .then(reset)\n                        .catch(reset);\n                }\n\n                reset();\n            });\n    }\n\n    /**\n     * @name findDupe\n     * @param tag\n     * @param isFromAutocomplete\n     */\n    private findDupe(tag: TagModel, isFromAutocomplete: boolean): TagModel | undefined {\n        const identifyBy = isFromAutocomplete ? this.dropdown.identifyBy : this.identifyBy;\n        const id = tag[identifyBy];\n\n        return this.items.find(item => this.getItemValue(item) === id);\n    }\n\n    /**\n     * @name onPasteCallback\n     * @param data\n     */\n    private onPasteCallback = async (data: ClipboardEvent) => {\n        interface IEWindow extends Window {\n            clipboardData: DataTransfer;\n        }\n\n        const getText = (): string => {\n            const isIE = Boolean((window as IEWindow).clipboardData);\n            const clipboardData = isIE ? (\n                (window as IEWindow).clipboardData\n            ) : data.clipboardData;\n            const type = isIE ? 'Text' : 'text/plain';\n\n            return clipboardData.getData(type) || '';\n        };\n\n        const text = getText();\n\n        const requests = text\n            .split(this.pasteSplitPattern)\n            .map(item => {\n                const tag = this.createTag(item);\n                this.setInputValue(tag[this.displayBy]);\n                return this.onAddingRequested(false, tag);\n            });\n\n        const resetInput = () => setTimeout(() => this.setInputValue(''), 50);\n\n        Promise.all(requests).then(() => {\n            this.onPaste.emit(text);\n            resetInput();\n       })\n       .catch(resetInput);\n    }\n\n    /**\n     * @name setAnimationMetadata\n     */\n    private setAnimationMetadata(): void {\n        this.animationMetadata = {\n            value: 'in',\n            params: {...this.animationDuration}\n        };\n    }\n}\n"
  ],
  "names": [
    "_",
    "f",
    "y",
    "t",
    "op",
    "call",
    "done",
    "trys",
    "length",
    "label",
    "ops",
    "push",
    "pop",
    "body",
    "thisArg",
    "e",
    "value",
    "m",
    "Symbol",
    "o",
    "iterator",
    "r",
    "i",
    "ar",
    "__spread",
    "this",
    "arguments",
    "concat",
    "__read",
    "replace",
    "name",
    "KEYDOWN",
    "KEY_PRESS_ACTIONS",
    "9",
    "ACTIONS_KEYS",
    "minimumTextLength",
    "defaults$2",
    "limitItemsTo",
    "displayBy",
    "identifyBy",
    "matchingFn",
    "keepOpen",
    "zIndex",
    "items",
    "tagInput",
    "injector",
    "get",
    "TagInputComponent",
    "_autocompleteItems",
    "show",
    "maxItemsReached",
    "_this",
    "maxItems",
    "getFormValue",
    "hasMinimumText",
    "trim",
    "position",
    "calculatePosition",
    "getMatchingItems",
    "hasItems",
    "isHidden",
    "isVisible",
    "showDropdownIfEmpty",
    "isDisabled",
    "shouldHide",
    "hide",
    "requestAdding",
    "item",
    "__awaiter",
    "tag",
    "__generator",
    "_b",
    "sent",
    "resetItems",
    "getItemsFromObservable",
    "text",
    "setLoadingState",
    "autocompleteObservable",
    "data",
    "dropdown",
    "configurable",
    "onItemClicked",
    "subscribe",
    "onHide",
    "pipe",
    "debounceTime",
    "filter",
    "KEEP_OPEN",
    "menu",
    "updatePosition",
    "dynamicUpdate",
    "state",
    "menuState",
    "enumerable",
    "TagInputDropdown",
    "prototype",
    "Object",
    "defineProperty",
    "scrollListener",
    "assign",
    "display",
    "dupesAllowed",
    "allowDupes",
    "autocompleteItems",
    "hasValue",
    "tags",
    "some",
    "populateItems",
    "map",
    "state$$1",
    "isLoading",
    "decorators",
    "type",
    "Component",
    "args",
    "selector",
    "template",
    "ctorParameters",
    "Injector",
    "propDecorators",
    "ViewChild",
    "Ng2Dropdown",
    "templates",
    "ContentChildren",
    "TemplateRef",
    "offset",
    "Input",
    "focusFirstElement",
    "appendToBody",
    "placeholder",
    "errorMessages",
    "theme",
    "onTextChangeDebounce",
    "clearOnBlur",
    "removable",
    "ripple",
    "tabIndex",
    "disable",
    "dragZone",
    "onAdding",
    "undefined",
    "enter",
    "OptionsProvider",
    "defaults",
    "defaults$1",
    "options",
    "TagInputAccessor",
    "onTouched",
    "_onTouchedCallback",
    "index",
    "listen",
    "listenerType",
    "action",
    "condition",
    "TagInputForm",
    "onBlur",
    "EventEmitter",
    "onFocus",
    "onKeydown",
    "disabled",
    "inputTextValue",
    "FormControl",
    "validators",
    "asyncValidators",
    "changes",
    "currentValue",
    "form",
    "controls",
    "event",
    "keyCode",
    "disableEditMode",
    "TagComponent",
    "blink",
    "classList",
    "element",
    "nativeElement",
    "add",
    "setTimeout",
    "remove",
    "toggleEditMode",
    "editable",
    "editing",
    "activateEditMode",
    "target",
    "innerText",
    "readonly",
    "isChrome",
    "hasRipple",
    "$event",
    "isDeleteIconVisible",
    "getContentEditableText",
    "input",
    "getContentEditable",
    "setContentEditableText",
    "model",
    "ElementRef",
    "canAddTag",
    "onSelect",
    "Output",
    "onRemove",
    "onKeyDown",
    "style",
    "opacity",
    "transform",
    "transition",
    "animate",
    "keyframes",
    "provide",
    "NG_VALUE_ACCESSOR",
    "useExisting",
    "forwardRef",
    "multi",
    "renderer",
    "dragProvider",
    "_super",
    "separatorKeys",
    "separatorKeyCodes",
    "secondaryPlaceholder",
    "inputId",
    "inputClass",
    "hideForm",
    "addOnBlur",
    "pasteSplitPattern",
    "blinkIfDupe",
    "onValidationError",
    "onTagEdited",
    "listeners",
    "KEYUP",
    "inputTextChange",
    "slice",
    "createTag",
    "val",
    "key",
    "trimTags",
    "isTagValid",
    "fromAutocomplete",
    "selectedItem",
    "getItemDisplay",
    "isFromAutocomplete",
    "onlyFromAutocomplete",
    "assertions",
    "dupe",
    "Promise",
    "all",
    "requests",
    "then",
    "set",
    "setupSeparatorKeysListener",
    "statusChanges$",
    "inputForm",
    "statusChanges",
    "isProgressBarVisible$",
    "status",
    "ngOnInit",
    "console",
    "warn",
    "onRemoveRequested",
    "removeItem",
    "onRemoving",
    "resolve",
    "first",
    "handleKeydown",
    "which",
    "shiftKey",
    "selectedTag",
    "isFirstTag",
    "moveToTag",
    "PREV",
    "isLastTag",
    "preventDefault",
    "onAddingRequested",
    "formValue",
    "emitEvent",
    "getControl",
    "setValue",
    "focus",
    "applyFocus",
    "displayAutocomplete",
    "getState",
    "selectItem",
    "emit",
    "menuTemplate",
    "Boolean",
    "onDragStarted",
    "stopPropagation",
    "zone",
    "setSender",
    "setDraggedItem",
    "setState",
    "dragging",
    "onTagDropped",
    "getDraggedItem",
    "isDropping",
    "isReceiver",
    "receiver",
    "onTagBlurred",
    "changedElement",
    "trackBy",
    "updateEditedTag",
    "direction",
    "NEXT",
    "getTagIndex",
    "getTagAtIndex",
    "select",
    "last",
    "toArray",
    "findIndex",
    "reset",
    "setInputValue",
    "statusUpdate",
    "appendItem",
    "useSeparatorKeys",
    "setUpKeypressListeners",
    "fireEvents",
    "onPasteCallback",
    "setUpTextChangeSubscriber",
    "catch",
    "styles",
    "animations",
    "animations$1",
    "addOnPaste",
    "animationDuration",
    "onAdd",
    "onPaste",
    "descendants",
    "ViewChildren",
    "tabindexAttr",
    "HostBinding",
    "DragProvider",
    "dropping",
    "dataTransfer",
    "setData",
    "DRAG_AND_DROP_KEY",
    "JSON",
    "stringify",
    "getData",
    "parse",
    "sender",
    "setReceiver",
    "indexDragged",
    "indexDropped",
    "onDragEnd",
    "Injectable",
    "DeleteIconComponent",
    "optionsProvider",
    "TagInputModule",
    "withDefaults",
    "setOptions",
    "NgModule",
    "imports",
    "HighlightPipe",
    "COMPOSITION_BUFFER_MODE",
    "useValue"
  ],
  "mappings": "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"
}
