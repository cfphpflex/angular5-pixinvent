{"version":3,"file":"ng2-material-dropdown.umd.min.js","sources":["~/ng2-material-dropdown/src/modules/components/button/ng2-dropdown-button.ts","~/ng2-material-dropdown/src/modules/components/menu/actions.ts","~/ng2-material-dropdown/src/modules/services/ng2-dropdown-state.ts","~/ng2-material-dropdown/src/modules/services/dropdown-state.service.ts","~/ng2-material-dropdown/src/modules/components/menu-item/ng2-menu-item.ts","~/ng2-material-dropdown/src/modules/components/menu/ng2-dropdown-menu.ts","~/ng2-material-dropdown/src/modules/components/dropdown/ng2-dropdown.ts","~/ng2-material-dropdown/src/modules/ng2-dropdown.module.ts","~/ng2-material-dropdown/ng2-material-dropdown.ts"],"sourcesContent":["import {\n    Component,\n    Output,\n    Input,\n    EventEmitter,\n    ElementRef\n} from '@angular/core';\nexport class Ng2DropdownButton {\npublic onMenuToggled: EventEmitter<boolean> = new EventEmitter<boolean>();\npublic showCaret: boolean = true;\n/**\n * @param {?} element\n */\nconstructor(private element: ElementRef) {}\n/**\n * \\@name toggleMenu\n * @desc emits event to toggle menu\n * @return {?}\n */\npublic toggleMenu(): void {\n        this.onMenuToggled.emit(true);\n    }\n/**\n * \\@name getPosition\n * @desc returns position of the button\n * @return {?}\n */\npublic getPosition(): ClientRect {\n      return this.element.nativeElement.getBoundingClientRect();\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'ng2-dropdown-button',\n    styles: [`\n      .ng2-dropdown-button {\n        font-family: \"Roboto\", \"Helvetica Neue\", Helvetica, Arial;\n        background: #fff;\n        padding: 0.45rem 0.25rem;\n        font-size: 14px;\n        letter-spacing: 0.08rem;\n        color: #444;\n        outline: 0;\n        cursor: pointer;\n        font-weight: 400;\n        border: none;\n        border-bottom: 1px solid #efefef;\n        text-align: left;\n        min-width: 100px;\n        width: 100%;\n        display: -webkit-box;\n        display: -ms-flexbox;\n        display: flex;\n        -webkit-box-orient: horizontal;\n        -webkit-box-direction: normal;\n            -ms-flex-direction: row;\n                flex-direction: row;\n        max-width: 150px; }\n\n      .ng2-dropdown-button:hover {\n        color: #222; }\n\n      .ng2-dropdown-button:active,\n      .ng2-dropdown-button:focus {\n        color: #222;\n        border-bottom: 2px solid #2196F3; }\n\n      .ng2-dropdown-button__label {\n        -webkit-box-flex: 1;\n            -ms-flex: 1 1 95%;\n                flex: 1 1 95%; }\n\n      .ng2-dropdown-button__caret {\n        width: 12px;\n        height: 12px;\n        display: -webkit-box;\n        display: -ms-flexbox;\n        display: flex;\n        -webkit-box-flex: 1;\n            -ms-flex: 1 1 6%;\n                flex: 1 1 6%; }\n\n      :host-context(.ng2-dropdown-button--icon) .ng2-dropdown-button {\n        border: none;\n        min-width: 40px;\n        width: 40px;\n        border-radius: 100%;\n        -webkit-transition: all 0.2s;\n        transition: all 0.2s;\n        text-align: center;\n        height: 40px;\n        padding: 0.5em; }\n\n      :host-context(.ng2-dropdown-button--icon) .ng2-dropdown-button:active {\n        background: rgba(0, 0, 0, 0.2); }\n    `],\n    template: `\n      <button class='ng2-dropdown-button' type=\"button\" (click)=\"toggleMenu()\" tabindex=\"0s\">\n          <span class=\"ng2-dropdown-button__label\">\n              <ng-content></ng-content>\n          </span>\n\n          <span class=\"ng2-dropdown-button__caret\" *ngIf=\"showCaret\">\n              <svg enable-background=\"new 0 0 32 32\" height=\"16px\" id=\"Слой_1\" version=\"1.1\" viewBox=\"0 0 32 32\" width=\"16px\" xml:space=\"preserve\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"><path d=\"M24.285,11.284L16,19.571l-8.285-8.288c-0.395-0.395-1.034-0.395-1.429,0  c-0.394,0.395-0.394,1.035,0,1.43l8.999,9.002l0,0l0,0c0.394,0.395,1.034,0.395,1.428,0l8.999-9.002  c0.394-0.395,0.394-1.036,0-1.431C25.319,10.889,24.679,10.889,24.285,11.284z\" fill=\"#121313\" id=\"Expand_More\"/><g/><g/><g/><g/><g/><g/></svg>\n          </span>\n      </button>\n    `\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'onMenuToggled': [{ type: Output },],\n'showCaret': [{ type: Input },],\n};\n}\n\nfunction Ng2DropdownButton_tsickle_Closure_declarations() {\n/** @type {?} */\nNg2DropdownButton.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNg2DropdownButton.ctorParameters;\n/** @type {?} */\nNg2DropdownButton.propDecorators;\n/** @type {?} */\nNg2DropdownButton.prototype.onMenuToggled;\n/** @type {?} */\nNg2DropdownButton.prototype.showCaret;\n/** @type {?} */\nNg2DropdownButton.prototype.element;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Ng2MenuItem } from '../menu-item/ng2-menu-item';\nimport { Ng2DropdownMenu } from './ng2-dropdown-menu';\nimport { Ng2DropdownState } from '../../services/ng2-dropdown-state';\n\nconst /** @type {?} */ KEYS = {\n    BACKSPACE: 9,\n    PREV: 38,\n    NEXT: 40,\n    ENTER: 13,\n    ESCAPE: 27\n};\n/**\n * \\@name onSwitchNext\n * @param index\n * @param items\n * @param state\n */\nconst onSwitchNext = (index: number, items: Ng2MenuItem[], state: Ng2DropdownState) => {\n    if (index < items.length - 1) {\n        state.select(items[index + 1], true);\n    }\n};\n/**\n * \\@name onSwitchPrev\n * @param index\n * @param items\n * @param state\n */\nconst onSwitchPrev = (index: number, items: Ng2MenuItem[], state: Ng2DropdownState) => {\n    if (index > 0) {\n        state.select(items[index - 1], true);\n    }\n};\n/**\n * \\@name onBackspace\n * @param index\n * @param items\n * @param state\n */\nconst onBackspace = (index: number, items: Ng2MenuItem[], state: Ng2DropdownState) => {\n    if (index < items.length - 1) {\n        state.select(items[index + 1], true);\n    } else {\n        state.select(items[0], true);\n    }\n};\n/**\n * @this {?}\n * @return {?}\n */\nfunction onEscape(this: Ng2DropdownMenu) {\n    this.hide();\n};\n/**\n * \\@name onItemClicked\n * @param index\n * @param items\n * @param state\n */\nconst onItemClicked = (index: number, items: Ng2MenuItem[], state: Ng2DropdownState) => {\n    return state.selectedItem ? state.selectedItem.click() : undefined;\n};\n\nexport const /** @type {?} */ ACTIONS = {\n    [KEYS.BACKSPACE]: onBackspace,\n    [KEYS.PREV]: onSwitchPrev,\n    [KEYS.NEXT]: onSwitchNext,\n    [KEYS.ENTER]: onItemClicked,\n    [KEYS.ESCAPE]: onEscape\n};\n/**\n * @param {?} event\n * @return {?}\n */\nexport function arrowKeysHandler(event): void {\n    if ([38, 40].indexOf(event.keyCode) > -1) {\n        event.preventDefault();\n    }\n}\n","import { EventEmitter } from '@angular/core';\nimport { Ng2MenuItem } from '../components/menu-item/ng2-menu-item';\nexport class Ng2DropdownState {\npublic onItemSelected: EventEmitter<Ng2MenuItem> = new EventEmitter<Ng2MenuItem>();\npublic onItemClicked: EventEmitter<Ng2MenuItem> = new EventEmitter<Ng2MenuItem>();\npublic onItemDestroyed: EventEmitter<Ng2MenuItem> = new EventEmitter<Ng2MenuItem>();\nprivate _selectedItem: Ng2MenuItem;\n/**\n * \\@name selectedItem\n * @desc getter for _selectedItem\n * @return {?}\n */\npublic get selectedItem(): Ng2MenuItem {\n        return this._selectedItem;\n    }\n/**\n * \\@name selects a menu item and emits event\n * @param {?} item {Ng2MenuItem}\n * @param {?=} dispatchEvent {boolean}\n * @return {?}\n */\npublic select(item: Ng2MenuItem | undefined, dispatchEvent = true): void {\n        this._selectedItem = item;\n\n        if (!dispatchEvent || !item) {\n            return;\n        }\n\n        item.focus();\n\n        this.onItemSelected.emit(item);\n    }\n/**\n * \\@name unselect\n * @desc sets _selectedItem as undefined\n * @return {?}\n */\npublic unselect(): void {\n        this._selectedItem = undefined;\n    }\n}\n\nfunction Ng2DropdownState_tsickle_Closure_declarations() {\n/** @type {?} */\nNg2DropdownState.prototype.onItemSelected;\n/** @type {?} */\nNg2DropdownState.prototype.onItemClicked;\n/** @type {?} */\nNg2DropdownState.prototype.onItemDestroyed;\n/** @type {?} */\nNg2DropdownState.prototype._selectedItem;\n}\n\n","import { Injectable } from '@angular/core';\nimport { Ng2DropdownState } from './ng2-dropdown-state';\nexport class DropdownStateService {\npublic menuState = {\n        isVisible: /** @type {?} */(( <boolean>false)),\n/**\n * @return {?}\n */\ntoString(): string {\n            return this.isVisible === true ? 'visible' : 'hidden';\n        }\n    };\npublic dropdownState: Ng2DropdownState = new Ng2DropdownState();\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction DropdownStateService_tsickle_Closure_declarations() {\n/** @type {?} */\nDropdownStateService.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nDropdownStateService.ctorParameters;\n/** @type {?} */\nDropdownStateService.prototype.menuState;\n/** @type {?} */\nDropdownStateService.prototype.dropdownState;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {\n    Component,\n    Input,\n    Renderer,\n    ElementRef,\n    OnDestroy\n} from '@angular/core';\n\nimport { DropdownStateService } from '../../services/dropdown-state.service';\nexport class Ng2MenuItem implements OnDestroy {\n/**\n * \\@preventClose\n * @desc if true, clicking on the item won't close the dropdown\n */\npublic preventClose: boolean = false;\n/**\n * \\@name value\n * @desc any value associated to the item\n */\npublic value: any;\n/**\n * @param {?} state\n * @param {?} element\n * @param {?} renderer\n */\nconstructor(private state: DropdownStateService,\nprivate element: ElementRef,\nprivate renderer: Renderer) {}\n/**\n * @return {?}\n */\npublic ngOnDestroy(): void {\n        this.state.dropdownState.onItemDestroyed.emit(this);\n    }\n/**\n * \\@name isSelected\n * @desc returns current selected item\n * @return {?}\n */\npublic get isSelected(): boolean {\n        return this === this.state.dropdownState.selectedItem;\n    }\n/**\n * \\@name click\n * @desc emits select event\n * @param {?=} $event\n * @return {?}\n */\npublic select($event?): void {\n        this.state.dropdownState.select(this, true);\n\n        if ($event) {\n            $event.stopPropagation();\n            $event.preventDefault();\n        }\n    }\n/**\n * \\@name click\n * @desc emits click event\n * @return {?}\n */\npublic click(): void {\n        this.state.dropdownState.onItemClicked.emit(this);\n    }\n/**\n * \\@name focus\n * @return {?}\n */\npublic focus() {\n        this.renderer.invokeElementMethod(this.element.nativeElement.children[0], 'focus');\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'ng2-menu-item',\n    styles: [`\n      .ng2-menu-item {\n        font-family: \"Roboto\", \"Helvetica Neue\", Helvetica, Arial;\n        background: #fff;\n        color: rgba(0, 0, 0, 0.87);\n        cursor: pointer;\n        font-size: 0.9em;\n        text-transform: none;\n        font-weight: 400;\n        letter-spacing: 0.03em;\n        height: 48px;\n        line-height: 48px;\n        padding: 0.3em 1.25rem;\n        text-overflow: ellipsis;\n        white-space: nowrap;\n        overflow: hidden;\n        -webkit-transition: background 0.25s;\n        transition: background 0.25s; }\n\n      .ng2-menu-item--selected {\n        background: rgba(158, 158, 158, 0.2);\n        outline: 0; }\n\n      .ng2-menu-item:focus {\n        outline: 0; }\n\n      .ng2-menu-item:active {\n        background: rgba(158, 158, 158, 0.4); }\n\n      :host(ng2-menu-item) /deep/ [ng2-menu-item-icon] {\n        vertical-align: middle;\n        font-size: 28px;\n        width: 1.5em;\n        height: 30px;\n        color: rgba(0, 0, 0, 0.44); }\n    `],\n    template: `\n      <div class='ng2-menu-item'\n           role=\"button\"\n           tabindex=\"0\"\n           [class.ng2-menu-item--selected]=\"isSelected\"\n           (keydown.enter)=\"click()\"\n           (click)=\"click()\"\n           (mouseover)=\"select()\">\n              <ng-content></ng-content>\n      </div>\n    `\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: DropdownStateService, },\n{type: ElementRef, },\n{type: Renderer, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'preventClose': [{ type: Input },],\n'value': [{ type: Input },],\n};\n}\n\nfunction Ng2MenuItem_tsickle_Closure_declarations() {\n/** @type {?} */\nNg2MenuItem.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNg2MenuItem.ctorParameters;\n/** @type {?} */\nNg2MenuItem.propDecorators;\n/**\n * \\@preventClose\n * @desc if true, clicking on the item won't close the dropdown\n * @type {?}\n */\nNg2MenuItem.prototype.preventClose;\n/**\n * \\@name value\n * @desc any value associated to the item\n * @type {?}\n */\nNg2MenuItem.prototype.value;\n/** @type {?} */\nNg2MenuItem.prototype.state;\n/** @type {?} */\nNg2MenuItem.prototype.element;\n/** @type {?} */\nNg2MenuItem.prototype.renderer;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {\n    Component,\n    ElementRef,\n    Renderer,\n    ContentChildren,\n    QueryList,\n    Input\n} from '@angular/core';\n\nimport {\n    trigger,\n    style,\n    transition,\n    animate,\n    keyframes,\n    state\n} from '@angular/animations';\n\nimport { ACTIONS, arrowKeysHandler } from './actions';\n\nimport { Ng2MenuItem } from '../menu-item/ng2-menu-item';\nimport { DropdownStateService } from '../../services/dropdown-state.service';\nexport class Ng2DropdownMenu {\n/**\n * \\@name width\n */\npublic width: number = 4;\n/**\n * \\@description if set to true, the first element of the dropdown will be automatically focused\n * \\@name focusFirstElement\n */\npublic focusFirstElement: boolean = true;\n/**\n * \\@description sets dropdown offset from the button\n * \\@name offset {string} follow format '<number> <number>' ex. '0 20'\n */\npublic offset: string;\n/**\n * \\@name appendToBody\n */\npublic appendToBody: boolean = true;\n/**\n * \\@name zIndex\n */\npublic zIndex = 1000;\n/**\n * \\@name items\n */\npublic items: QueryList<Ng2MenuItem>;\nprivate position: ClientRect;\nprivate listeners = {\n        arrowHandler: undefined,\n        handleKeypress: undefined\n    };\n/**\n * @param {?} state\n * @param {?} element\n * @param {?} renderer\n */\nconstructor(public state: DropdownStateService,\nprivate element: ElementRef,\nprivate renderer: Renderer) {}\n/**\n * \\@name show\n * \\@shows menu and selects first item\n * @param {?=} position\n * @param {?=} dynamic\n * @return {?}\n */\npublic show(position?: ClientRect, dynamic = true): void {\n        const /** @type {?} */ dc = typeof document !== 'undefined' ? document : undefined;\n        const /** @type {?} */ wd = typeof window !== 'undefined' ? window : undefined;\n\n        if (!this.state.menuState.isVisible) {\n            // setting handlers\n            this.listeners.handleKeypress = this.renderer.listen(dc.body, 'keydown', this.handleKeypress.bind(this));\n            this.listeners.arrowHandler = this.renderer.listen(wd, 'keydown', arrowKeysHandler);\n        }\n\n        // update state\n        this.state.menuState.isVisible = true;\n\n        if (position) {\n            this.updatePosition(position, dynamic);\n        }\n    }\n/**\n * \\@name hide\n * @desc hides menu\n * @return {?}\n */\npublic hide(): void {\n        this.state.menuState.isVisible = false;\n\n        // reset selected item state\n        this.state.dropdownState.unselect();\n\n        // call function to unlisten\n        this.listeners.arrowHandler ? this.listeners.arrowHandler() : undefined;\n        this.listeners.handleKeypress ? this.listeners.handleKeypress() : undefined;\n    }\n/**\n * \\@name updatePosition\n * @desc updates the menu position every time it is toggled\n * @param {?} position {ClientRect}\n * @param {?} dynamic {boolean}\n * @return {?}\n */\npublic updatePosition(position: ClientRect, dynamic: boolean): void {\n        this.position = position;\n        this.updateOnChange(dynamic);\n    }\n/**\n * \\@name handleKeypress\n * @desc executes functions on keyPress based on the key pressed\n * @param {?} $event\n * @return {?}\n */\npublic handleKeypress($event): void {\n        const /** @type {?} */ key = $event.keyCode;\n        const /** @type {?} */ items = this.items.toArray();\n        const /** @type {?} */ index = items.indexOf(this.state.dropdownState.selectedItem);\n\n        if (!ACTIONS.hasOwnProperty(key)) {\n            return;\n        }\n\n        ACTIONS[key].call(this, index, items, this.state.dropdownState);\n    }\n/**\n * \\@name getMenuElement\n * @return {?}\n */\nprivate getMenuElement(): Element {\n        return this.element.nativeElement.children[0];\n    }\n/**\n * \\@name calcPositionOffset\n * @param {?} position\n * @return {?}\n */\nprivate calcPositionOffset(position): { top: string, left: string } {\n        const /** @type {?} */ wd = typeof window !== 'undefined' ? window : undefined;\n        const /** @type {?} */ dc = typeof document !== 'undefined' ? document : undefined;\n\n        if (!wd || !dc || !position) {\n            return;\n        }\n\n        const /** @type {?} */ element = this.getMenuElement();\n        const /** @type {?} */ supportPageOffset = wd.pageXOffset !== undefined;\n        const /** @type {?} */ isCSS1Compat = ((dc.compatMode || '') === 'CSS1Compat');\n\n        const /** @type {?} */ x = supportPageOffset ? wd.pageXOffset : isCSS1Compat ?\n            dc.documentElement.scrollLeft : dc.body.scrollLeft;\n\n        const /** @type {?} */ y = supportPageOffset ? wd.pageYOffset : isCSS1Compat ?\n            dc.documentElement.scrollTop : dc.body.scrollTop;\n\n        let { top, left } = this.applyOffset(\n            `${position.top + (this.appendToBody ? y - 15 : 0)}px`,\n            `${position.left + x - 5}px`\n        );\n\n        const /** @type {?} */ clientWidth = element.clientWidth;\n        const /** @type {?} */ clientHeight = element.clientHeight;\n\n        const /** @type {?} */ marginFromBottom = parseInt(top) + clientHeight + (this.appendToBody ? 0 : y - 15);\n        const /** @type {?} */ marginFromRight = parseInt(left) + clientWidth;\n\n        const /** @type {?} */ windowScrollHeight = wd.innerHeight + wd.scrollY;\n        const /** @type {?} */ windowScrollWidth = wd.innerWidth + wd.scrollX;\n\n        if (marginFromBottom >= windowScrollHeight) {\n            top = `${parseInt(top.replace('px', '')) - clientHeight}px`;\n        }\n\n        if (marginFromRight >= windowScrollWidth) {\n            const /** @type {?} */ marginRight = marginFromRight - windowScrollWidth + 30;\n            left = `${parseInt(left.replace('px', '')) - marginRight}px`;\n        }\n\n        return { top, left };\n    }\n/**\n * @param {?} top\n * @param {?} left\n * @return {?}\n */\nprivate applyOffset(top: string, left: string): { top: string, left: string } {\n        if (!this.offset) {\n            return { top, left };\n        }\n\n        const /** @type {?} */ offset = this.offset.split(' ');\n\n        if (!offset[1]) {\n            offset[1] = '0';\n        }\n\n        top = `${parseInt(top.replace('px', '')) + parseInt(offset[0])}px`;\n        left = `${parseInt(left.replace('px', '')) + parseInt(offset[1])}px`;\n\n        return { top, left };\n    }\n/**\n * @return {?}\n */\npublic ngOnInit() {\n        const /** @type {?} */ dc = typeof document !== 'undefined' ? document : undefined;\n        if (this.appendToBody) {\n            // append menu element to the body\n            dc.body.appendChild(this.element.nativeElement);\n        }\n    }\n/**\n * @param {?=} dynamic\n * @return {?}\n */\npublic updateOnChange(dynamic = true) {\n        const /** @type {?} */ element = this.getMenuElement();\n        const /** @type {?} */ position = this.calcPositionOffset(this.position);\n\n        if (position) {\n            this.renderer.setElementStyle(element, 'top', position.top.toString());\n            this.renderer.setElementStyle(element, 'left', position.left.toString());\n        }\n\n        // select first item unless user disabled this option\n        if (this.focusFirstElement &&\n            this.items.first &&\n            !this.state.dropdownState.selectedItem) {\n            this.state.dropdownState.select(this.items.first, false);\n        }\n    }\n/**\n * @return {?}\n */\npublic ngOnDestroy() {\n        const /** @type {?} */ elem = this.element.nativeElement;\n        elem.parentNode.removeChild(elem);\n\n        if (this.listeners.handleKeypress) {\n            this.listeners.handleKeypress();\n        }\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'ng2-dropdown-menu',\n    styles: [`\n      :host {\n        display: block; }\n\n      .ng2-dropdown-menu {\n        overflow-y: auto;\n        -webkit-box-shadow: 0 1px 2px 0 rgba(0, 0, 0, 0.3);\n                box-shadow: 0 1px 2px 0 rgba(0, 0, 0, 0.3);\n        position: absolute;\n        padding: 0.5em 0;\n        background: #fff;\n        border-radius: 1px;\n        max-height: 400px;\n        width: 260px;\n        min-height: 0;\n        display: block; }\n\n      .ng2-dropdown-menu.ng2-dropdown-menu--inside-element {\n        position: fixed; }\n\n      .ng2-dropdown-menu.ng2-dropdown-menu--width--2 {\n        width: 200px; }\n\n      .ng2-dropdown-menu.ng2-dropdown-menu--width--4 {\n        width: 260px; }\n\n      .ng2-dropdown-menu.ng2-dropdown-menu--width--6 {\n        width: 320px; }\n\n      .ng2-dropdown-backdrop {\n        position: fixed;\n        top: 0;\n        left: 0;\n        width: 100%;\n        height: 100%;\n        z-index: 1;\n        overflow: hidden; }\n\n      :host /deep/ .ng2-menu-divider {\n        height: 1px;\n        min-height: 1px;\n        max-height: 1px;\n        width: 100%;\n        display: block;\n        background: #f9f9f9; }\n    `],\n    template: `\n      <!-- MENU -->\n      <div class='ng2-dropdown-menu ng2-dropdown-menu---width--{{ width }}'\n           [class.ng2-dropdown-menu--inside-element]=\"!appendToBody\"\n           [class.ng2-dropdown-menu--open]=\"state.menuState.isVisible\"\n           [style.z-index]=\"zIndex\"\n           [@fade]=\"state.menuState.toString()\">\n              <div class=\"ng2-dropdown-menu__options-container\"\n                   [@opacity]=\"state.menuState.toString()\">\n                  <ng-content></ng-content>\n              </div>\n      </div>\n\n      <!-- BACKDROP -->\n      <div class=\"ng2-dropdown-backdrop\" *ngIf=\"state.menuState.isVisible\" (click)=\"hide()\"></div>\n    `,\n    animations: [\n        trigger('fade', [\n            state('visible', style(\n                {display: 'block', height: '*', width: '*'}\n            )),\n            state('hidden', style(\n                {display: 'none', overflow: 'hidden', height: 0, width: 0}\n            )),\n            transition('hidden => visible', [\n                animate('250ms ease-in', keyframes([\n                    style({opacity: 0, offset: 0}),\n                    style({opacity: 1, offset: 1, height: '*', width: '*'}),\n                ]))\n            ]),\n            transition('visible => hidden', [\n                animate('350ms ease-out', keyframes([\n                    style({opacity: 1, offset: 0}),\n                    style({opacity: 0, offset: 1, width: '0', height: '0'}),\n                ]))\n            ])\n        ]),\n        trigger('opacity', [\n            transition('hidden => visible', [\n                animate('450ms ease-in', keyframes([\n                    style({opacity: 0, offset: 0}),\n                    style({opacity: 1, offset: 1}),\n                ]))\n            ]),\n            transition('visible => hidden', [\n                animate('250ms ease-out', keyframes([\n                    style({opacity: 1, offset: 0}),\n                    style({opacity: 0.5, offset: 0.3}),\n                    style({opacity: 0, offset: 1}),\n                ]))\n            ])\n        ])\n    ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: DropdownStateService, },\n{type: ElementRef, },\n{type: Renderer, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'width': [{ type: Input },],\n'focusFirstElement': [{ type: Input },],\n'offset': [{ type: Input },],\n'appendToBody': [{ type: Input },],\n'zIndex': [{ type: Input },],\n'items': [{ type: ContentChildren, args: [Ng2MenuItem, ] },],\n};\n}\n\nfunction Ng2DropdownMenu_tsickle_Closure_declarations() {\n/** @type {?} */\nNg2DropdownMenu.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNg2DropdownMenu.ctorParameters;\n/** @type {?} */\nNg2DropdownMenu.propDecorators;\n/**\n * \\@name width\n * @type {?}\n */\nNg2DropdownMenu.prototype.width;\n/**\n * \\@description if set to true, the first element of the dropdown will be automatically focused\n * \\@name focusFirstElement\n * @type {?}\n */\nNg2DropdownMenu.prototype.focusFirstElement;\n/**\n * \\@description sets dropdown offset from the button\n * \\@name offset {string} follow format '<number> <number>' ex. '0 20'\n * @type {?}\n */\nNg2DropdownMenu.prototype.offset;\n/**\n * \\@name appendToBody\n * @type {?}\n */\nNg2DropdownMenu.prototype.appendToBody;\n/**\n * \\@name zIndex\n * @type {?}\n */\nNg2DropdownMenu.prototype.zIndex;\n/**\n * \\@name items\n * @type {?}\n */\nNg2DropdownMenu.prototype.items;\n/** @type {?} */\nNg2DropdownMenu.prototype.position;\n/** @type {?} */\nNg2DropdownMenu.prototype.listeners;\n/** @type {?} */\nNg2DropdownMenu.prototype.state;\n/** @type {?} */\nNg2DropdownMenu.prototype.element;\n/** @type {?} */\nNg2DropdownMenu.prototype.renderer;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {\n    HostListener,\n    Component,\n    ContentChild,\n    Output,\n    EventEmitter,\n    Input\n} from '@angular/core';\n\nimport { Ng2DropdownButton } from '../button/ng2-dropdown-button';\nimport { Ng2DropdownMenu } from '../menu/ng2-dropdown-menu';\nimport { DropdownStateService } from '../../services/dropdown-state.service';\nimport { Ng2MenuItem } from '../menu-item/ng2-menu-item';\nexport class Ng2Dropdown {\npublic button: Ng2DropdownButton;\npublic menu: Ng2DropdownMenu;\npublic dynamicUpdate = true;\npublic onItemClicked: EventEmitter<string> = new EventEmitter<string>();\npublic onItemSelected: EventEmitter<string> = new EventEmitter<string>();\npublic onShow: EventEmitter<Ng2Dropdown> = new EventEmitter<Ng2Dropdown>();\npublic onHide: EventEmitter<Ng2Dropdown> = new EventEmitter<Ng2Dropdown>();\n/**\n * @param {?} state\n */\nconstructor(private state: DropdownStateService) {}\n/**\n * @return {?}\n */\npublic ngOnInit() {\n        this.state.dropdownState.onItemClicked.subscribe(item => {\n            this.onItemClicked.emit(item);\n\n            if (item.preventClose) {\n                return;\n            }\n\n            this.hide.call(this);\n        });\n\n        if (this.button) {\n            this.button.onMenuToggled.subscribe(() => {\n                this.toggleMenu();\n            });\n        }\n\n        this.state.dropdownState.onItemSelected.subscribe(item => {\n            this.onItemSelected.emit(item);\n        });\n\n        this.state.dropdownState.onItemDestroyed.subscribe((item: Ng2MenuItem) => {\n            let /** @type {?} */ newSelectedItem: Ng2MenuItem | undefined;\n            const /** @type {?} */ items = this.menu.items.toArray();\n\n            if (item !== this.state.dropdownState.selectedItem) {\n                return;\n            }\n\n            if (this.menu.focusFirstElement) {\n                newSelectedItem = item === items[0] && items.length > 1 ? items[1] : items[0];\n            }\n\n            this.state.dropdownState.select(newSelectedItem);\n        });\n    }\n/**\n * \\@name toggleMenu\n * @desc toggles menu visibility\n * @param {?=} position\n * @return {?}\n */\npublic toggleMenu(position = this.button.getPosition()): void {\n        this.state.menuState.isVisible ? this.hide() : this.show(position);\n    }\n/**\n * - hides dropdown\n * \\@name hide\n * @return {?}\n */\npublic hide(): void {\n        this.menu.hide();\n        this.onHide.emit(this);\n    }\n/**\n * - shows dropdown\n * \\@name show\n * @param {?=} position\n * @return {?}\n */\npublic show(position = this.button.getPosition()): void {\n        this.menu.show(position, this.dynamicUpdate);\n        this.onShow.emit(this);\n    }\n/**\n * \\@name scrollListener\n * @return {?}\n */\npublic scrollListener() {\n        if (this.button && this.dynamicUpdate) {\n            this.menu.updatePosition(this.button.getPosition(), true);\n        }\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'ng2-dropdown',\n    template: `\n      <div class=\"ng2-dropdown-container\">\n          <ng-content select=\"ng2-dropdown-button\"></ng-content>\n          <ng-content select=\"ng2-dropdown-menu\"></ng-content>\n      </div>\n    `,\n    providers: [ DropdownStateService ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: DropdownStateService, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'button': [{ type: ContentChild, args: [Ng2DropdownButton, ] },],\n'menu': [{ type: ContentChild, args: [Ng2DropdownMenu, ] },],\n'dynamicUpdate': [{ type: Input },],\n'onItemClicked': [{ type: Output },],\n'onItemSelected': [{ type: Output },],\n'onShow': [{ type: Output },],\n'onHide': [{ type: Output },],\n'scrollListener': [{ type: HostListener, args: ['window:scroll', ] },],\n};\n}\n\nfunction Ng2Dropdown_tsickle_Closure_declarations() {\n/** @type {?} */\nNg2Dropdown.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNg2Dropdown.ctorParameters;\n/** @type {?} */\nNg2Dropdown.propDecorators;\n/** @type {?} */\nNg2Dropdown.prototype.button;\n/** @type {?} */\nNg2Dropdown.prototype.menu;\n/** @type {?} */\nNg2Dropdown.prototype.dynamicUpdate;\n/** @type {?} */\nNg2Dropdown.prototype.onItemClicked;\n/** @type {?} */\nNg2Dropdown.prototype.onItemSelected;\n/** @type {?} */\nNg2Dropdown.prototype.onShow;\n/** @type {?} */\nNg2Dropdown.prototype.onHide;\n/** @type {?} */\nNg2Dropdown.prototype.state;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Ng2Dropdown } from './components/dropdown/ng2-dropdown';\nimport { Ng2DropdownMenu } from './components/menu/ng2-dropdown-menu';\nimport { Ng2DropdownButton } from './components/button/ng2-dropdown-button';\nimport { Ng2MenuItem } from './components/menu-item/ng2-menu-item';\n\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { DropdownStateService } from './services/dropdown-state.service';\nexport class Ng2DropdownModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n    exports: [\n        Ng2MenuItem,\n        Ng2DropdownButton,\n        Ng2DropdownMenu,\n        Ng2Dropdown\n    ],\n    declarations: [\n        Ng2Dropdown,\n        Ng2MenuItem,\n        Ng2DropdownButton,\n        Ng2DropdownMenu,\n    ],\n    imports: [\n        CommonModule\n    ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction Ng2DropdownModule_tsickle_Closure_declarations() {\n/** @type {?} */\nNg2DropdownModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNg2DropdownModule.ctorParameters;\n}\n\n\nexport {\n    Ng2Dropdown,\n    Ng2DropdownMenu,\n    Ng2MenuItem,\n    Ng2DropdownButton,\n    DropdownStateService\n};\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport {Ng2Dropdown,Ng2DropdownMenu,Ng2MenuItem,Ng2DropdownButton,Ng2DropdownModule,DropdownStateService} from './index';\n"],"names":["Ng2DropdownButton","element","this","onMenuToggled","EventEmitter","showCaret","prototype","toggleMenu","emit","getPosition","nativeElement","getBoundingClientRect","decorators","type","Component","args","selector","styles","template","ctorParameters","ElementRef","propDecorators","Output","Input","KEYS","BACKSPACE","PREV","NEXT","ENTER","ESCAPE","ACTIONS","_a","index","items","state","length","select","selectedItem","click","undefined","hide","Ng2DropdownState","onItemSelected","onItemClicked","onItemDestroyed","Object","defineProperty","get","_selectedItem","item","dispatchEvent","focus","unselect","DropdownStateService","menuState","isVisible","toString","dropdownState","Injectable","Ng2MenuItem","renderer","preventClose","ngOnDestroy","$event","stopPropagation","preventDefault","invokeElementMethod","children","Renderer","value","Ng2DropdownMenu","width","focusFirstElement","appendToBody","zIndex","listeners","arrowHandler","handleKeypress","show","position","dynamic","dc","document","wd","window","listen","body","bind","event","indexOf","keyCode","updatePosition","updateOnChange","key","toArray","hasOwnProperty","call","getMenuElement","calcPositionOffset","supportPageOffset","pageXOffset","isCSS1Compat","compatMode","x","documentElement","scrollLeft","y","pageYOffset","scrollTop","applyOffset","top","left","clientWidth","clientHeight","marginFromBottom","parseInt","marginFromRight","windowScrollHeight","innerHeight","scrollY","windowScrollWidth","innerWidth","scrollX","replace","marginRight","offset","split","ngOnInit","appendChild","setElementStyle","first","elem","parentNode","removeChild","animations","trigger","style","display","height","overflow","transition","animate","keyframes","opacity","ContentChildren","Ng2Dropdown","dynamicUpdate","onShow","onHide","_this","subscribe","button","newSelectedItem","menu","scrollListener","providers","ContentChild","HostListener","Ng2DropdownModule","NgModule","exports","declarations","imports","CommonModule"],"mappings":"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"}
