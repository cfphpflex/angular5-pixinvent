{
  "version": 3,
  "file": "angular-resizable-element.umd.min.js",
  "sources": [
    "ng://angular-resizable-element/src/resizable.directive.ts",
    "ng://angular-resizable-element/src/resize-handle.directive.ts",
    "ng://angular-resizable-element/src/resizable.module.ts"
  ],
  "sourcesContent": [
    "import {\n  Directive,\n  Renderer2,\n  ElementRef,\n  OnInit,\n  Output,\n  Input,\n  EventEmitter,\n  OnDestroy,\n  NgZone\n} from '@angular/core';\nimport { Subject } from 'rxjs/Subject';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\nimport { merge } from 'rxjs/observable/merge';\nimport { interval } from 'rxjs/observable/interval';\nimport { map } from 'rxjs/operators/map';\nimport { mergeMap } from 'rxjs/operators/mergeMap';\nimport { takeUntil } from 'rxjs/operators/takeUntil';\nimport { filter } from 'rxjs/operators/filter';\nimport { pairwise } from 'rxjs/operators/pairwise';\nimport { take } from 'rxjs/operators/take';\nimport { throttle } from 'rxjs/operators/throttle';\nimport { share } from 'rxjs/operators/share';\nimport { Edges } from './interfaces/edges.interface';\nimport { BoundingRectangle } from './interfaces/bounding-rectangle.interface';\nimport { ResizeEvent } from './interfaces/resize-event.interface';\n\ninterface PointerEventCoordinate {\n  clientX: number;\n  clientY: number;\n  event: MouseEvent | TouchEvent;\n}\n\ninterface Coordinate {\n  x: number;\n  y: number;\n}\n\nfunction isNumberCloseTo(\n  value1: number,\n  value2: number,\n  precision: number = 3\n): boolean {\n  const diff: number = Math.abs(value1 - value2);\n  return diff < precision;\n}\n\nfunction getNewBoundingRectangle(\n  startingRect: BoundingRectangle,\n  edges: Edges,\n  clientX: number,\n  clientY: number\n): BoundingRectangle {\n  const newBoundingRect: BoundingRectangle = {\n    top: startingRect.top,\n    bottom: startingRect.bottom,\n    left: startingRect.left,\n    right: startingRect.right\n  };\n\n  if (edges.top) {\n    newBoundingRect.top += clientY;\n  }\n  if (edges.bottom) {\n    newBoundingRect.bottom += clientY;\n  }\n  if (edges.left) {\n    newBoundingRect.left += clientX;\n  }\n  if (edges.right) {\n    newBoundingRect.right += clientX;\n  }\n  newBoundingRect.height = newBoundingRect.bottom - newBoundingRect.top;\n  newBoundingRect.width = newBoundingRect.right - newBoundingRect.left;\n\n  return newBoundingRect;\n}\n\nfunction getElementRect(\n  element: ElementRef,\n  ghostElementPositioning: string\n): BoundingRectangle {\n  let translateX = 0;\n  let translateY = 0;\n  const style = element.nativeElement.style;\n  const transformProperties = [\n    'transform',\n    '-ms-transform',\n    '-moz-transform',\n    '-o-transform'\n  ];\n  const transform = transformProperties\n    .map(property => style[property])\n    .find(value => !!value);\n  if (transform && transform.includes('translate')) {\n    translateX = transform.replace(/.*translate\\((.*)px, (.*)px\\).*/, '$1');\n    translateY = transform.replace(/.*translate\\((.*)px, (.*)px\\).*/, '$2');\n  }\n\n  if (ghostElementPositioning === 'absolute') {\n    return {\n      height: element.nativeElement.offsetHeight,\n      width: element.nativeElement.offsetWidth,\n      top: element.nativeElement.offsetTop - translateY,\n      bottom:\n        element.nativeElement.offsetHeight +\n        element.nativeElement.offsetTop -\n        translateY,\n      left: element.nativeElement.offsetLeft - translateX,\n      right:\n        element.nativeElement.offsetWidth +\n        element.nativeElement.offsetLeft -\n        translateX\n    };\n  } else {\n    const boundingRect: BoundingRectangle = element.nativeElement.getBoundingClientRect();\n    return {\n      height: boundingRect.height,\n      width: boundingRect.width,\n      top: boundingRect.top - translateY,\n      bottom: boundingRect.bottom - translateY,\n      left: boundingRect.left - translateX,\n      right: boundingRect.right - translateX,\n      scrollTop: element.nativeElement.scrollTop,\n      scrollLeft: element.nativeElement.scrollLeft\n    };\n  }\n}\n\nfunction isWithinBoundingY({\n  clientY,\n  rect\n}: {\n  clientY: number;\n  rect: ClientRect;\n}): boolean {\n  return clientY >= rect.top && clientY <= rect.bottom;\n}\n\nfunction isWithinBoundingX({\n  clientX,\n  rect\n}: {\n  clientX: number;\n  rect: ClientRect;\n}): boolean {\n  return clientX >= rect.left && clientX <= rect.right;\n}\n\nfunction getResizeEdges({\n  clientX,\n  clientY,\n  elm,\n  allowedEdges,\n  cursorPrecision\n}: {\n  clientX: number;\n  clientY: number;\n  elm: ElementRef;\n  allowedEdges: Edges;\n  cursorPrecision: number;\n}): Edges {\n  const elmPosition: ClientRect = elm.nativeElement.getBoundingClientRect();\n  const edges: Edges = {};\n\n  if (\n    allowedEdges.left &&\n    isNumberCloseTo(clientX, elmPosition.left, cursorPrecision) &&\n    isWithinBoundingY({ clientY, rect: elmPosition })\n  ) {\n    edges.left = true;\n  }\n\n  if (\n    allowedEdges.right &&\n    isNumberCloseTo(clientX, elmPosition.right, cursorPrecision) &&\n    isWithinBoundingY({ clientY, rect: elmPosition })\n  ) {\n    edges.right = true;\n  }\n\n  if (\n    allowedEdges.top &&\n    isNumberCloseTo(clientY, elmPosition.top, cursorPrecision) &&\n    isWithinBoundingX({ clientX, rect: elmPosition })\n  ) {\n    edges.top = true;\n  }\n\n  if (\n    allowedEdges.bottom &&\n    isNumberCloseTo(clientY, elmPosition.bottom, cursorPrecision) &&\n    isWithinBoundingX({ clientX, rect: elmPosition })\n  ) {\n    edges.bottom = true;\n  }\n\n  return edges;\n}\n\nexport interface ResizeCursors {\n  topLeft: string;\n  topRight: string;\n  bottomLeft: string;\n  bottomRight: string;\n  leftOrRight: string;\n  topOrBottom: string;\n}\n\nconst DEFAULT_RESIZE_CURSORS: ResizeCursors = Object.freeze({\n  topLeft: 'nw-resize',\n  topRight: 'ne-resize',\n  bottomLeft: 'sw-resize',\n  bottomRight: 'se-resize',\n  leftOrRight: 'ew-resize',\n  topOrBottom: 'ns-resize'\n});\n\nfunction getResizeCursor(edges: Edges, cursors: ResizeCursors): string {\n  if (edges.left && edges.top) {\n    return cursors.topLeft;\n  } else if (edges.right && edges.top) {\n    return cursors.topRight;\n  } else if (edges.left && edges.bottom) {\n    return cursors.bottomLeft;\n  } else if (edges.right && edges.bottom) {\n    return cursors.bottomRight;\n  } else if (edges.left || edges.right) {\n    return cursors.leftOrRight;\n  } else if (edges.top || edges.bottom) {\n    return cursors.topOrBottom;\n  } else {\n    return '';\n  }\n}\n\nfunction getEdgesDiff({\n  edges,\n  initialRectangle,\n  newRectangle\n}: {\n  edges: Edges;\n  initialRectangle: BoundingRectangle;\n  newRectangle: BoundingRectangle;\n}): Edges {\n  const edgesDiff: Edges = {};\n  Object.keys(edges).forEach((edge: keyof Edges) => {\n    edgesDiff[edge] = newRectangle[edge] - initialRectangle[edge];\n  });\n  return edgesDiff;\n}\n\nconst RESIZE_ACTIVE_CLASS: string = 'resize-active';\nconst RESIZE_LEFT_HOVER_CLASS: string = 'resize-left-hover';\nconst RESIZE_RIGHT_HOVER_CLASS: string = 'resize-right-hover';\nconst RESIZE_TOP_HOVER_CLASS: string = 'resize-top-hover';\nconst RESIZE_BOTTOM_HOVER_CLASS: string = 'resize-bottom-hover';\nconst RESIZE_GHOST_ELEMENT_CLASS: string = 'resize-ghost-element';\n\nexport const MOUSE_MOVE_THROTTLE_MS: number = 50;\n\n/**\n * Place this on an element to make it resizable. For example:\n *\n * ```html\n * <div\n *   mwlResizable\n *   [resizeEdges]=\"{bottom: true, right: true, top: true, left: true}\"\n *   [enableGhostResize]=\"true\">\n * </div>\n * ```\n */\n@Directive({\n  selector: '[mwlResizable]'\n})\nexport class ResizableDirective implements OnInit, OnDestroy {\n  /**\n   * A function that will be called before each resize event. Return `true` to allow the resize event to propagate or `false` to cancel it\n   */\n  @Input() validateResize: (resizeEvent: ResizeEvent) => boolean;\n\n  /**\n   * The edges that an element can be resized from. Pass an object like `{top: true, bottom: false}`. By default no edges can be resized.\n   */\n  @Input() resizeEdges: Edges = {};\n\n  /**\n   * Set to `true` to enable a temporary resizing effect of the element in between the `resizeStart` and `resizeEnd` events.\n   */\n  @Input() enableGhostResize: boolean = false;\n\n  /**\n   * A snap grid that resize events will be locked to.\n   *\n   * e.g. to only allow the element to be resized every 10px set it to `{left: 10, right: 10}`\n   */\n  @Input() resizeSnapGrid: Edges = {};\n\n  /**\n   * The mouse cursors that will be set on the resize edges\n   */\n  @Input() resizeCursors: ResizeCursors = DEFAULT_RESIZE_CURSORS;\n\n  /**\n   * Mouse over thickness to active cursor.\n   */\n  @Input() resizeCursorPrecision: number = 3;\n\n  /**\n   * Define the positioning of the ghost element (can be fixed or absolute)\n   */\n  @Input() ghostElementPositioning: 'fixed' | 'absolute' = 'fixed';\n\n  /**\n   * Called when the mouse is pressed and a resize event is about to begin. `$event` is a `ResizeEvent` object.\n   */\n  @Output() resizeStart = new EventEmitter<ResizeEvent>();\n\n  /**\n   * Called as the mouse is dragged after a resize event has begun. `$event` is a `ResizeEvent` object.\n   */\n  @Output() resizing = new EventEmitter<ResizeEvent>();\n\n  /**\n   * Called after the mouse is released after a resize event. `$event` is a `ResizeEvent` object.\n   */\n  @Output() resizeEnd = new EventEmitter<ResizeEvent>();\n\n  /**\n   * @hidden\n   */\n  public mouseup = new Subject<{\n    clientX: number;\n    clientY: number;\n    edges?: Edges;\n  }>();\n\n  /**\n   * @hidden\n   */\n  public mousedown = new Subject<{\n    clientX: number;\n    clientY: number;\n    edges?: Edges;\n  }>();\n\n  /**\n   * @hidden\n   */\n  public mousemove = new Subject<{\n    clientX: number;\n    clientY: number;\n    edges?: Edges;\n    event: MouseEvent | TouchEvent;\n  }>();\n\n  private pointerEventListeners: PointerEventListeners;\n\n  private pointerEventListenerSubscriptions: any = {};\n\n  /**\n   * @hidden\n   */\n  constructor(\n    private renderer: Renderer2,\n    public elm: ElementRef,\n    private zone: NgZone\n  ) {\n    this.pointerEventListeners = PointerEventListeners.getInstance(\n      renderer,\n      zone\n    );\n  }\n\n  /**\n   * @hidden\n   */\n  ngOnInit(): void {\n    // TODO - use some fancy Observable.merge's for this\n    this.pointerEventListenerSubscriptions.pointerDown = this.pointerEventListeners.pointerDown.subscribe(\n      ({ clientX, clientY }) => {\n        this.mousedown.next({ clientX, clientY });\n      }\n    );\n\n    this.pointerEventListenerSubscriptions.pointerMove = this.pointerEventListeners.pointerMove.subscribe(\n      ({ clientX, clientY, event }) => {\n        this.mousemove.next({ clientX, clientY, event });\n      }\n    );\n\n    this.pointerEventListenerSubscriptions.pointerUp = this.pointerEventListeners.pointerUp.subscribe(\n      ({ clientX, clientY }) => {\n        this.mouseup.next({ clientX, clientY });\n      }\n    );\n\n    let currentResize: {\n      edges: Edges;\n      startingRect: BoundingRectangle;\n      currentRect: BoundingRectangle;\n      clonedNode?: HTMLElement;\n    } | null;\n\n    const removeGhostElement = () => {\n      if (currentResize && currentResize.clonedNode) {\n        this.elm.nativeElement.parentElement.removeChild(\n          currentResize.clonedNode\n        );\n        this.renderer.setStyle(this.elm.nativeElement, 'visibility', 'inherit');\n      }\n    };\n\n    const mouseMove: Observable<any> = this.mousemove.pipe(share());\n\n    mouseMove.pipe(filter(() => !!currentResize)).subscribe(({ event }) => {\n      event.preventDefault();\n    });\n\n    mouseMove\n      .pipe(throttle(() => interval(MOUSE_MOVE_THROTTLE_MS)))\n      .subscribe(({ clientX, clientY }) => {\n        const resizeEdges: Edges = getResizeEdges({\n          clientX,\n          clientY,\n          elm: this.elm,\n          allowedEdges: this.resizeEdges,\n          cursorPrecision: this.resizeCursorPrecision\n        });\n        const resizeCursors: ResizeCursors = Object.assign(\n          {},\n          DEFAULT_RESIZE_CURSORS,\n          this.resizeCursors\n        );\n        if (currentResize) {\n          const cursor: string = getResizeCursor(\n            currentResize.edges,\n            resizeCursors\n          );\n          this.renderer.setStyle(document.body, 'cursor', cursor);\n        } else {\n          const cursor: string = getResizeCursor(resizeEdges, resizeCursors);\n          this.renderer.setStyle(this.elm.nativeElement, 'cursor', cursor);\n        }\n        this.setElementClass(this.elm, RESIZE_ACTIVE_CLASS, !!currentResize);\n        this.setElementClass(\n          this.elm,\n          RESIZE_LEFT_HOVER_CLASS,\n          resizeEdges.left === true\n        );\n        this.setElementClass(\n          this.elm,\n          RESIZE_RIGHT_HOVER_CLASS,\n          resizeEdges.right === true\n        );\n        this.setElementClass(\n          this.elm,\n          RESIZE_TOP_HOVER_CLASS,\n          resizeEdges.top === true\n        );\n        this.setElementClass(\n          this.elm,\n          RESIZE_BOTTOM_HOVER_CLASS,\n          resizeEdges.bottom === true\n        );\n      });\n\n    const mousedrag: Observable<any> = this.mousedown\n      .pipe(\n        mergeMap(startCoords => {\n          function getDiff(moveCoords: { clientX: number; clientY: number }) {\n            return {\n              clientX: moveCoords.clientX - startCoords.clientX,\n              clientY: moveCoords.clientY - startCoords.clientY\n            };\n          }\n\n          const getSnapGrid = () => {\n            const snapGrid: Coordinate = { x: 1, y: 1 };\n\n            if (currentResize) {\n              if (this.resizeSnapGrid.left && currentResize.edges.left) {\n                snapGrid.x = +this.resizeSnapGrid.left;\n              } else if (\n                this.resizeSnapGrid.right &&\n                currentResize.edges.right\n              ) {\n                snapGrid.x = +this.resizeSnapGrid.right;\n              }\n\n              if (this.resizeSnapGrid.top && currentResize.edges.top) {\n                snapGrid.y = +this.resizeSnapGrid.top;\n              } else if (\n                this.resizeSnapGrid.bottom &&\n                currentResize.edges.bottom\n              ) {\n                snapGrid.y = +this.resizeSnapGrid.bottom;\n              }\n            }\n\n            return snapGrid;\n          };\n\n          function getGrid(\n            coords: { clientX: number; clientY: number },\n            snapGrid: Coordinate\n          ) {\n            return {\n              x: Math.ceil(coords.clientX / snapGrid.x),\n              y: Math.ceil(coords.clientY / snapGrid.y)\n            };\n          }\n\n          return merge(\n            mouseMove.pipe(take(1)).pipe(map(coords => [, coords])),\n            mouseMove.pipe(pairwise())\n          )\n            .pipe(\n              map(([previousCoords, newCoords]) => {\n                return [\n                  previousCoords ? getDiff(previousCoords) : previousCoords,\n                  getDiff(newCoords)\n                ];\n              })\n            )\n            .pipe(\n              filter(([previousCoords, newCoords]) => {\n                if (!previousCoords) {\n                  return true;\n                }\n\n                const snapGrid: Coordinate = getSnapGrid();\n                const previousGrid: Coordinate = getGrid(\n                  previousCoords,\n                  snapGrid\n                );\n                const newGrid: Coordinate = getGrid(newCoords, snapGrid);\n\n                return (\n                  previousGrid.x !== newGrid.x || previousGrid.y !== newGrid.y\n                );\n              })\n            )\n            .pipe(\n              map(([, newCoords]) => {\n                const snapGrid: Coordinate = getSnapGrid();\n                return {\n                  clientX:\n                    Math.round(newCoords.clientX / snapGrid.x) * snapGrid.x,\n                  clientY:\n                    Math.round(newCoords.clientY / snapGrid.y) * snapGrid.y\n                };\n              })\n            )\n            .pipe(takeUntil(merge(this.mouseup, this.mousedown)));\n        })\n      )\n      .pipe(filter(() => !!currentResize));\n\n    mousedrag\n      .pipe(\n        map(({ clientX, clientY }) => {\n          return getNewBoundingRectangle(\n            currentResize!.startingRect,\n            currentResize!.edges,\n            clientX,\n            clientY\n          );\n        })\n      )\n      .pipe(\n        filter((newBoundingRect: BoundingRectangle) => {\n          return !!(\n            newBoundingRect.height &&\n            newBoundingRect.width &&\n            newBoundingRect.height > 0 &&\n            newBoundingRect.width > 0\n          );\n        })\n      )\n      .pipe(\n        filter((newBoundingRect: BoundingRectangle) => {\n          return this.validateResize\n            ? this.validateResize({\n                rectangle: newBoundingRect,\n                edges: getEdgesDiff({\n                  edges: currentResize!.edges,\n                  initialRectangle: currentResize!.startingRect,\n                  newRectangle: newBoundingRect\n                })\n              })\n            : true;\n        })\n      )\n      .subscribe((newBoundingRect: BoundingRectangle) => {\n        if (currentResize && currentResize.clonedNode) {\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'height',\n            `${newBoundingRect.height}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'width',\n            `${newBoundingRect.width}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'top',\n            `${newBoundingRect.top}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'left',\n            `${newBoundingRect.left}px`\n          );\n        }\n\n        this.zone.run(() => {\n          this.resizing.emit({\n            edges: getEdgesDiff({\n              edges: currentResize!.edges,\n              initialRectangle: currentResize!.startingRect,\n              newRectangle: newBoundingRect\n            }),\n            rectangle: newBoundingRect\n          });\n        });\n\n        currentResize!.currentRect = newBoundingRect;\n      });\n\n    this.mousedown\n      .pipe(\n        map(({ clientX, clientY, edges }) => {\n          return (\n            edges ||\n            getResizeEdges({\n              clientX,\n              clientY,\n              elm: this.elm,\n              allowedEdges: this.resizeEdges,\n              cursorPrecision: this.resizeCursorPrecision\n            })\n          );\n        })\n      )\n      .pipe(\n        filter((edges: Edges) => {\n          return Object.keys(edges).length > 0;\n        })\n      )\n      .subscribe((edges: Edges) => {\n        if (currentResize) {\n          removeGhostElement();\n        }\n        const startingRect: BoundingRectangle = getElementRect(\n          this.elm,\n          this.ghostElementPositioning\n        );\n        currentResize = {\n          edges,\n          startingRect,\n          currentRect: startingRect\n        };\n        if (this.enableGhostResize) {\n          currentResize.clonedNode = this.elm.nativeElement.cloneNode(true);\n          const resizeCursors: ResizeCursors = Object.assign(\n            {},\n            DEFAULT_RESIZE_CURSORS,\n            this.resizeCursors\n          );\n          this.elm.nativeElement.parentElement.appendChild(\n            currentResize.clonedNode\n          );\n          this.renderer.setStyle(\n            this.elm.nativeElement,\n            'visibility',\n            'hidden'\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'position',\n            this.ghostElementPositioning\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'left',\n            `${currentResize.startingRect.left}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'top',\n            `${currentResize.startingRect.top}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'height',\n            `${currentResize.startingRect.height}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'width',\n            `${currentResize.startingRect.width}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'cursor',\n            getResizeCursor(currentResize.edges, resizeCursors)\n          );\n          this.renderer.addClass(\n            currentResize.clonedNode,\n            RESIZE_GHOST_ELEMENT_CLASS\n          );\n          currentResize.clonedNode!.scrollTop = currentResize.startingRect\n            .scrollTop as number;\n          currentResize.clonedNode!.scrollLeft = currentResize.startingRect\n            .scrollLeft as number;\n        }\n        this.zone.run(() => {\n          this.resizeStart.emit({\n            edges: getEdgesDiff({\n              edges,\n              initialRectangle: startingRect,\n              newRectangle: startingRect\n            }),\n            rectangle: getNewBoundingRectangle(startingRect, {}, 0, 0)\n          });\n        });\n      });\n\n    this.mouseup.subscribe(() => {\n      if (currentResize) {\n        this.renderer.removeClass(this.elm.nativeElement, RESIZE_ACTIVE_CLASS);\n        this.renderer.setStyle(document.body, 'cursor', '');\n        this.renderer.setStyle(this.elm.nativeElement, 'cursor', '');\n        this.zone.run(() => {\n          this.resizeEnd.emit({\n            edges: getEdgesDiff({\n              edges: currentResize!.edges,\n              initialRectangle: currentResize!.startingRect,\n              newRectangle: currentResize!.currentRect\n            }),\n            rectangle: currentResize!.currentRect\n          });\n        });\n        removeGhostElement();\n        currentResize = null;\n      }\n    });\n  }\n\n  /**\n   * @hidden\n   */\n  ngOnDestroy(): void {\n    this.mousedown.complete();\n    this.mouseup.complete();\n    this.mousemove.complete();\n    this.pointerEventListenerSubscriptions.pointerDown.unsubscribe();\n    this.pointerEventListenerSubscriptions.pointerMove.unsubscribe();\n    this.pointerEventListenerSubscriptions.pointerUp.unsubscribe();\n  }\n\n  private setElementClass(elm: ElementRef, name: string, add: boolean): void {\n    if (add) {\n      this.renderer.addClass(elm.nativeElement, name);\n    } else {\n      this.renderer.removeClass(elm.nativeElement, name);\n    }\n  }\n}\n\nclass PointerEventListeners {\n  public pointerDown: Observable<PointerEventCoordinate>;\n\n  public pointerMove: Observable<PointerEventCoordinate>;\n\n  public pointerUp: Observable<PointerEventCoordinate>;\n\n  private static instance: PointerEventListeners; // tslint:disable-line\n\n  public static getInstance(\n    renderer: Renderer2,\n    zone: NgZone\n  ): PointerEventListeners {\n    if (!PointerEventListeners.instance) {\n      PointerEventListeners.instance = new PointerEventListeners(\n        renderer,\n        zone\n      );\n    }\n    return PointerEventListeners.instance;\n  }\n\n  constructor(renderer: Renderer2, zone: NgZone) {\n    this.pointerDown = new Observable(\n      (observer: Observer<PointerEventCoordinate>) => {\n        let unsubscribeMouseDown: () => void;\n        let unsubscribeTouchStart: () => void;\n\n        zone.runOutsideAngular(() => {\n          unsubscribeMouseDown = renderer.listen(\n            'document',\n            'mousedown',\n            (event: MouseEvent) => {\n              observer.next({\n                clientX: event.clientX,\n                clientY: event.clientY,\n                event\n              });\n            }\n          );\n\n          unsubscribeTouchStart = renderer.listen(\n            'document',\n            'touchstart',\n            (event: TouchEvent) => {\n              observer.next({\n                clientX: event.touches[0].clientX,\n                clientY: event.touches[0].clientY,\n                event\n              });\n            }\n          );\n        });\n\n        return () => {\n          unsubscribeMouseDown();\n          unsubscribeTouchStart();\n        };\n      }\n    ).pipe(share());\n\n    this.pointerMove = new Observable(\n      (observer: Observer<PointerEventCoordinate>) => {\n        let unsubscribeMouseMove: () => void;\n        let unsubscribeTouchMove: () => void;\n\n        zone.runOutsideAngular(() => {\n          unsubscribeMouseMove = renderer.listen(\n            'document',\n            'mousemove',\n            (event: MouseEvent) => {\n              observer.next({\n                clientX: event.clientX,\n                clientY: event.clientY,\n                event\n              });\n            }\n          );\n\n          unsubscribeTouchMove = renderer.listen(\n            'document',\n            'touchmove',\n            (event: TouchEvent) => {\n              observer.next({\n                clientX: event.targetTouches[0].clientX,\n                clientY: event.targetTouches[0].clientY,\n                event\n              });\n            }\n          );\n        });\n\n        return () => {\n          unsubscribeMouseMove();\n          unsubscribeTouchMove();\n        };\n      }\n    ).pipe(share());\n\n    this.pointerUp = new Observable(\n      (observer: Observer<PointerEventCoordinate>) => {\n        let unsubscribeMouseUp: () => void;\n        let unsubscribeTouchEnd: () => void;\n        let unsubscribeTouchCancel: () => void;\n\n        zone.runOutsideAngular(() => {\n          unsubscribeMouseUp = renderer.listen(\n            'document',\n            'mouseup',\n            (event: MouseEvent) => {\n              observer.next({\n                clientX: event.clientX,\n                clientY: event.clientY,\n                event\n              });\n            }\n          );\n\n          unsubscribeTouchEnd = renderer.listen(\n            'document',\n            'touchend',\n            (event: TouchEvent) => {\n              observer.next({\n                clientX: event.changedTouches[0].clientX,\n                clientY: event.changedTouches[0].clientY,\n                event\n              });\n            }\n          );\n\n          unsubscribeTouchCancel = renderer.listen(\n            'document',\n            'touchcancel',\n            (event: TouchEvent) => {\n              observer.next({\n                clientX: event.changedTouches[0].clientX,\n                clientY: event.changedTouches[0].clientY,\n                event\n              });\n            }\n          );\n        });\n\n        return () => {\n          unsubscribeMouseUp();\n          unsubscribeTouchEnd();\n          unsubscribeTouchCancel();\n        };\n      }\n    ).pipe(share());\n  }\n}\n",
    "import {\n  Directive,\n  Input,\n  HostListener,\n  Renderer2,\n  ElementRef,\n  OnDestroy,\n  NgZone\n} from '@angular/core';\nimport { ResizableDirective } from './resizable.directive';\nimport { Edges } from './interfaces/edges.interface';\n\n/**\n * An element placed inside a `mwlResizable` directive to be used as a drag and resize handle\n *\n * For example\n *\n * ```html\n * <div mwlResizable>\n *   <div mwlResizeHandle [resizeEdges]=\"{bottom: true, right: true}\"></div>\n * </div>\n * ```\n */\n@Directive({\n  selector: '[mwlResizeHandle]'\n})\nexport class ResizeHandleDirective implements OnDestroy {\n  /**\n   * The `Edges` object that contains the edges of the parent element that dragging the handle will trigger a resize on\n   */\n  @Input() resizeEdges: Edges = {};\n\n  private eventListeners: {\n    touchmove?: () => void;\n    mousemove?: () => void;\n  } = {};\n\n  constructor(\n    private renderer: Renderer2,\n    private element: ElementRef,\n    private zone: NgZone,\n    private resizable: ResizableDirective\n  ) {}\n\n  ngOnDestroy(): void {\n    this.unsubscribeEventListeners();\n  }\n\n  /**\n   * @hidden\n   */\n  @HostListener('touchstart', [\n    '$event',\n    '$event.touches[0].clientX',\n    '$event.touches[0].clientY'\n  ])\n  @HostListener('mousedown', ['$event', '$event.clientX', '$event.clientY'])\n  onMousedown(\n    event: MouseEvent | TouchEvent,\n    clientX: number,\n    clientY: number\n  ): void {\n    event.preventDefault();\n    this.zone.runOutsideAngular(() => {\n      if (!this.eventListeners.touchmove) {\n        this.eventListeners.touchmove = this.renderer.listen(\n          this.element.nativeElement,\n          'touchmove',\n          (touchMoveEvent: TouchEvent) => {\n            this.onMousemove(\n              touchMoveEvent,\n              touchMoveEvent.targetTouches[0].clientX,\n              touchMoveEvent.targetTouches[0].clientY\n            );\n          }\n        );\n      }\n      if (!this.eventListeners.mousemove) {\n        this.eventListeners.mousemove = this.renderer.listen(\n          this.element.nativeElement,\n          'mousemove',\n          (mouseMoveEvent: MouseEvent) => {\n            this.onMousemove(\n              mouseMoveEvent,\n              mouseMoveEvent.clientX,\n              mouseMoveEvent.clientY\n            );\n          }\n        );\n      }\n      this.resizable.mousedown.next({\n        clientX,\n        clientY,\n        edges: this.resizeEdges\n      });\n    });\n  }\n\n  /**\n   * @hidden\n   */\n  @HostListener('touchend', [\n    '$event.changedTouches[0].clientX',\n    '$event.changedTouches[0].clientY'\n  ])\n  @HostListener('touchcancel', [\n    '$event.changedTouches[0].clientX',\n    '$event.changedTouches[0].clientY'\n  ])\n  @HostListener('mouseup', ['$event.clientX', '$event.clientY'])\n  onMouseup(clientX: number, clientY: number): void {\n    this.zone.runOutsideAngular(() => {\n      this.unsubscribeEventListeners();\n      this.resizable.mouseup.next({\n        clientX,\n        clientY,\n        edges: this.resizeEdges\n      });\n    });\n  }\n\n  private onMousemove(\n    event: MouseEvent | TouchEvent,\n    clientX: number,\n    clientY: number\n  ): void {\n    this.resizable.mousemove.next({\n      clientX,\n      clientY,\n      edges: this.resizeEdges,\n      event\n    });\n  }\n\n  private unsubscribeEventListeners(): void {\n    Object.keys(this.eventListeners).forEach(\n      (type: 'touchmove' | 'mousemove') => {\n        (this as any).eventListeners[type]();\n        delete this.eventListeners[type];\n      }\n    );\n  }\n}\n",
    "import { NgModule } from '@angular/core';\nimport { ResizableDirective } from './resizable.directive';\nimport { ResizeHandleDirective } from './resize-handle.directive';\n\n@NgModule({\n  declarations: [ResizableDirective, ResizeHandleDirective],\n  exports: [ResizableDirective, ResizeHandleDirective]\n})\nexport class ResizableModule {}\n"
  ],
  "names": [
    "precision",
    "Math",
    "abs",
    "value1",
    "value2",
    "getNewBoundingRectangle",
    "startingRect",
    "edges",
    "clientX",
    "clientY",
    "newBoundingRect",
    "top",
    "bottom",
    "left",
    "right",
    "height",
    "width",
    "isWithinBoundingY",
    "_a",
    "rect",
    "isWithinBoundingX",
    "getResizeEdges",
    "elm",
    "allowedEdges",
    "cursorPrecision",
    "elmPosition",
    "nativeElement",
    "getBoundingClientRect",
    "isNumberCloseTo",
    "DEFAULT_RESIZE_CURSORS",
    "Object",
    "freeze",
    "topLeft",
    "topRight",
    "bottomLeft",
    "bottomRight",
    "leftOrRight",
    "getResizeCursor",
    "cursors",
    "topOrBottom",
    "getEdgesDiff",
    "initialRectangle",
    "newRectangle",
    "edgesDiff",
    "keys",
    "forEach",
    "edge",
    "RESIZE_ACTIVE_CLASS",
    "ResizableDirective",
    "renderer",
    "zone",
    "this",
    "mousemove",
    "Subject$1",
    "prototype",
    "ngOnInit",
    "_this",
    "pointerEventListenerSubscriptions",
    "pointerDown",
    "pointerEventListeners",
    "subscribe",
    "mousedown",
    "next",
    "pointerMove",
    "event",
    "pointerUp",
    "mouseup",
    "currentResize",
    "removeGhostElement",
    "clonedNode",
    "parentElement",
    "removeChild",
    "setStyle",
    "mouseMove",
    "pipe",
    "share$1",
    "filter$1",
    "preventDefault",
    "throttle$1",
    "interval$1",
    "resizeEdges",
    "resizeCursorPrecision",
    "resizeCursors",
    "assign",
    "cursor",
    "document",
    "body",
    "setElementClass",
    "mergeMap$1",
    "startCoords",
    "getDiff",
    "moveCoords",
    "getSnapGrid",
    "snapGrid",
    "x",
    "y",
    "resizeSnapGrid",
    "getGrid",
    "coords",
    "ceil",
    "merge$1",
    "take$1",
    "map$1",
    "pairwise$1",
    "previousCoords",
    "newCoords",
    "previousGrid",
    "newGrid",
    "round",
    "takeUntil$1",
    "validateResize",
    "rectangle",
    "map",
    "run",
    "resizing",
    "emit",
    "currentRect",
    "length",
    "element",
    "ghostElementPositioning",
    "translateX",
    "translateY",
    "style",
    "transform",
    "property",
    "find",
    "value",
    "includes",
    "replace",
    "offsetHeight",
    "offsetWidth",
    "offsetTop",
    "offsetLeft",
    "boundingRect",
    "scrollTop",
    "scrollLeft",
    "getElementRect",
    "enableGhostResize",
    "cloneNode",
    "appendChild",
    "addClass",
    "resizeStart",
    "removeClass",
    "ngOnDestroy",
    "complete",
    "unsubscribe",
    "name",
    "decorators",
    "type",
    "Directive",
    "args",
    "selector",
    "ctorParameters",
    "ElementRef",
    "Input",
    "PointerEventListeners",
    "Observable$1",
    "observer",
    "unsubscribeMouseDown",
    "unsubscribeTouchStart",
    "runOutsideAngular",
    "listen",
    "touches",
    "unsubscribeMouseMove",
    "unsubscribeTouchMove",
    "targetTouches",
    "unsubscribeMouseUp",
    "unsubscribeTouchEnd",
    "unsubscribeTouchCancel",
    "changedTouches",
    "share",
    "ResizeHandleDirective",
    "resizable",
    "eventListeners",
    "unsubscribeEventListeners",
    "onMousedown",
    "onMousemove",
    "mouseMoveEvent",
    "onMouseup",
    "HostListener"
  ],
  "mappings": "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"
}
