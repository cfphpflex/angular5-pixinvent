{"version":3,"sources":["../../../src/model/handle.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,KAAK,EAAC,MAAM,SAAS,CAAC;AAC9B,OAAO,EAAC,eAAe,EAAC,MAAM,oBAAoB,CAAC;AAgBnD;IASI,gBAAY,CAAS,EAAE,CAAS,EAAE,MAAc,EAAE,QAAyB;QAFpE,oBAAe,GAAoB,IAAI,eAAe,EAAE,CAAC;QAG5D,IAAI,CAAC,IAAI,GAAG,KAAK,CAAC;QAClB,IAAI,CAAC,IAAI,GAAG,KAAK,CAAC;QAClB,IAAI,CAAC,SAAS,GAAG,IAAI,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QACjC,IAAI,CAAC,MAAM,GAAG,IAAI,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QAC9B,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,eAAe,GAAG,QAAQ,CAAC;IACpC,CAAC;IAEM,wBAAO,GAAd,UAAe,KAAc;QACzB,IAAI,CAAC,IAAI,GAAG,KAAK,CAAC;QAClB,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;IACxB,CAAC;IAEM,qBAAI,GAAX,UAAY,GAA6B;QACrC,yBAAyB;IAC7B,CAAC;IAEM,wBAAO,GAAd,UAAe,IAAa;QACxB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;IACrB,CAAC;IAEM,8BAAa,GAApB,UAAqB,CAAS,EAAE,CAAS;QACrC,MAAM,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,GAAG,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;YACtD,CAAC,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,GAAG,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;YACnD,CAAC,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,GAAG,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;YACnD,CAAC,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,GAAG,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;IAC5D,CAAC;IAED,sBAAW,4BAAQ;aAAnB;YACI,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC;QAC1B,CAAC;;;OAAA;IAEM,4BAAW,GAAlB,UAAmB,CAAS,EAAE,CAAS;QACnC,IAAI,CAAC,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC;QACrB,IAAI,CAAC,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC;IACzB,CAAC;IAEL,aAAC;AAAD,CA/CA,AA+CC,IAAA","file":"handle.js","sourceRoot":"","sourcesContent":["import {Point} from './point';\nimport {CropperSettings} from '../cropperSettings';\n\nexport interface IHandle {\n    over: boolean;\n    drag: boolean;\n    position: Point;\n    setPosition(x: number, y: number): void;\n    offset: Point;\n    radius: number;\n    cropperSettings: CropperSettings;\n    setDrag(value: boolean): void;\n    draw(ctx: CanvasRenderingContext2D): void;\n    setOver(over: boolean): void;\n    touchInBounds(x: number, y: number): boolean;\n}\n\nexport class Handle implements IHandle {\n    public over: boolean;\n    public drag: boolean;\n    private _position: Point;\n    public offset: Point;\n    public radius: number;\n\n    public cropperSettings: CropperSettings = new CropperSettings();\n\n    constructor(x: number, y: number, radius: number, settings: CropperSettings) {\n        this.over = false;\n        this.drag = false;\n        this._position = new Point(x, y);\n        this.offset = new Point(0, 0);\n        this.radius = radius;\n        this.cropperSettings = settings;\n    }\n\n    public setDrag(value: boolean):void {\n        this.drag = value;\n        this.setOver(value);\n    }\n\n    public draw(ctx: CanvasRenderingContext2D) {\n        // this should't be empty\n    }\n\n    public setOver(over: boolean): void {\n        this.over = over;\n    }\n\n    public touchInBounds(x: number, y: number): boolean {\n        return (x > this.position.x - this.radius + this.offset.x) &&\n            (x < this.position.x + this.radius + this.offset.x) &&\n            (y > this.position.y - this.radius + this.offset.y) &&\n            (y < this.position.y + this.radius + this.offset.y);\n    }\n\n    public get position(): Point {\n        return this._position;\n    }\n\n    public setPosition(x: number, y: number) {\n        this._position.x = x;\n        this._position.y = y;\n    }\n\n}\n"]}