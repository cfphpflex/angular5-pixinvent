"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var vg_playback_button_1 = require("./vg-playback-button");
var vg_api_1 = require("../../core/services/vg-api");
var vg_states_1 = require("../../core/states/vg-states");
describe('Playback Button', function () {
    var playbackButton;
    var ref;
    var api;
    beforeEach(function () {
        ref = {
            nativeElement: {
                getAttribute: function (name) {
                    return name;
                }
            }
        };
        api = new vg_api_1.VgAPI();
        api.medias = {
            main: {
                state: vg_states_1.VgStates.VG_PLAYING
            },
            secondary: {
                state: vg_states_1.VgStates.VG_PAUSED
            }
        };
        playbackButton = new vg_playback_button_1.VgPlaybackButton(ref, api);
    });
    it('Should set playbackIndex default value to 1', function () {
        expect(playbackButton.playbackIndex).toEqual(1);
    });
    it('Should get media by id on init', function () {
        spyOn(api, 'getMediaById').and.callFake(function () { });
        playbackButton.vgFor = 'test';
        playbackButton.onPlayerReady();
        expect(api.getMediaById).toHaveBeenCalledWith('test');
    });
    describe('onClick (single and multiple media)', function () {
        it('should increase playbackIndex', function () {
            api.medias = {
                main: {
                    state: vg_states_1.VgStates.VG_PLAYING
                }
            };
            playbackButton.target = api;
            playbackButton.onClick();
            expect(playbackButton.playbackIndex).toEqual(2);
        });
        it('should set playbackRate to target media', function () {
            api.medias = {
                main: {
                    state: vg_states_1.VgStates.VG_PLAYING
                }
            };
            playbackButton.target = api;
            playbackButton.onClick();
            expect(playbackButton.target.playbackRate).toEqual('1.5');
        });
        it('should set playbackRate to target media', function () {
            var media = {
                playbackRate: {
                    test: '1'
                }
            };
            playbackButton.target = media;
            playbackButton.vgFor = 'test';
            playbackButton.onClick();
            expect(playbackButton.target.playbackRate.test).toEqual('1.5');
        });
    });
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmctcGxheWJhY2stYnV0dG9uLnNwZWMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ2Zy1wbGF5YmFjay1idXR0b24uc3BlYy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLDJEQUFzRDtBQUN0RCxxREFBaUQ7QUFFakQseURBQXFEO0FBRXJELFFBQVEsQ0FBQyxpQkFBaUIsRUFBRTtJQUN4QixJQUFJLGNBQStCLENBQUM7SUFDcEMsSUFBSSxHQUFjLENBQUM7SUFDbkIsSUFBSSxHQUFTLENBQUM7SUFFZCxVQUFVLENBQUM7UUFDUCxHQUFHLEdBQUc7WUFDRixhQUFhLEVBQUU7Z0JBQ1gsWUFBWSxFQUFFLFVBQUMsSUFBSTtvQkFDZixNQUFNLENBQUMsSUFBSSxDQUFDO2lCQUNmO2FBQ0o7U0FDSixDQUFDO1FBRUYsR0FBRyxHQUFHLElBQUksY0FBSyxFQUFFLENBQUM7UUFDbEIsR0FBRyxDQUFDLE1BQU0sR0FBRztZQUNULElBQUksRUFBRTtnQkFDRixLQUFLLEVBQUUsb0JBQVEsQ0FBQyxVQUFVO2FBQzdCO1lBQ0QsU0FBUyxFQUFFO2dCQUNQLEtBQUssRUFBRSxvQkFBUSxDQUFDLFNBQVM7YUFDNUI7U0FDSixDQUFDO1FBR0YsY0FBYyxHQUFHLElBQUkscUNBQWdCLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0tBQ25ELENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQyw2Q0FBNkMsRUFBRTtRQUM5QyxNQUFNLENBQUMsY0FBYyxDQUFDLGFBQWEsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQztLQUNuRCxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMsZ0NBQWdDLEVBQUU7UUFDakMsS0FBSyxDQUFDLEdBQUcsRUFBRSxjQUFjLENBQUMsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLGVBQVMsQ0FBQyxDQUFDO1FBRW5ELGNBQWMsQ0FBQyxLQUFLLEdBQUcsTUFBTSxDQUFDO1FBQzlCLGNBQWMsQ0FBQyxhQUFhLEVBQUUsQ0FBQztRQUUvQixNQUFNLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQyxDQUFDLG9CQUFvQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0tBQ3pELENBQUMsQ0FBQztJQUVILFFBQVEsQ0FBQyxxQ0FBcUMsRUFBRTtRQUM1QyxFQUFFLENBQUMsK0JBQStCLEVBQUU7WUFDaEMsR0FBRyxDQUFDLE1BQU0sR0FBRztnQkFDVCxJQUFJLEVBQUU7b0JBQ0YsS0FBSyxFQUFFLG9CQUFRLENBQUMsVUFBVTtpQkFDN0I7YUFDSixDQUFDO1lBRUYsY0FBYyxDQUFDLE1BQU0sR0FBRyxHQUFHLENBQUM7WUFFNUIsY0FBYyxDQUFDLE9BQU8sRUFBRSxDQUFDO1lBRXpCLE1BQU0sQ0FBQyxjQUFjLENBQUMsYUFBYSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQ25ELENBQUMsQ0FBQztRQUVILEVBQUUsQ0FBQyx5Q0FBeUMsRUFBRTtZQUMxQyxHQUFHLENBQUMsTUFBTSxHQUFHO2dCQUNULElBQUksRUFBRTtvQkFDRixLQUFLLEVBQUUsb0JBQVEsQ0FBQyxVQUFVO2lCQUM3QjthQUNKLENBQUM7WUFFRixjQUFjLENBQUMsTUFBTSxHQUFHLEdBQUcsQ0FBQztZQUU1QixjQUFjLENBQUMsT0FBTyxFQUFFLENBQUM7WUFFekIsTUFBTSxDQUFDLGNBQWMsQ0FBQyxNQUFNLENBQUMsWUFBWSxDQUFDLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQzdELENBQUMsQ0FBQztRQUVILEVBQUUsQ0FBQyx5Q0FBeUMsRUFBRTtZQUMxQyxJQUFJLEtBQUssR0FBRztnQkFDUixZQUFZLEVBQUU7b0JBQ1YsSUFBSSxFQUFFLEdBQUc7aUJBQ1o7YUFDSixDQUFDO1lBRUYsY0FBYyxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUM7WUFDOUIsY0FBYyxDQUFDLEtBQUssR0FBRyxNQUFNLENBQUM7WUFFOUIsY0FBYyxDQUFDLE9BQU8sRUFBRSxDQUFDO1lBRXpCLE1BQU0sQ0FBQyxjQUFjLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDbEUsQ0FBQyxDQUFDO0tBQ04sQ0FBQyxDQUFDO0NBQ04sQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtWZ1BsYXliYWNrQnV0dG9ufSBmcm9tIFwiLi92Zy1wbGF5YmFjay1idXR0b25cIjtcbmltcG9ydCB7VmdBUEl9IGZyb20gXCIuLi8uLi9jb3JlL3NlcnZpY2VzL3ZnLWFwaVwiO1xuaW1wb3J0IHtFbGVtZW50UmVmfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuaW1wb3J0IHtWZ1N0YXRlc30gZnJvbSBcIi4uLy4uL2NvcmUvc3RhdGVzL3ZnLXN0YXRlc1wiO1xuXG5kZXNjcmliZSgnUGxheWJhY2sgQnV0dG9uJywgKCkgPT4ge1xuICAgIGxldCBwbGF5YmFja0J1dHRvbjpWZ1BsYXliYWNrQnV0dG9uO1xuICAgIGxldCByZWY6RWxlbWVudFJlZjtcbiAgICBsZXQgYXBpOlZnQVBJO1xuXG4gICAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgICAgIHJlZiA9IHtcbiAgICAgICAgICAgIG5hdGl2ZUVsZW1lbnQ6IHtcbiAgICAgICAgICAgICAgICBnZXRBdHRyaWJ1dGU6IChuYW1lKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuYW1lO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICBhcGkgPSBuZXcgVmdBUEkoKTtcbiAgICAgICAgYXBpLm1lZGlhcyA9IHtcbiAgICAgICAgICAgIG1haW46IHtcbiAgICAgICAgICAgICAgICBzdGF0ZTogVmdTdGF0ZXMuVkdfUExBWUlOR1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNlY29uZGFyeToge1xuICAgICAgICAgICAgICAgIHN0YXRlOiBWZ1N0YXRlcy5WR19QQVVTRURcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuXG4gICAgICAgIHBsYXliYWNrQnV0dG9uID0gbmV3IFZnUGxheWJhY2tCdXR0b24ocmVmLCBhcGkpO1xuICAgIH0pO1xuXG4gICAgaXQoJ1Nob3VsZCBzZXQgcGxheWJhY2tJbmRleCBkZWZhdWx0IHZhbHVlIHRvIDEnLCAoKSA9PiB7XG4gICAgICAgIGV4cGVjdChwbGF5YmFja0J1dHRvbi5wbGF5YmFja0luZGV4KS50b0VxdWFsKDEpO1xuICAgIH0pO1xuXG4gICAgaXQoJ1Nob3VsZCBnZXQgbWVkaWEgYnkgaWQgb24gaW5pdCcsICgpID0+IHtcbiAgICAgICAgc3B5T24oYXBpLCAnZ2V0TWVkaWFCeUlkJykuYW5kLmNhbGxGYWtlKCgpID0+IHsgfSk7XG5cbiAgICAgICAgcGxheWJhY2tCdXR0b24udmdGb3IgPSAndGVzdCc7XG4gICAgICAgIHBsYXliYWNrQnV0dG9uLm9uUGxheWVyUmVhZHkoKTtcblxuICAgICAgICBleHBlY3QoYXBpLmdldE1lZGlhQnlJZCkudG9IYXZlQmVlbkNhbGxlZFdpdGgoJ3Rlc3QnKTtcbiAgICB9KTtcblxuICAgIGRlc2NyaWJlKCdvbkNsaWNrIChzaW5nbGUgYW5kIG11bHRpcGxlIG1lZGlhKScsICgpID0+IHtcbiAgICAgICAgaXQoJ3Nob3VsZCBpbmNyZWFzZSBwbGF5YmFja0luZGV4JywgKCkgPT4ge1xuICAgICAgICAgICAgYXBpLm1lZGlhcyA9IHtcbiAgICAgICAgICAgICAgICBtYWluOiB7XG4gICAgICAgICAgICAgICAgICAgIHN0YXRlOiBWZ1N0YXRlcy5WR19QTEFZSU5HXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgcGxheWJhY2tCdXR0b24udGFyZ2V0ID0gYXBpO1xuXG4gICAgICAgICAgICBwbGF5YmFja0J1dHRvbi5vbkNsaWNrKCk7XG5cbiAgICAgICAgICAgIGV4cGVjdChwbGF5YmFja0J1dHRvbi5wbGF5YmFja0luZGV4KS50b0VxdWFsKDIpO1xuICAgICAgICB9KTtcblxuICAgICAgICBpdCgnc2hvdWxkIHNldCBwbGF5YmFja1JhdGUgdG8gdGFyZ2V0IG1lZGlhJywgKCkgPT4ge1xuICAgICAgICAgICAgYXBpLm1lZGlhcyA9IHtcbiAgICAgICAgICAgICAgICBtYWluOiB7XG4gICAgICAgICAgICAgICAgICAgIHN0YXRlOiBWZ1N0YXRlcy5WR19QTEFZSU5HXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgcGxheWJhY2tCdXR0b24udGFyZ2V0ID0gYXBpO1xuXG4gICAgICAgICAgICBwbGF5YmFja0J1dHRvbi5vbkNsaWNrKCk7XG5cbiAgICAgICAgICAgIGV4cGVjdChwbGF5YmFja0J1dHRvbi50YXJnZXQucGxheWJhY2tSYXRlKS50b0VxdWFsKCcxLjUnKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaXQoJ3Nob3VsZCBzZXQgcGxheWJhY2tSYXRlIHRvIHRhcmdldCBtZWRpYScsICgpID0+IHtcbiAgICAgICAgICAgIGxldCBtZWRpYSA9IHtcbiAgICAgICAgICAgICAgICBwbGF5YmFja1JhdGU6IHtcbiAgICAgICAgICAgICAgICAgICAgdGVzdDogJzEnXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgcGxheWJhY2tCdXR0b24udGFyZ2V0ID0gbWVkaWE7XG4gICAgICAgICAgICBwbGF5YmFja0J1dHRvbi52Z0ZvciA9ICd0ZXN0JztcblxuICAgICAgICAgICAgcGxheWJhY2tCdXR0b24ub25DbGljaygpO1xuXG4gICAgICAgICAgICBleHBlY3QocGxheWJhY2tCdXR0b24udGFyZ2V0LnBsYXliYWNrUmF0ZS50ZXN0KS50b0VxdWFsKCcxLjUnKTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG59KTtcbiJdfQ==