"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var vg_play_pause_1 = require("./vg-play-pause");
var vg_api_1 = require("../../core/services/vg-api");
var vg_states_1 = require("../../core/states/vg-states");
describe('Play/Pause Button', function () {
    var playPause;
    var ref;
    var api;
    beforeEach(function () {
        ref = {
            nativeElement: {
                getAttribute: function (name) {
                    return name;
                }
            }
        };
        api = new vg_api_1.VgAPI();
        api.medias = {
            main: {
                state: vg_states_1.VgStates.VG_PLAYING
            },
            secondary: {
                state: vg_states_1.VgStates.VG_PAUSED
            }
        };
        playPause = new vg_play_pause_1.VgPlayPause(ref, api);
    });
    it('Should get media by id on init', function () {
        spyOn(api, 'getMediaById').and.callFake(function () {
            return {
                volume: 1
            };
        });
        playPause.vgFor = 'test';
        playPause.onPlayerReady();
        expect(api.getMediaById).toHaveBeenCalledWith('test');
    });
    it('Should get state for one media file', function () {
        api.medias = {
            main: {
                state: vg_states_1.VgStates.VG_PLAYING
            }
        };
        playPause.target = api;
        var state = playPause.getState();
        expect(state).toBe(vg_states_1.VgStates.VG_PLAYING);
    });
    describe('onClick (single and multiple media)', function () {
        it('should pause if current state is different play', function () {
            spyOn(api, 'pause').and.callFake(function () { });
            api.medias = {
                main: {
                    state: vg_states_1.VgStates.VG_PLAYING
                }
            };
            playPause.target = api;
            playPause.onClick();
            expect(api.pause).toHaveBeenCalled();
        });
        it('should play if current state is pause', function () {
            spyOn(api, 'play').and.callFake(function () { });
            api.medias = {
                main: {
                    state: vg_states_1.VgStates.VG_PAUSED
                }
            };
            playPause.target = api;
            playPause.onClick();
            expect(api.play).toHaveBeenCalled();
        });
        it('should play if current state is ended', function () {
            spyOn(api, 'play').and.callFake(function () { });
            api.medias = {
                main: {
                    state: vg_states_1.VgStates.VG_ENDED
                }
            };
            playPause.target = api;
            playPause.onClick();
            expect(api.play).toHaveBeenCalled();
        });
    });
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmctcGxheS1wYXVzZS5zcGVjLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsidmctcGxheS1wYXVzZS5zcGVjLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsaURBQTRDO0FBQzVDLHFEQUFpRDtBQUVqRCx5REFBcUQ7QUFFckQsUUFBUSxDQUFDLG1CQUFtQixFQUFFO0lBQzFCLElBQUksU0FBcUIsQ0FBQztJQUMxQixJQUFJLEdBQWMsQ0FBQztJQUNuQixJQUFJLEdBQVMsQ0FBQztJQUVkLFVBQVUsQ0FBQztRQUNQLEdBQUcsR0FBRztZQUNGLGFBQWEsRUFBRTtnQkFDWCxZQUFZLEVBQUUsVUFBQyxJQUFJO29CQUNmLE1BQU0sQ0FBQyxJQUFJLENBQUM7aUJBQ2Y7YUFDSjtTQUNKLENBQUM7UUFFRixHQUFHLEdBQUcsSUFBSSxjQUFLLEVBQUUsQ0FBQztRQUNsQixHQUFHLENBQUMsTUFBTSxHQUFHO1lBQ1QsSUFBSSxFQUFFO2dCQUNGLEtBQUssRUFBRSxvQkFBUSxDQUFDLFVBQVU7YUFDN0I7WUFDRCxTQUFTLEVBQUU7Z0JBQ1AsS0FBSyxFQUFFLG9CQUFRLENBQUMsU0FBUzthQUM1QjtTQUNKLENBQUM7UUFHRixTQUFTLEdBQUcsSUFBSSwyQkFBVyxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQztLQUN6QyxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMsZ0NBQWdDLEVBQUU7UUFDakMsS0FBSyxDQUFDLEdBQUcsRUFBRSxjQUFjLENBQUMsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDO1lBQ3BDLE1BQU0sQ0FBQztnQkFDSCxNQUFNLEVBQUUsQ0FBQzthQUNaLENBQUM7U0FDTCxDQUFDLENBQUM7UUFFSCxTQUFTLENBQUMsS0FBSyxHQUFHLE1BQU0sQ0FBQztRQUN6QixTQUFTLENBQUMsYUFBYSxFQUFFLENBQUM7UUFFMUIsTUFBTSxDQUFDLEdBQUcsQ0FBQyxZQUFZLENBQUMsQ0FBQyxvQkFBb0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztLQUN6RCxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMscUNBQXFDLEVBQUU7UUFDdEMsR0FBRyxDQUFDLE1BQU0sR0FBRztZQUNULElBQUksRUFBRTtnQkFDRixLQUFLLEVBQUUsb0JBQVEsQ0FBQyxVQUFVO2FBQzdCO1NBQ0osQ0FBQztRQUVGLFNBQVMsQ0FBQyxNQUFNLEdBQUcsR0FBRyxDQUFDO1FBRXZCLElBQUksS0FBSyxHQUFHLFNBQVMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUVqQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDLG9CQUFRLENBQUMsVUFBVSxDQUFDLENBQUM7S0FDM0MsQ0FBQyxDQUFDO0lBRUgsUUFBUSxDQUFDLHFDQUFxQyxFQUFFO1FBQzVDLEVBQUUsQ0FBQyxpREFBaUQsRUFBRTtZQUNsRCxLQUFLLENBQUMsR0FBRyxFQUFFLE9BQU8sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsZUFBUSxDQUFDLENBQUM7WUFFM0MsR0FBRyxDQUFDLE1BQU0sR0FBRztnQkFDVCxJQUFJLEVBQUU7b0JBQ0YsS0FBSyxFQUFFLG9CQUFRLENBQUMsVUFBVTtpQkFDN0I7YUFDSixDQUFDO1lBRUYsU0FBUyxDQUFDLE1BQU0sR0FBRyxHQUFHLENBQUM7WUFFdkIsU0FBUyxDQUFDLE9BQU8sRUFBRSxDQUFDO1lBRXBCLE1BQU0sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztTQUN4QyxDQUFDLENBQUM7UUFFSCxFQUFFLENBQUMsdUNBQXVDLEVBQUU7WUFDeEMsS0FBSyxDQUFDLEdBQUcsRUFBRSxNQUFNLENBQUMsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLGVBQVEsQ0FBQyxDQUFDO1lBRTFDLEdBQUcsQ0FBQyxNQUFNLEdBQUc7Z0JBQ1QsSUFBSSxFQUFFO29CQUNGLEtBQUssRUFBRSxvQkFBUSxDQUFDLFNBQVM7aUJBQzVCO2FBQ0osQ0FBQztZQUVGLFNBQVMsQ0FBQyxNQUFNLEdBQUcsR0FBRyxDQUFDO1lBRXZCLFNBQVMsQ0FBQyxPQUFPLEVBQUUsQ0FBQztZQUVwQixNQUFNLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLGdCQUFnQixFQUFFLENBQUM7U0FDdkMsQ0FBQyxDQUFDO1FBRUgsRUFBRSxDQUFDLHVDQUF1QyxFQUFFO1lBQ3hDLEtBQUssQ0FBQyxHQUFHLEVBQUUsTUFBTSxDQUFDLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxlQUFRLENBQUMsQ0FBQztZQUUxQyxHQUFHLENBQUMsTUFBTSxHQUFHO2dCQUNULElBQUksRUFBRTtvQkFDRixLQUFLLEVBQUUsb0JBQVEsQ0FBQyxRQUFRO2lCQUMzQjthQUNKLENBQUM7WUFFRixTQUFTLENBQUMsTUFBTSxHQUFHLEdBQUcsQ0FBQztZQUV2QixTQUFTLENBQUMsT0FBTyxFQUFFLENBQUM7WUFFcEIsTUFBTSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO1NBQ3ZDLENBQUMsQ0FBQztLQUNOLENBQUMsQ0FBQztDQUNOLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7VmdQbGF5UGF1c2V9IGZyb20gXCIuL3ZnLXBsYXktcGF1c2VcIjtcbmltcG9ydCB7VmdBUEl9IGZyb20gXCIuLi8uLi9jb3JlL3NlcnZpY2VzL3ZnLWFwaVwiO1xuaW1wb3J0IHtFbGVtZW50UmVmfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuaW1wb3J0IHtWZ1N0YXRlc30gZnJvbSBcIi4uLy4uL2NvcmUvc3RhdGVzL3ZnLXN0YXRlc1wiO1xuXG5kZXNjcmliZSgnUGxheS9QYXVzZSBCdXR0b24nLCAoKSA9PiB7XG4gICAgbGV0IHBsYXlQYXVzZTpWZ1BsYXlQYXVzZTtcbiAgICBsZXQgcmVmOkVsZW1lbnRSZWY7XG4gICAgbGV0IGFwaTpWZ0FQSTtcblxuICAgIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgICAgICByZWYgPSB7XG4gICAgICAgICAgICBuYXRpdmVFbGVtZW50OiB7XG4gICAgICAgICAgICAgICAgZ2V0QXR0cmlidXRlOiAobmFtZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmFtZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgYXBpID0gbmV3IFZnQVBJKCk7XG4gICAgICAgIGFwaS5tZWRpYXMgPSB7XG4gICAgICAgICAgICBtYWluOiB7XG4gICAgICAgICAgICAgICAgc3RhdGU6IFZnU3RhdGVzLlZHX1BMQVlJTkdcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzZWNvbmRhcnk6IHtcbiAgICAgICAgICAgICAgICBzdGF0ZTogVmdTdGF0ZXMuVkdfUEFVU0VEXG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cblxuICAgICAgICBwbGF5UGF1c2UgPSBuZXcgVmdQbGF5UGF1c2UocmVmLCBhcGkpO1xuICAgIH0pO1xuXG4gICAgaXQoJ1Nob3VsZCBnZXQgbWVkaWEgYnkgaWQgb24gaW5pdCcsICgpID0+IHtcbiAgICAgICAgc3B5T24oYXBpLCAnZ2V0TWVkaWFCeUlkJykuYW5kLmNhbGxGYWtlKCgpID0+IHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgdm9sdW1lOiAxXG4gICAgICAgICAgICB9O1xuICAgICAgICB9KTtcblxuICAgICAgICBwbGF5UGF1c2UudmdGb3IgPSAndGVzdCc7XG4gICAgICAgIHBsYXlQYXVzZS5vblBsYXllclJlYWR5KCk7XG5cbiAgICAgICAgZXhwZWN0KGFwaS5nZXRNZWRpYUJ5SWQpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKCd0ZXN0Jyk7XG4gICAgfSk7XG5cbiAgICBpdCgnU2hvdWxkIGdldCBzdGF0ZSBmb3Igb25lIG1lZGlhIGZpbGUnLCAoKSA9PiB7XG4gICAgICAgIGFwaS5tZWRpYXMgPSB7XG4gICAgICAgICAgICBtYWluOiB7XG4gICAgICAgICAgICAgICAgc3RhdGU6IFZnU3RhdGVzLlZHX1BMQVlJTkdcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICBwbGF5UGF1c2UudGFyZ2V0ID0gYXBpO1xuXG4gICAgICAgIGxldCBzdGF0ZSA9IHBsYXlQYXVzZS5nZXRTdGF0ZSgpO1xuXG4gICAgICAgIGV4cGVjdChzdGF0ZSkudG9CZShWZ1N0YXRlcy5WR19QTEFZSU5HKTtcbiAgICB9KTtcblxuICAgIGRlc2NyaWJlKCdvbkNsaWNrIChzaW5nbGUgYW5kIG11bHRpcGxlIG1lZGlhKScsICgpID0+IHtcbiAgICAgICAgaXQoJ3Nob3VsZCBwYXVzZSBpZiBjdXJyZW50IHN0YXRlIGlzIGRpZmZlcmVudCBwbGF5JywgKCkgPT4ge1xuICAgICAgICAgICAgc3B5T24oYXBpLCAncGF1c2UnKS5hbmQuY2FsbEZha2UoKCkgPT4ge30pO1xuXG4gICAgICAgICAgICBhcGkubWVkaWFzID0ge1xuICAgICAgICAgICAgICAgIG1haW46IHtcbiAgICAgICAgICAgICAgICAgICAgc3RhdGU6IFZnU3RhdGVzLlZHX1BMQVlJTkdcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBwbGF5UGF1c2UudGFyZ2V0ID0gYXBpO1xuXG4gICAgICAgICAgICBwbGF5UGF1c2Uub25DbGljaygpO1xuXG4gICAgICAgICAgICBleHBlY3QoYXBpLnBhdXNlKS50b0hhdmVCZWVuQ2FsbGVkKCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGl0KCdzaG91bGQgcGxheSBpZiBjdXJyZW50IHN0YXRlIGlzIHBhdXNlJywgKCkgPT4ge1xuICAgICAgICAgICAgc3B5T24oYXBpLCAncGxheScpLmFuZC5jYWxsRmFrZSgoKSA9PiB7fSk7XG5cbiAgICAgICAgICAgIGFwaS5tZWRpYXMgPSB7XG4gICAgICAgICAgICAgICAgbWFpbjoge1xuICAgICAgICAgICAgICAgICAgICBzdGF0ZTogVmdTdGF0ZXMuVkdfUEFVU0VEXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgcGxheVBhdXNlLnRhcmdldCA9IGFwaTtcblxuICAgICAgICAgICAgcGxheVBhdXNlLm9uQ2xpY2soKTtcblxuICAgICAgICAgICAgZXhwZWN0KGFwaS5wbGF5KS50b0hhdmVCZWVuQ2FsbGVkKCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGl0KCdzaG91bGQgcGxheSBpZiBjdXJyZW50IHN0YXRlIGlzIGVuZGVkJywgKCkgPT4ge1xuICAgICAgICAgICAgc3B5T24oYXBpLCAncGxheScpLmFuZC5jYWxsRmFrZSgoKSA9PiB7fSk7XG5cbiAgICAgICAgICAgIGFwaS5tZWRpYXMgPSB7XG4gICAgICAgICAgICAgICAgbWFpbjoge1xuICAgICAgICAgICAgICAgICAgICBzdGF0ZTogVmdTdGF0ZXMuVkdfRU5ERURcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBwbGF5UGF1c2UudGFyZ2V0ID0gYXBpO1xuXG4gICAgICAgICAgICBwbGF5UGF1c2Uub25DbGljaygpO1xuXG4gICAgICAgICAgICBleHBlY3QoYXBpLnBsYXkpLnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG59KTtcbiJdfQ==