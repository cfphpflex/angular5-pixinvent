"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var vg_controls_1 = require("./vg-controls");
var vg_controls_hidden_1 = require("./../core/services/vg-controls-hidden");
var vg_api_1 = require("../core/services/vg-api");
var Observable_1 = require("rxjs/Observable");
require("rxjs/add/observable/fromEvent");
var vg_states_1 = require("../core/states/vg-states");
describe('Controls Bar', function () {
    var controls;
    var ref;
    var api;
    var hidden;
    beforeEach(function () {
        jasmine.clock().uninstall();
        jasmine.clock().install();
        api = new vg_api_1.VgAPI();
        hidden = new vg_controls_hidden_1.VgControlsHidden();
        ref = {
            nativeElement: {
                getAttribute: function (name) {
                    return name;
                }
            }
        };
        controls = new vg_controls_1.VgControls(api, ref, hidden);
    });
    afterEach(function () {
        jasmine.clock().uninstall();
    });
    it('Should have been defined', function () {
        expect(controls).toBeTruthy();
    });
    it('Should listen for mouseenter and mouseleave events', function () {
        spyOn(Observable_1.Observable, 'fromEvent').and.callThrough();
        var vgElem = document.createElement('vg-player');
        api.registerElement(vgElem);
        controls.ngOnInit();
        expect(Observable_1.Observable.fromEvent).toHaveBeenCalledWith(api.videogularElement, 'mousemove');
        expect(Observable_1.Observable.fromEvent).toHaveBeenCalledWith(api.videogularElement, 'touchstart');
    });
    it('Should hide controls after view init', function () {
        spyOn(controls, 'hide').and.callFake(function () { });
        controls.vgAutohide = true;
        controls.ngAfterViewInit();
        expect(controls.hide).toHaveBeenCalled();
    });
    it('Should show controls after view init', function () {
        spyOn(controls, 'show').and.callFake(function () { });
        controls.vgAutohide = false;
        controls.ngAfterViewInit();
        expect(controls.show).toHaveBeenCalled();
    });
    it('Should show controls', function () {
        spyOn(window, 'clearTimeout').and.callFake(function () { });
        spyOn(hidden, 'state').and.callFake(function () { });
        controls.show();
        expect(window.clearTimeout).toHaveBeenCalled();
        expect(controls.hideControls).toBe(false);
        expect(hidden.state).toHaveBeenCalledWith(false);
    });
    it('Should hide controls when is playing', function () {
        spyOn(hidden, 'state').and.callFake(function () { });
        controls.vgAutohide = true;
        api.medias = [{ state: vg_states_1.VgStates.VG_PLAYING }];
        controls.hide();
        jasmine.clock().tick(3100);
        expect(controls.hideControls).toBe(true);
        expect(hidden.state).toHaveBeenCalledWith(true);
    });
    it('Should not hide controls if player is paused', function () {
        controls.hideControls = false;
        controls.vgAutohide = false;
        controls.vgAutohide = true;
        api.medias = [{ state: vg_states_1.VgStates.VG_PAUSED }];
        controls.hide();
        jasmine.clock().tick(3100);
        expect(controls.hideControls).toBe(false);
    });
    it('Should not hide controls if autohide is false', function () {
        controls.hideControls = false;
        controls.vgAutohide = false;
        controls.hide();
        jasmine.clock().tick(3100);
        expect(controls.hideControls).toBe(false);
    });
    it('Should start hiding controls if media is playing', function () {
        spyOn(controls, 'hide').and.callFake(function () { });
        controls.vgAutohide = true;
        controls.onPlay();
        expect(controls.hide).toHaveBeenCalled();
    });
    it('Should show controls if media is paused', function () {
        spyOn(hidden, 'state').and.callFake(function () { });
        controls.vgAutohide = true;
        controls.onPause();
        expect(controls.hideControls).toBe(false);
        expect(hidden.state).toHaveBeenCalledWith(false);
    });
});

//# sourceMappingURL=data:application/json;base64,