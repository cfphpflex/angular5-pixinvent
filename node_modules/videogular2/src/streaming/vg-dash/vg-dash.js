"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var vg_api_1 = require("../../core/services/vg-api");
var VgDASH = (function () {
    function VgDASH(ref, API) {
        this.ref = ref;
        this.API = API;
        this.onGetBitrates = new core_1.EventEmitter();
        this.subscriptions = [];
    }
    VgDASH.prototype.ngOnInit = function () {
        var _this = this;
        if (this.API.isPlayerReady) {
            this.onPlayerReady();
        }
        else {
            this.subscriptions.push(this.API.playerReadyEvent.subscribe(function () { return _this.onPlayerReady(); }));
        }
    };
    VgDASH.prototype.onPlayerReady = function () {
        this.vgFor = this.ref.nativeElement.getAttribute('vgFor');
        this.target = this.API.getMediaById(this.vgFor);
        this.createPlayer();
    };
    VgDASH.prototype.ngOnChanges = function (changes) {
        if (changes['vgDash'] && changes['vgDash'].currentValue) {
            this.createPlayer();
        }
        else {
            this.destroyPlayer();
        }
    };
    VgDASH.prototype.createPlayer = function () {
        var _this = this;
        if (this.dash) {
            this.destroyPlayer();
        }
        // It's a DASH source
        if (this.vgDash && ((this.vgDash.indexOf('.mpd') > -1) ||
            (this.vgDash.indexOf('mpd-time-csf') > -1))) {
            var drmOptions = void 0;
            if (this.vgDRMLicenseServer) {
                drmOptions = this.vgDRMLicenseServer;
                if (this.vgDRMToken) {
                    for (var drmServer in drmOptions) {
                        drmOptions[drmServer].httpRequestHeaders = { Authorization: this.vgDRMToken };
                    }
                }
            }
            this.dash = dashjs.MediaPlayer().create();
            this.dash.getDebug().setLogToBrowserConsole(false);
            this.dash.initialize(this.ref.nativeElement);
            this.dash.setAutoPlay(false);
            this.dash.on(dashjs.MediaPlayer.events.STREAM_INITIALIZED, function () {
                var audioList = _this.dash.getBitrateInfoListFor('audio');
                var videoList = _this.dash.getBitrateInfoListFor('video');
                if (audioList.length > 1) {
                    audioList.forEach(function (item) { return item.qualityIndex = ++item.qualityIndex; });
                    audioList.unshift({
                        qualityIndex: 0,
                        width: 0,
                        height: 0,
                        bitrate: 0,
                        mediaType: 'video',
                        label: 'AUTO'
                    });
                    _this.onGetBitrates.emit(audioList);
                }
                if (videoList.length > 1) {
                    videoList.forEach(function (item) { return item.qualityIndex = ++item.qualityIndex; });
                    videoList.unshift({
                        qualityIndex: 0,
                        width: 0,
                        height: 0,
                        bitrate: 0,
                        mediaType: 'video',
                        label: 'AUTO'
                    });
                    _this.onGetBitrates.emit(videoList);
                }
            });
            if (drmOptions) {
                this.dash.setProtectionData(drmOptions);
            }
            this.dash.attachSource(this.vgDash);
        }
        else {
            if (this.target) {
                this.target.pause();
                this.target.seekTime(0);
                this.ref.nativeElement.src = this.vgDash;
            }
        }
    };
    VgDASH.prototype.setBitrate = function (bitrate) {
        if (this.dash) {
            if (bitrate.qualityIndex > 0) {
                if (this.dash.getAutoSwitchQualityFor(bitrate.mediaType)) {
                    this.dash.setAutoSwitchQualityFor(bitrate.mediaType, false);
                }
                var nextIndex = bitrate.qualityIndex - 1;
                this.dash.setQualityFor(bitrate.mediaType, nextIndex);
            }
            else {
                this.dash.setAutoSwitchQualityFor(bitrate.mediaType, true);
            }
        }
    };
    VgDASH.prototype.destroyPlayer = function () {
        if (this.dash) {
            this.dash.reset();
            this.dash = null;
        }
    };
    VgDASH.prototype.ngOnDestroy = function () {
        this.subscriptions.forEach(function (s) { return s.unsubscribe(); });
        this.destroyPlayer();
    };
    VgDASH.decorators = [
        { type: core_1.Directive, args: [{
                    selector: '[vgDash]',
                    exportAs: 'vgDash'
                },] },
    ];
    /** @nocollapse */
    VgDASH.ctorParameters = function () { return [
        { type: core_1.ElementRef, },
        { type: vg_api_1.VgAPI, },
    ]; };
    VgDASH.propDecorators = {
        "vgDash": [{ type: core_1.Input },],
        "vgDRMToken": [{ type: core_1.Input },],
        "vgDRMLicenseServer": [{ type: core_1.Input },],
        "onGetBitrates": [{ type: core_1.Output },],
    };
    return VgDASH;
}());
exports.VgDASH = VgDASH;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmctZGFzaC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInZnLWRhc2gudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxzQ0FVdUI7QUFDdkIscURBQW1EOztJQXdCL0MsZ0JBQW9CLEdBQWMsRUFBUyxHQUFTO1FBQWhDLFFBQUcsR0FBSCxHQUFHLENBQVc7UUFBUyxRQUFHLEdBQUgsR0FBRyxDQUFNOzZCQVJLLElBQUksbUJBQVksRUFBRTs2QkFNM0MsRUFBRTtLQUVzQjtJQUV4RCx5QkFBUSxHQUFSO1FBQUEsaUJBT0M7UUFORyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUM7WUFDekIsSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDO1NBQ3hCO1FBQ0QsSUFBSSxDQUFDLENBQUM7WUFDRixJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLGdCQUFnQixDQUFDLFNBQVMsQ0FBQyxjQUFNLE9BQUEsS0FBSSxDQUFDLGFBQWEsRUFBRSxFQUFwQixDQUFvQixDQUFDLENBQUMsQ0FBQztTQUM1RjtLQUNKO0lBRUQsOEJBQWEsR0FBYjtRQUNJLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQzFELElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ2hELElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQztLQUN2QjtJQUVELDRCQUFXLEdBQVgsVUFBWSxPQUFxQjtRQUM3QixFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLElBQUksT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUM7WUFDdEQsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDO1NB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QyxDQUFDO2lCQUMvRDtnQkFFRCxJQUFNLFNBQVMsR0FBRyxPQUFPLENBQUMsWUFBWSxHQUFHLENBQUMsQ0FBQztnQkFDM0MsSUFBSSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLFNBQVMsRUFBRSxTQUFTLENBQUMsQ0FBQzthQUN6RDtZQUFDLElBQUksQ0FBQyxDQUFDO2dCQUNKLElBQUksQ0FBQyxJQUFJLENBQUMsdUJBQXVCLENBQUMsT0FBTyxDQUFDLFNBQVMsRUFBRSxJQUFJLENBQUMsQ0FBQzthQUM5RDtTQUNKO0tBQ0o7SUFFRCw4QkFBYSxHQUFiO1FBQ0ksRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7WUFDWixJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO1lBQ2xCLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO1NBQ3BCO0tBQ0o7SUFFRCw0QkFBVyxHQUFYO1FBQ0ksSUFBSSxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsVUFBQSxDQUFDLElBQUksT0FBQSxDQUFDLENBQUMsV0FBVyxFQUFFLEVBQWYsQ0FBZSxDQUFDLENBQUM7UUFDakQsSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDO0tBQ3hCOztnQkEvSUosZ0JBQVMsU0FBQztvQkFDUCxRQUFRLEVBQUUsVUFBVTtvQkFDcEIsUUFBUSxFQUFFLFFBQVE7aUJBQ3JCOzs7O2dCQW5CRyxpQkFBVTtnQkFTTCxjQUFLOzs7MkJBWVQsWUFBSzsrQkFDTCxZQUFLO3VDQUNMLFlBQUs7a0NBRUwsYUFBTTs7aUJBM0JYOztBQXNCYSx3QkFBTSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gICAgRGlyZWN0aXZlLFxuICAgIEVsZW1lbnRSZWYsXG4gICAgSW5wdXQsXG4gICAgU2ltcGxlQ2hhbmdlcyxcbiAgICBPbkNoYW5nZXMsXG4gICAgT25EZXN0cm95LFxuICAgIE9uSW5pdCxcbiAgICBPdXRwdXQsXG4gICAgRXZlbnRFbWl0dGVyXG59IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5pbXBvcnQgeyBWZ0FQSSB9IGZyb20gJy4uLy4uL2NvcmUvc2VydmljZXMvdmctYXBpJztcbmltcG9ydCB7IFN1YnNjcmlwdGlvbiB9IGZyb20gJ3J4anMvU3Vic2NyaXB0aW9uJztcbmltcG9ydCB7IElEUk1MaWNlbnNlU2VydmVyIH0gZnJvbSAnLi4vc3RyZWFtaW5nJztcbmltcG9ydCB7IEJpdHJhdGVPcHRpb24gfSBmcm9tICcuLi8uLi9jb3JlL2NvcmUnO1xuXG5kZWNsYXJlIGxldCBkYXNoanM7XG5cbkBEaXJlY3RpdmUoe1xuICAgIHNlbGVjdG9yOiAnW3ZnRGFzaF0nLFxuICAgIGV4cG9ydEFzOiAndmdEYXNoJ1xufSlcbmV4cG9ydCBjbGFzcyBWZ0RBU0ggaW1wbGVtZW50cyBPbkluaXQsIE9uQ2hhbmdlcywgT25EZXN0cm95IHtcbiAgICBASW5wdXQoKSB2Z0Rhc2g6c3RyaW5nO1xuICAgIEBJbnB1dCgpIHZnRFJNVG9rZW46c3RyaW5nO1xuICAgIEBJbnB1dCgpIHZnRFJNTGljZW5zZVNlcnZlcjpJRFJNTGljZW5zZVNlcnZlcjtcblxuICAgIEBPdXRwdXQoKSBvbkdldEJpdHJhdGVzOiBFdmVudEVtaXR0ZXI8Qml0cmF0ZU9wdGlvbltdPiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcblxuICAgIHZnRm9yOiBzdHJpbmc7XG4gICAgdGFyZ2V0OiBhbnk7XG4gICAgZGFzaDphbnk7XG5cbiAgICBzdWJzY3JpcHRpb25zOiBTdWJzY3JpcHRpb25bXSA9IFtdO1xuXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSByZWY6RWxlbWVudFJlZiwgcHVibGljIEFQSTpWZ0FQSSkge31cblxuICAgIG5nT25Jbml0KCkge1xuICAgICAgICBpZiAodGhpcy5BUEkuaXNQbGF5ZXJSZWFkeSkge1xuICAgICAgICAgICAgdGhpcy5vblBsYXllclJlYWR5KCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnN1YnNjcmlwdGlvbnMucHVzaCh0aGlzLkFQSS5wbGF5ZXJSZWFkeUV2ZW50LnN1YnNjcmliZSgoKSA9PiB0aGlzLm9uUGxheWVyUmVhZHkoKSkpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgb25QbGF5ZXJSZWFkeSgpIHtcbiAgICAgICAgdGhpcy52Z0ZvciA9IHRoaXMucmVmLm5hdGl2ZUVsZW1lbnQuZ2V0QXR0cmlidXRlKCd2Z0ZvcicpO1xuICAgICAgICB0aGlzLnRhcmdldCA9IHRoaXMuQVBJLmdldE1lZGlhQnlJZCh0aGlzLnZnRm9yKTtcbiAgICAgICAgdGhpcy5jcmVhdGVQbGF5ZXIoKTtcbiAgICB9XG5cbiAgICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOlNpbXBsZUNoYW5nZXMpIHtcbiAgICAgICAgaWYgKGNoYW5nZXNbJ3ZnRGFzaCddICYmIGNoYW5nZXNbJ3ZnRGFzaCddLmN1cnJlbnRWYWx1ZSkge1xuICAgICAgICAgICAgdGhpcy5jcmVhdGVQbGF5ZXIoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuZGVzdHJveVBsYXllcigpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgY3JlYXRlUGxheWVyKCkge1xuICAgICAgICBpZiAodGhpcy5kYXNoKSB7XG4gICAgICAgICAgICB0aGlzLmRlc3Ryb3lQbGF5ZXIoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEl0J3MgYSBEQVNIIHNvdXJjZVxuICAgICAgICBpZiAodGhpcy52Z0Rhc2ggJiYgKFxuICAgICAgICAgICAgKHRoaXMudmdEYXNoLmluZGV4T2YoJy5tcGQnKSA+IC0xKSB8fFxuICAgICAgICAgICAgKHRoaXMudmdEYXNoLmluZGV4T2YoJ21wZC10aW1lLWNzZicpID4gLTEpKVxuICAgICAgICApIHtcbiAgICAgICAgICAgIGxldCBkcm1PcHRpb25zO1xuXG4gICAgICAgICAgICBpZiAodGhpcy52Z0RSTUxpY2Vuc2VTZXJ2ZXIpIHtcbiAgICAgICAgICAgICAgICBkcm1PcHRpb25zID0gdGhpcy52Z0RSTUxpY2Vuc2VTZXJ2ZXI7XG5cbiAgICAgICAgICAgICAgICBpZiAodGhpcy52Z0RSTVRva2VuKSB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGRybVNlcnZlciBpbiBkcm1PcHRpb25zKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkcm1PcHRpb25zW2RybVNlcnZlcl0uaHR0cFJlcXVlc3RIZWFkZXJzID0geyBBdXRob3JpemF0aW9uOiB0aGlzLnZnRFJNVG9rZW4gfTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5kYXNoID0gZGFzaGpzLk1lZGlhUGxheWVyKCkuY3JlYXRlKCk7XG4gICAgICAgICAgICB0aGlzLmRhc2guZ2V0RGVidWcoKS5zZXRMb2dUb0Jyb3dzZXJDb25zb2xlKGZhbHNlKTtcbiAgICAgICAgICAgIHRoaXMuZGFzaC5pbml0aWFsaXplKHRoaXMucmVmLm5hdGl2ZUVsZW1lbnQpO1xuICAgICAgICAgICAgdGhpcy5kYXNoLnNldEF1dG9QbGF5KGZhbHNlKTtcblxuICAgICAgICAgICAgdGhpcy5kYXNoLm9uKGRhc2hqcy5NZWRpYVBsYXllci5ldmVudHMuU1RSRUFNX0lOSVRJQUxJWkVELCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgYXVkaW9MaXN0ID0gdGhpcy5kYXNoLmdldEJpdHJhdGVJbmZvTGlzdEZvcignYXVkaW8nKTtcbiAgICAgICAgICAgICAgICBjb25zdCB2aWRlb0xpc3QgPSB0aGlzLmRhc2guZ2V0Qml0cmF0ZUluZm9MaXN0Rm9yKCd2aWRlbycpO1xuXG4gICAgICAgICAgICAgICAgaWYgKGF1ZGlvTGlzdC5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICAgICAgICAgIGF1ZGlvTGlzdC5mb3JFYWNoKGl0ZW0gPT4gaXRlbS5xdWFsaXR5SW5kZXggPSArK2l0ZW0ucXVhbGl0eUluZGV4KTtcbiAgICAgICAgICAgICAgICAgICAgYXVkaW9MaXN0LnVuc2hpZnQoe1xuICAgICAgICAgICAgICAgICAgICAgICAgcXVhbGl0eUluZGV4OiAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICBiaXRyYXRlOiAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgbWVkaWFUeXBlOiAndmlkZW8nLFxuICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw6ICdBVVRPJ1xuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICB0aGlzLm9uR2V0Qml0cmF0ZXMuZW1pdChhdWRpb0xpc3QpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmICh2aWRlb0xpc3QubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgICAgICAgICB2aWRlb0xpc3QuZm9yRWFjaChpdGVtID0+IGl0ZW0ucXVhbGl0eUluZGV4ID0gKytpdGVtLnF1YWxpdHlJbmRleCk7XG4gICAgICAgICAgICAgICAgICAgIHZpZGVvTGlzdC51bnNoaWZ0KHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHF1YWxpdHlJbmRleDogMCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgYml0cmF0ZTogMCxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lZGlhVHlwZTogJ3ZpZGVvJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsOiAnQVVUTydcbiAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vbkdldEJpdHJhdGVzLmVtaXQodmlkZW9MaXN0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgaWYgKGRybU9wdGlvbnMpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmRhc2guc2V0UHJvdGVjdGlvbkRhdGEoZHJtT3B0aW9ucyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuZGFzaC5hdHRhY2hTb3VyY2UodGhpcy52Z0Rhc2gpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaWYgKHRoaXMudGFyZ2V0KSB7XG4gICAgICAgICAgICAgICAgdGhpcy50YXJnZXQucGF1c2UoKTtcbiAgICAgICAgICAgICAgICB0aGlzLnRhcmdldC5zZWVrVGltZSgwKTtcbiAgICAgICAgICAgICAgICB0aGlzLnJlZi5uYXRpdmVFbGVtZW50LnNyYyA9IHRoaXMudmdEYXNoO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgc2V0Qml0cmF0ZShiaXRyYXRlOiBCaXRyYXRlT3B0aW9uKSB7XG4gICAgICAgIGlmICh0aGlzLmRhc2gpIHtcbiAgICAgICAgICAgIGlmIChiaXRyYXRlLnF1YWxpdHlJbmRleCA+IDApIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5kYXNoLmdldEF1dG9Td2l0Y2hRdWFsaXR5Rm9yKGJpdHJhdGUubWVkaWFUeXBlKSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmRhc2guc2V0QXV0b1N3aXRjaFF1YWxpdHlGb3IoYml0cmF0ZS5tZWRpYVR5cGUsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBjb25zdCBuZXh0SW5kZXggPSBiaXRyYXRlLnF1YWxpdHlJbmRleCAtIDE7XG4gICAgICAgICAgICAgICAgdGhpcy5kYXNoLnNldFF1YWxpdHlGb3IoYml0cmF0ZS5tZWRpYVR5cGUsIG5leHRJbmRleCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuZGFzaC5zZXRBdXRvU3dpdGNoUXVhbGl0eUZvcihiaXRyYXRlLm1lZGlhVHlwZSwgdHJ1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBkZXN0cm95UGxheWVyKCkge1xuICAgICAgICBpZiAodGhpcy5kYXNoKSB7XG4gICAgICAgICAgICB0aGlzLmRhc2gucmVzZXQoKTtcbiAgICAgICAgICAgIHRoaXMuZGFzaCA9IG51bGw7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBuZ09uRGVzdHJveSgpIHtcbiAgICAgICAgdGhpcy5zdWJzY3JpcHRpb25zLmZvckVhY2gocyA9PiBzLnVuc3Vic2NyaWJlKCkpO1xuICAgICAgICB0aGlzLmRlc3Ryb3lQbGF5ZXIoKTtcbiAgICB9XG59XG4iXX0=