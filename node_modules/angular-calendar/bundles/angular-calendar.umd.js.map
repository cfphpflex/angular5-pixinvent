{
  "version": 3,
  "file": "angular-calendar.umd.js",
  "sources": [
    "ng://angular-calendar/out/modules/day/calendar-day-view.component.ts",
    "ng://angular-calendar/out/modules/week/calendar-week.module.ts",
    "ng://angular-calendar/out/modules/week/calendar-week-view-event.component.ts",
    "ng://angular-calendar/out/modules/week/calendar-week-view-header.component.ts",
    "ng://angular-calendar/out/modules/week/calendar-week-view.component.ts",
    "ng://angular-calendar/out/modules/common/calendar-resize-helper.provider.ts",
    "ng://angular-calendar/out/modules/common/calendar-drag-helper.provider.ts",
    "ng://angular-calendar/out/modules/month/calendar-month.module.ts",
    "ng://angular-calendar/out/modules/month/calendar-open-day-events.component.ts",
    "ng://angular-calendar/out/modules/month/calendar-month-cell.component.ts",
    "ng://angular-calendar/out/modules/month/calendar-month-view-header.component.ts",
    "ng://angular-calendar/out/modules/month/calendar-month-view.component.ts",
    "ng://angular-calendar/out/modules/common/calendar-common.module.ts",
    "ng://angular-calendar/out/modules/common/calendar-native-date-formatter.provider.ts",
    "ng://angular-calendar/out/modules/common/calendar-moment-date-formatter.provider.ts",
    "ng://angular-calendar/out/modules/common/calendar-utils.provider.ts",
    "ng://angular-calendar/out/modules/common/click.directive.ts",
    "ng://angular-calendar/out/modules/common/calendar-event-title.pipe.ts",
    "ng://angular-calendar/out/modules/common/calendar-event-title-formatter.provider.ts",
    "ng://angular-calendar/out/modules/common/calendar-date.pipe.ts",
    "ng://angular-calendar/out/modules/common/calendar-date-formatter.provider.ts",
    "ng://angular-calendar/out/modules/common/calendar-angular-date-formatter.provider.ts",
    "ng://angular-calendar/out/modules/common/calendar-today.directive.ts",
    "ng://angular-calendar/out/modules/common/calendar-next-view.directive.ts",
    "ng://angular-calendar/out/modules/common/calendar-previous-view.directive.ts",
    "ng://angular-calendar/out/modules/common/calendar-tooltip.directive.ts",
    "ng://angular-calendar/out/modules/common/calendar-event-title.component.ts",
    "ng://angular-calendar/out/modules/common/calendar-event-actions.component.ts",
    "ng://angular-calendar/out/modules/common/util.ts",
    "ng://angular-calendar/node_modules/tslib/tslib.es6.js"
  ],
  "sourcesContent": [
    "import {\n  Component,\n  Input,\n  OnChanges,\n  Output,\n  EventEmitter,\n  ChangeDetectorRef,\n  LOCALE_ID,\n  Inject,\n  OnInit,\n  OnDestroy,\n  TemplateRef\n} from '@angular/core';\nimport {\n  CalendarEvent,\n  DayView,\n  DayViewHour,\n  DayViewHourSegment,\n  DayViewEvent,\n  ViewPeriod\n} from 'calendar-utils';\nimport { Subject } from 'rxjs/Subject';\nimport { Subscription } from 'rxjs/Subscription';\nimport { ResizeEvent } from 'angular-resizable-element';\nimport addMinutes from 'date-fns/add_minutes/index';\nimport { CalendarDragHelper } from '../common/calendar-drag-helper.provider';\nimport { CalendarResizeHelper } from '../common/calendar-resize-helper.provider';\nimport { CalendarEventTimesChangedEvent } from '../common/calendar-event-times-changed-event.interface';\nimport { CalendarUtils } from '../common/calendar-utils.provider';\nimport { validateEvents, trackByEventId } from '../common/util';\n\nexport interface CalendarDayViewBeforeRenderEvent {\n  body: {\n    hourGrid: DayViewHour[];\n  };\n  period: ViewPeriod;\n}\n\n/**\n * @hidden\n */\nconst MINUTES_IN_HOUR: number = 60;\n\n/**\n * @hidden\n */\nexport interface DayViewEventResize {\n  originalTop: number;\n  originalHeight: number;\n  edge: string;\n}\n\n/**\n * Shows all events on a given day. Example usage:\n *\n * ```typescript\n * <mwl-calendar-day-view\n *  [viewDate]=\"viewDate\"\n *  [events]=\"events\">\n * </mwl-calendar-day-view>\n * ```\n */\n@Component({\n  selector: 'mwl-calendar-day-view',\n  template: `\n    <div class=\"cal-day-view\" #dayViewContainer>\n      <mwl-calendar-all-day-event\n        *ngFor=\"let event of view.allDayEvents; trackBy:trackByEventId\"\n        [event]=\"event\"\n        [customTemplate]=\"allDayEventTemplate\"\n        [eventTitleTemplate]=\"eventTitleTemplate\"\n        (eventClicked)=\"eventClicked.emit({event: event})\">\n      </mwl-calendar-all-day-event>\n      <div class=\"cal-hour-rows\">\n        <div class=\"cal-events\">\n          <div\n            #event\n            *ngFor=\"let dayEvent of view?.events; trackBy:trackByDayEvent\"\n            class=\"cal-event-container\"\n            [class.cal-draggable]=\"dayEvent.event.draggable\"\n            [class.cal-starts-within-day]=\"!dayEvent.startsBeforeDay\"\n            [class.cal-ends-within-day]=\"!dayEvent.endsAfterDay\"\n            [ngClass]=\"dayEvent.event.cssClass\"\n            mwlResizable\n            [resizeEdges]=\"{top: dayEvent.event?.resizable?.beforeStart, bottom: dayEvent.event?.resizable?.afterEnd}\"\n            [resizeSnapGrid]=\"{top: eventSnapSize, bottom: eventSnapSize}\"\n            [validateResize]=\"validateResize\"\n            (resizeStart)=\"resizeStarted(dayEvent, $event, dayViewContainer)\"\n            (resizing)=\"resizing(dayEvent, $event)\"\n            (resizeEnd)=\"resizeEnded(dayEvent)\"\n            mwlDraggable\n            [dragAxis]=\"{x: false, y: dayEvent.event.draggable && currentResizes.size === 0}\"\n            [dragSnapGrid]=\"{y: eventSnapSize}\"\n            [validateDrag]=\"validateDrag\"\n            (dragPointerDown)=\"dragStart(event, dayViewContainer)\"\n            (dragEnd)=\"eventDragged(dayEvent, $event.y)\"\n            [style.marginTop.px]=\"dayEvent.top\"\n            [style.height.px]=\"dayEvent.height\"\n            [style.marginLeft.px]=\"dayEvent.left + 70\"\n            [style.width.px]=\"dayEvent.width - 1\">\n            <mwl-calendar-day-view-event\n              [dayEvent]=\"dayEvent\"\n              [tooltipPlacement]=\"tooltipPlacement\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              [tooltipAppendToBody]=\"tooltipAppendToBody\"\n              [customTemplate]=\"eventTemplate\"\n              [eventTitleTemplate]=\"eventTitleTemplate\"\n              (eventClicked)=\"eventClicked.emit({event: dayEvent.event})\">\n            </mwl-calendar-day-view-event>\n          </div>\n        </div>\n        <div class=\"cal-hour\" *ngFor=\"let hour of hours; trackBy:trackByHour\" [style.minWidth.px]=\"view?.width + 70\">\n          <mwl-calendar-day-view-hour-segment\n            *ngFor=\"let segment of hour.segments; trackBy:trackByHourSegment\"\n            [style.height.px]=\"hourSegmentHeight\"\n            [segment]=\"segment\"\n            [segmentHeight]=\"hourSegmentHeight\"\n            [locale]=\"locale\"\n            [customTemplate]=\"hourSegmentTemplate\"\n            (click)=\"hourSegmentClicked.emit({date: segment.date})\"\n            [class.cal-drag-over]=\"segment.dragOver\"\n            mwlDroppable\n            (dragEnter)=\"segment.dragOver = true\"\n            (dragLeave)=\"segment.dragOver = false\"\n            (drop)=\"segment.dragOver = false; eventDropped($event, segment)\">\n          </mwl-calendar-day-view-hour-segment>\n        </div>\n      </div>\n    </div>\n  `\n})\nexport class CalendarDayViewComponent implements OnChanges, OnInit, OnDestroy {\n  /**\n   * The current view date\n   */\n  @Input() viewDate: Date;\n\n  /**\n   * An array of events to display on view\n   * The schema is available here: https://github.com/mattlewis92/calendar-utils/blob/c51689985f59a271940e30bc4e2c4e1fee3fcb5c/src/calendarUtils.ts#L49-L63\n   */\n  @Input() events: CalendarEvent[] = [];\n\n  /**\n   * The number of segments in an hour. Must be <= 6\n   */\n  @Input() hourSegments: number = 2;\n\n  /**\n   * The height in pixels of each hour segment\n   */\n  @Input() hourSegmentHeight: number = 30;\n\n  /**\n   * The day start hours in 24 hour time. Must be 0-23\n   */\n  @Input() dayStartHour: number = 0;\n\n  /**\n   * The day start minutes. Must be 0-59\n   */\n  @Input() dayStartMinute: number = 0;\n\n  /**\n   * The day end hours in 24 hour time. Must be 0-23\n   */\n  @Input() dayEndHour: number = 23;\n\n  /**\n   * The day end minutes. Must be 0-59\n   */\n  @Input() dayEndMinute: number = 59;\n\n  /**\n   * The width in pixels of each event on the view\n   */\n  @Input() eventWidth: number = 150;\n\n  /**\n   * An observable that when emitted on will re-render the current view\n   */\n  @Input() refresh: Subject<any>;\n\n  /**\n   * The locale used to format dates\n   */\n  @Input() locale: string;\n\n  /**\n   * The grid size to snap resizing and dragging of events to\n   */\n  @Input() eventSnapSize: number = this.hourSegmentHeight;\n\n  /**\n   * The placement of the event tooltip\n   */\n  @Input() tooltipPlacement: string = 'top';\n\n  /**\n   * A custom template to use for the event tooltips\n   */\n  @Input() tooltipTemplate: TemplateRef<any>;\n\n  /**\n   * Whether to append tooltips to the body or next to the trigger element\n   */\n  @Input() tooltipAppendToBody: boolean = true;\n\n  /**\n   * A custom template to use to replace the hour segment\n   */\n  @Input() hourSegmentTemplate: TemplateRef<any>;\n\n  /**\n   * A custom template to use for all day events\n   */\n  @Input() allDayEventTemplate: TemplateRef<any>;\n\n  /**\n   * A custom template to use for day view events\n   */\n  @Input() eventTemplate: TemplateRef<any>;\n\n  /**\n   * A custom template to use for event titles\n   */\n  @Input() eventTitleTemplate: TemplateRef<any>;\n\n  /**\n   * Called when an event title is clicked\n   */\n  @Output()\n  eventClicked = new EventEmitter<{\n    event: CalendarEvent;\n  }>();\n\n  /**\n   * Called when an hour segment is clicked\n   */\n  @Output()\n  hourSegmentClicked = new EventEmitter<{\n    date: Date;\n  }>();\n\n  /**\n   * Called when an event is resized or dragged and dropped\n   */\n  @Output()\n  eventTimesChanged = new EventEmitter<CalendarEventTimesChangedEvent>();\n\n  /**\n   * An output that will be called before the view is rendered for the current day.\n   * If you add the `cssClass` property to an hour grid segment it will add that class to the hour segment in the template\n   */\n  @Output()\n  beforeViewRender = new EventEmitter<CalendarDayViewBeforeRenderEvent>();\n\n  /**\n   * @hidden\n   */\n  hours: DayViewHour[] = [];\n\n  /**\n   * @hidden\n   */\n  view: DayView;\n\n  /**\n   * @hidden\n   */\n  width: number = 0;\n\n  /**\n   * @hidden\n   */\n  refreshSubscription: Subscription;\n\n  /**\n   * @hidden\n   */\n  currentResizes: Map<DayViewEvent, DayViewEventResize> = new Map();\n\n  /**\n   * @hidden\n   */\n  validateDrag: (args: any) => boolean;\n\n  /**\n   * @hidden\n   */\n  validateResize: (args: any) => boolean;\n\n  /**\n   * @hidden\n   */\n  trackByEventId = trackByEventId;\n\n  /**\n   * @hidden\n   */\n  trackByDayEvent = (index: number, dayEvent: DayViewEvent) =>\n    dayEvent.event.id ? dayEvent.event.id : dayEvent.event;\n\n  /**\n   * @hidden\n   */\n  trackByHour = (index: number, hour: DayViewHour) =>\n    hour.segments[0].date.toISOString();\n\n  /**\n   * @hidden\n   */\n  trackByHourSegment = (index: number, segment: DayViewHourSegment) =>\n    segment.date.toISOString();\n\n  /**\n   * @hidden\n   */\n  constructor(\n    private cdr: ChangeDetectorRef,\n    private utils: CalendarUtils,\n    @Inject(LOCALE_ID) locale: string\n  ) {\n    this.locale = locale;\n  }\n\n  /**\n   * @hidden\n   */\n  ngOnInit(): void {\n    if (this.refresh) {\n      this.refreshSubscription = this.refresh.subscribe(() => {\n        this.refreshAll();\n        this.cdr.markForCheck();\n      });\n    }\n  }\n\n  /**\n   * @hidden\n   */\n  ngOnDestroy(): void {\n    if (this.refreshSubscription) {\n      this.refreshSubscription.unsubscribe();\n    }\n  }\n\n  /**\n   * @hidden\n   */\n  ngOnChanges(changes: any): void {\n    if (\n      changes.viewDate ||\n      changes.dayStartHour ||\n      changes.dayStartMinute ||\n      changes.dayEndHour ||\n      changes.dayEndMinute ||\n      changes.hourSegments\n    ) {\n      this.refreshHourGrid();\n    }\n\n    if (changes.events) {\n      validateEvents(this.events);\n    }\n\n    if (\n      changes.viewDate ||\n      changes.events ||\n      changes.dayStartHour ||\n      changes.dayStartMinute ||\n      changes.dayEndHour ||\n      changes.dayEndMinute ||\n      changes.eventWidth\n    ) {\n      this.refreshView();\n    }\n  }\n\n  eventDropped(\n    dropEvent: { dropData?: { event?: CalendarEvent } },\n    segment: DayViewHourSegment\n  ): void {\n    if (dropEvent.dropData && dropEvent.dropData.event) {\n      this.eventTimesChanged.emit({\n        event: dropEvent.dropData.event,\n        newStart: segment.date\n      });\n    }\n  }\n\n  resizeStarted(\n    event: DayViewEvent,\n    resizeEvent: ResizeEvent,\n    dayViewContainer: HTMLElement\n  ): void {\n    this.currentResizes.set(event, {\n      originalTop: event.top,\n      originalHeight: event.height,\n      edge: typeof resizeEvent.edges.top !== 'undefined' ? 'top' : 'bottom'\n    });\n    const resizeHelper: CalendarResizeHelper = new CalendarResizeHelper(\n      dayViewContainer\n    );\n    this.validateResize = ({ rectangle }) =>\n      resizeHelper.validateResize({ rectangle });\n    this.cdr.markForCheck();\n  }\n\n  resizing(event: DayViewEvent, resizeEvent: ResizeEvent): void {\n    const currentResize: DayViewEventResize = this.currentResizes.get(event);\n    if (resizeEvent.edges.top) {\n      event.top = currentResize.originalTop + +resizeEvent.edges.top;\n      event.height = currentResize.originalHeight - +resizeEvent.edges.top;\n    } else if (resizeEvent.edges.bottom) {\n      event.height = currentResize.originalHeight + +resizeEvent.edges.bottom;\n    }\n  }\n\n  resizeEnded(dayEvent: DayViewEvent): void {\n    const currentResize: DayViewEventResize = this.currentResizes.get(dayEvent);\n\n    let pixelsMoved: number;\n    if (currentResize.edge === 'top') {\n      pixelsMoved = dayEvent.top - currentResize.originalTop;\n    } else {\n      pixelsMoved = dayEvent.height - currentResize.originalHeight;\n    }\n\n    dayEvent.top = currentResize.originalTop;\n    dayEvent.height = currentResize.originalHeight;\n\n    const pixelAmountInMinutes: number =\n      MINUTES_IN_HOUR / (this.hourSegments * this.hourSegmentHeight);\n    const minutesMoved: number = pixelsMoved * pixelAmountInMinutes;\n    let newStart: Date = dayEvent.event.start;\n    let newEnd: Date = dayEvent.event.end;\n    if (currentResize.edge === 'top') {\n      newStart = addMinutes(newStart, minutesMoved);\n    } else if (newEnd) {\n      newEnd = addMinutes(newEnd, minutesMoved);\n    }\n\n    this.eventTimesChanged.emit({ newStart, newEnd, event: dayEvent.event });\n    this.currentResizes.delete(dayEvent);\n  }\n\n  dragStart(event: HTMLElement, dayViewContainer: HTMLElement): void {\n    const dragHelper: CalendarDragHelper = new CalendarDragHelper(\n      dayViewContainer,\n      event\n    );\n    this.validateDrag = ({ x, y }) =>\n      this.currentResizes.size === 0 && dragHelper.validateDrag({ x, y });\n    this.cdr.markForCheck();\n  }\n\n  eventDragged(dayEvent: DayViewEvent, draggedInPixels: number): void {\n    const pixelAmountInMinutes: number =\n      MINUTES_IN_HOUR / (this.hourSegments * this.hourSegmentHeight);\n    const minutesMoved: number = draggedInPixels * pixelAmountInMinutes;\n    const newStart: Date = addMinutes(dayEvent.event.start, minutesMoved);\n    let newEnd: Date;\n    if (dayEvent.event.end) {\n      newEnd = addMinutes(dayEvent.event.end, minutesMoved);\n    }\n    this.eventTimesChanged.emit({ newStart, newEnd, event: dayEvent.event });\n  }\n\n  private refreshHourGrid(): void {\n    this.hours = this.utils.getDayViewHourGrid({\n      viewDate: this.viewDate,\n      hourSegments: this.hourSegments,\n      dayStart: {\n        hour: this.dayStartHour,\n        minute: this.dayStartMinute\n      },\n      dayEnd: {\n        hour: this.dayEndHour,\n        minute: this.dayEndMinute\n      }\n    });\n    this.emitBeforeViewRender();\n  }\n\n  private refreshView(): void {\n    this.view = this.utils.getDayView({\n      events: this.events,\n      viewDate: this.viewDate,\n      hourSegments: this.hourSegments,\n      dayStart: {\n        hour: this.dayStartHour,\n        minute: this.dayStartMinute\n      },\n      dayEnd: {\n        hour: this.dayEndHour,\n        minute: this.dayEndMinute\n      },\n      eventWidth: this.eventWidth,\n      segmentHeight: this.hourSegmentHeight\n    });\n    this.emitBeforeViewRender();\n  }\n\n  private refreshAll(): void {\n    this.refreshHourGrid();\n    this.refreshView();\n  }\n\n  private emitBeforeViewRender(): void {\n    if (this.hours && this.view) {\n      this.beforeViewRender.emit({\n        body: {\n          hourGrid: this.hours\n        },\n        period: this.view.period\n      });\n    }\n  }\n}\n",
    "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ResizableModule } from 'angular-resizable-element';\nimport { DragAndDropModule } from 'angular-draggable-droppable';\nimport { CalendarWeekViewComponent } from './calendar-week-view.component';\nimport { CalendarWeekViewHeaderComponent } from './calendar-week-view-header.component';\nimport { CalendarWeekViewEventComponent } from './calendar-week-view-event.component';\nimport { CalendarCommonModule } from '../common/calendar-common.module';\n\nexport {\n  CalendarWeekViewComponent,\n  CalendarWeekViewBeforeRenderEvent\n} from './calendar-week-view.component';\nexport {\n  WeekViewEvent as CalendarWeekViewEvent,\n  WeekViewEventRow as CalendarWeekViewEventRow,\n  GetWeekViewArgs as CalendarGetWeekViewArgs\n} from 'calendar-utils';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ResizableModule,\n    DragAndDropModule,\n    CalendarCommonModule\n  ],\n  declarations: [\n    CalendarWeekViewComponent,\n    CalendarWeekViewHeaderComponent,\n    CalendarWeekViewEventComponent\n  ],\n  exports: [\n    ResizableModule,\n    DragAndDropModule,\n    CalendarWeekViewComponent,\n    CalendarWeekViewHeaderComponent,\n    CalendarWeekViewEventComponent\n  ]\n})\nexport class CalendarWeekModule {}\n",
    "import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  TemplateRef\n} from '@angular/core';\nimport { WeekViewEvent } from 'calendar-utils';\n\n@Component({\n  selector: 'mwl-calendar-week-view-event',\n  template: `\n    <ng-template\n      #defaultTemplate\n      let-weekEvent=\"weekEvent\"\n      let-tooltipPlacement=\"tooltipPlacement\"\n      let-eventClicked=\"eventClicked\"\n      let-tooltipTemplate=\"tooltipTemplate\"\n      let-tooltipAppendToBody=\"tooltipAppendToBody\">\n      <div\n        class=\"cal-event\"\n        [style.backgroundColor]=\"weekEvent.event.color.secondary\"\n        [mwlCalendarTooltip]=\"weekEvent.event.title | calendarEventTitle:'weekTooltip':weekEvent.event\"\n        [tooltipPlacement]=\"tooltipPlacement\"\n        [tooltipEvent]=\"weekEvent.event\"\n        [tooltipTemplate]=\"tooltipTemplate\"\n        [tooltipAppendToBody]=\"tooltipAppendToBody\">\n        <mwl-calendar-event-actions [event]=\"weekEvent.event\"></mwl-calendar-event-actions>\n        <mwl-calendar-event-title\n          [event]=\"weekEvent.event\"\n          [customTemplate]=\"eventTitleTemplate\"\n          view=\"week\"\n          (mwlClick)=\"eventClicked.emit()\">\n        </mwl-calendar-event-title>\n      </div>\n    </ng-template>\n    <ng-template\n      [ngTemplateOutlet]=\"customTemplate || defaultTemplate\"\n      [ngTemplateOutletContext]=\"{\n        weekEvent: weekEvent,\n        tooltipPlacement: tooltipPlacement,\n        eventClicked: eventClicked,\n        tooltipTemplate: tooltipTemplate,\n        tooltipAppendToBody: tooltipAppendToBody\n      }\">\n    </ng-template>\n  `\n})\nexport class CalendarWeekViewEventComponent {\n  @Input() weekEvent: WeekViewEvent;\n\n  @Input() tooltipPlacement: string;\n\n  @Input() tooltipAppendToBody: boolean;\n\n  @Input() customTemplate: TemplateRef<any>;\n\n  @Input() eventTitleTemplate: TemplateRef<any>;\n\n  @Input() tooltipTemplate: TemplateRef<any>;\n\n  @Output() eventClicked: EventEmitter<any> = new EventEmitter();\n}\n",
    "import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  TemplateRef\n} from '@angular/core';\nimport { CalendarEvent, WeekDay } from 'calendar-utils';\nimport { trackByWeekDayHeaderDate } from '../common/util';\n\n@Component({\n  selector: 'mwl-calendar-week-view-header',\n  template: `\n    <ng-template\n      #defaultTemplate\n      let-days=\"days\"\n      let-locale=\"locale\"\n      let-dayHeaderClicked=\"dayHeaderClicked\"\n      let-eventDropped=\"eventDropped\">\n      <div class=\"cal-day-headers\">\n        <div\n          class=\"cal-header\"\n          *ngFor=\"let day of days; trackBy:trackByWeekDayHeaderDate\"\n          [class.cal-past]=\"day.isPast\"\n          [class.cal-today]=\"day.isToday\"\n          [class.cal-future]=\"day.isFuture\"\n          [class.cal-weekend]=\"day.isWeekend\"\n          [class.cal-drag-over]=\"day.dragOver\"\n          [ngClass]=\"day.cssClass\"\n          (mwlClick)=\"dayHeaderClicked.emit({day: day})\"\n          mwlDroppable\n          (dragEnter)=\"day.dragOver = true\"\n          (dragLeave)=\"day.dragOver = false\"\n          (drop)=\"day.dragOver = false; eventDropped.emit({event: $event.dropData.event, newStart: day.date})\">\n          <b>{{ day.date | calendarDate:'weekViewColumnHeader':locale }}</b><br>\n          <span>{{ day.date | calendarDate:'weekViewColumnSubHeader':locale }}</span>\n        </div>\n      </div>\n    </ng-template>\n    <ng-template\n      [ngTemplateOutlet]=\"customTemplate || defaultTemplate\"\n      [ngTemplateOutletContext]=\"{days: days, locale: locale, dayHeaderClicked: dayHeaderClicked, eventDropped: eventDropped}\">\n    </ng-template>\n  `\n})\nexport class CalendarWeekViewHeaderComponent {\n  @Input() days: WeekDay[];\n\n  @Input() locale: string;\n\n  @Input() customTemplate: TemplateRef<any>;\n\n  @Output()\n  dayHeaderClicked: EventEmitter<{ day: WeekDay }> = new EventEmitter<{\n    day: WeekDay;\n  }>();\n\n  @Output()\n  eventDropped: EventEmitter<{\n    event: CalendarEvent;\n    newStart: Date;\n  }> = new EventEmitter<{ event: CalendarEvent; newStart: Date }>();\n\n  trackByWeekDayHeaderDate = trackByWeekDayHeaderDate;\n}\n",
    "import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  ChangeDetectorRef,\n  OnChanges,\n  OnInit,\n  OnDestroy,\n  LOCALE_ID,\n  Inject,\n  TemplateRef\n} from '@angular/core';\nimport { Subject } from 'rxjs/Subject';\nimport { Subscription } from 'rxjs/Subscription';\nimport {\n  WeekDay,\n  CalendarEvent,\n  WeekViewEvent,\n  WeekView,\n  ViewPeriod\n} from 'calendar-utils';\nimport { ResizeEvent } from 'angular-resizable-element';\nimport addDays from 'date-fns/add_days/index';\nimport { CalendarDragHelper } from '../common/calendar-drag-helper.provider';\nimport { CalendarResizeHelper } from '../common/calendar-resize-helper.provider';\nimport { CalendarEventTimesChangedEvent } from '../common/calendar-event-times-changed-event.interface';\nimport { CalendarUtils } from '../common/calendar-utils.provider';\nimport { validateEvents, trackByIndex } from '../common/util';\n\nexport interface WeekViewEventResize {\n  originalOffset: number;\n  originalSpan: number;\n  edge: string;\n}\n\nexport interface CalendarWeekViewBeforeRenderEvent {\n  header: WeekDay[];\n  period: ViewPeriod;\n}\n\n/**\n * Shows all events on a given week. Example usage:\n *\n * ```typescript\n * <mwl-calendar-week-view\n *  [viewDate]=\"viewDate\"\n *  [events]=\"events\">\n * </mwl-calendar-week-view>\n * ```\n */\n@Component({\n  selector: 'mwl-calendar-week-view',\n  template: `\n    <div class=\"cal-week-view\" #weekViewContainer>\n      <mwl-calendar-week-view-header\n        [days]=\"days\"\n        [locale]=\"locale\"\n        [customTemplate]=\"headerTemplate\"\n        (dayHeaderClicked)=\"dayHeaderClicked.emit($event)\"\n        (eventDropped)=\"eventTimesChanged.emit($event)\">\n      </mwl-calendar-week-view-header>\n      <div *ngFor=\"let eventRow of view.eventRows; trackBy:trackByIndex\" #eventRowContainer class=\"cal-events-row\">\n        <div\n          *ngFor=\"let weekEvent of eventRow.row; trackBy:trackByEventId\"\n          #event\n          class=\"cal-event-container\"\n          [class.cal-draggable]=\"weekEvent.event.draggable\"\n          [class.cal-starts-within-week]=\"!weekEvent.startsBeforeWeek\"\n          [class.cal-ends-within-week]=\"!weekEvent.endsAfterWeek\"\n          [ngClass]=\"weekEvent.event?.cssClass\"\n          [style.width]=\"((100 / days.length) * weekEvent.span) + '%'\"\n          [style.marginLeft]=\"((100 / days.length) * weekEvent.offset) + '%'\"\n          mwlResizable\n          [resizeEdges]=\"{left: weekEvent.event?.resizable?.beforeStart, right: weekEvent.event?.resizable?.afterEnd}\"\n          [resizeSnapGrid]=\"{left: dayColumnWidth, right: dayColumnWidth}\"\n          [validateResize]=\"validateResize\"\n          (resizeStart)=\"resizeStarted(weekViewContainer, weekEvent, $event)\"\n          (resizing)=\"resizing(weekEvent, $event, dayColumnWidth)\"\n          (resizeEnd)=\"resizeEnded(weekEvent)\"\n          mwlDraggable\n          [dragAxis]=\"{x: weekEvent.event.draggable && currentResizes.size === 0, y: false}\"\n          [dragSnapGrid]=\"{x: dayColumnWidth}\"\n          [validateDrag]=\"validateDrag\"\n          (dragPointerDown)=\"dragStart(weekViewContainer, event)\"\n          (dragEnd)=\"eventDragged(weekEvent, $event.x, dayColumnWidth)\">\n          <mwl-calendar-week-view-event\n            [weekEvent]=\"weekEvent\"\n            [tooltipPlacement]=\"tooltipPlacement\"\n            [tooltipTemplate]=\"tooltipTemplate\"\n            [tooltipAppendToBody]=\"tooltipAppendToBody\"\n            [customTemplate]=\"eventTemplate\"\n            [eventTitleTemplate]=\"eventTitleTemplate\"\n            (eventClicked)=\"eventClicked.emit({event: weekEvent.event})\">\n          </mwl-calendar-week-view-event>\n        </div>\n      </div>\n    </div>\n  `\n})\nexport class CalendarWeekViewComponent implements OnChanges, OnInit, OnDestroy {\n  /**\n   * The current view date\n   */\n  @Input() viewDate: Date;\n\n  /**\n   * An array of events to display on view\n   * The schema is available here: https://github.com/mattlewis92/calendar-utils/blob/c51689985f59a271940e30bc4e2c4e1fee3fcb5c/src/calendarUtils.ts#L49-L63\n   */\n  @Input() events: CalendarEvent[] = [];\n\n  /**\n   * An array of day indexes (0 = sunday, 1 = monday etc) that will be hidden on the view\n   */\n  @Input() excludeDays: number[] = [];\n\n  /**\n   * An observable that when emitted on will re-render the current view\n   */\n  @Input() refresh: Subject<any>;\n\n  /**\n   * The locale used to format dates\n   */\n  @Input() locale: string;\n\n  /**\n   * The placement of the event tooltip\n   */\n  @Input() tooltipPlacement: string = 'bottom';\n\n  /**\n   * A custom template to use for the event tooltips\n   */\n  @Input() tooltipTemplate: TemplateRef<any>;\n\n  /**\n   * Whether to append tooltips to the body or next to the trigger element\n   */\n  @Input() tooltipAppendToBody: boolean = true;\n\n  /**\n   * The start number of the week\n   */\n  @Input() weekStartsOn: number;\n\n  /**\n   * A custom template to use to replace the header\n   */\n  @Input() headerTemplate: TemplateRef<any>;\n\n  /**\n   * A custom template to use for week view events\n   */\n  @Input() eventTemplate: TemplateRef<any>;\n\n  /**\n   * A custom template to use for event titles\n   */\n  @Input() eventTitleTemplate: TemplateRef<any>;\n\n  /**\n   * The precision to display events.\n   * `days` will round event start and end dates to the nearest day and `minutes` will not do this rounding\n   */\n  @Input() precision: 'days' | 'minutes' = 'days';\n\n  /**\n   * An array of day indexes (0 = sunday, 1 = monday etc) that indicate which days are weekends\n   */\n  @Input() weekendDays: number[];\n\n  /**\n   * Called when a header week day is clicked. Adding a `cssClass` property on `$event.day` will add that class to the header element\n   */\n  @Output()\n  dayHeaderClicked: EventEmitter<{ day: WeekDay }> = new EventEmitter<{\n    day: WeekDay;\n  }>();\n\n  /**\n   * Called when the event title is clicked\n   */\n  @Output()\n  eventClicked: EventEmitter<{ event: CalendarEvent }> = new EventEmitter<{\n    event: CalendarEvent;\n  }>();\n\n  /**\n   * Called when an event is resized or dragged and dropped\n   */\n  @Output()\n  eventTimesChanged: EventEmitter<\n    CalendarEventTimesChangedEvent\n  > = new EventEmitter<CalendarEventTimesChangedEvent>();\n\n  /**\n   * An output that will be called before the view is rendered for the current week.\n   * If you add the `cssClass` property to a day in the header it will add that class to the cell element in the template\n   */\n  @Output()\n  beforeViewRender = new EventEmitter<CalendarWeekViewBeforeRenderEvent>();\n\n  /**\n   * @hidden\n   */\n  days: WeekDay[];\n\n  /**\n   * @hidden\n   */\n  view: WeekView;\n\n  /**\n   * @hidden\n   */\n  refreshSubscription: Subscription;\n\n  /**\n   * @hidden\n   */\n  currentResizes: Map<WeekViewEvent, WeekViewEventResize> = new Map();\n\n  /**\n   * @hidden\n   */\n  validateDrag: (args: any) => boolean;\n\n  /**\n   * @hidden\n   */\n  validateResize: (args: any) => boolean;\n\n  /**\n   * @hidden\n   */\n  dayColumnWidth: number;\n\n  /**\n   * @hidden\n   */\n  trackByIndex = trackByIndex;\n\n  /**\n   * @hidden\n   */\n  trackByEventId = (index: number, weekEvent: WeekViewEvent) =>\n    weekEvent.event.id ? weekEvent.event.id : weekEvent;\n\n  /**\n   * @hidden\n   */\n  constructor(\n    private cdr: ChangeDetectorRef,\n    private utils: CalendarUtils,\n    @Inject(LOCALE_ID) locale: string\n  ) {\n    this.locale = locale;\n  }\n\n  /**\n   * @hidden\n   */\n  ngOnInit(): void {\n    if (this.refresh) {\n      this.refreshSubscription = this.refresh.subscribe(() => {\n        this.refreshAll();\n        this.cdr.markForCheck();\n      });\n    }\n  }\n\n  /**\n   * @hidden\n   */\n  ngOnChanges(changes: any): void {\n    if (changes.viewDate || changes.excludeDays || changes.weekendDays) {\n      this.refreshHeader();\n    }\n\n    if (changes.events) {\n      validateEvents(this.events);\n    }\n\n    if (changes.events || changes.viewDate || changes.excludeDays) {\n      this.refreshBody();\n    }\n  }\n\n  /**\n   * @hidden\n   */\n  ngOnDestroy(): void {\n    if (this.refreshSubscription) {\n      this.refreshSubscription.unsubscribe();\n    }\n  }\n\n  /**\n   * @hidden\n   */\n  resizeStarted(\n    weekViewContainer: HTMLElement,\n    weekEvent: WeekViewEvent,\n    resizeEvent: ResizeEvent\n  ): void {\n    this.currentResizes.set(weekEvent, {\n      originalOffset: weekEvent.offset,\n      originalSpan: weekEvent.span,\n      edge: typeof resizeEvent.edges.left !== 'undefined' ? 'left' : 'right'\n    });\n    this.dayColumnWidth = this.getDayColumnWidth(weekViewContainer);\n    const resizeHelper: CalendarResizeHelper = new CalendarResizeHelper(\n      weekViewContainer,\n      this.dayColumnWidth\n    );\n    this.validateResize = ({ rectangle }) =>\n      resizeHelper.validateResize({ rectangle });\n    this.cdr.markForCheck();\n  }\n\n  /**\n   * @hidden\n   */\n  resizing(\n    weekEvent: WeekViewEvent,\n    resizeEvent: ResizeEvent,\n    dayWidth: number\n  ): void {\n    const currentResize: WeekViewEventResize = this.currentResizes.get(\n      weekEvent\n    );\n\n    if (resizeEvent.edges.left) {\n      const diff: number = Math.round(+resizeEvent.edges.left / dayWidth);\n      weekEvent.offset = currentResize.originalOffset + diff;\n      weekEvent.span = currentResize.originalSpan - diff;\n    } else if (resizeEvent.edges.right) {\n      const diff: number = Math.round(+resizeEvent.edges.right / dayWidth);\n      weekEvent.span = currentResize.originalSpan + diff;\n    }\n  }\n\n  /**\n   * @hidden\n   */\n  resizeEnded(weekEvent: WeekViewEvent): void {\n    const currentResize: WeekViewEventResize = this.currentResizes.get(\n      weekEvent\n    );\n\n    let daysDiff: number;\n    if (currentResize.edge === 'left') {\n      daysDiff = weekEvent.offset - currentResize.originalOffset;\n    } else {\n      daysDiff = weekEvent.span - currentResize.originalSpan;\n    }\n\n    weekEvent.offset = currentResize.originalOffset;\n    weekEvent.span = currentResize.originalSpan;\n\n    let newStart: Date = weekEvent.event.start;\n    let newEnd: Date = weekEvent.event.end;\n    if (currentResize.edge === 'left') {\n      newStart = addDays(newStart, daysDiff);\n    } else if (newEnd) {\n      newEnd = addDays(newEnd, daysDiff);\n    }\n\n    this.eventTimesChanged.emit({ newStart, newEnd, event: weekEvent.event });\n    this.currentResizes.delete(weekEvent);\n  }\n\n  /**\n   * @hidden\n   */\n  eventDragged(\n    weekEvent: WeekViewEvent,\n    draggedByPx: number,\n    dayWidth: number\n  ): void {\n    const daysDragged: number = draggedByPx / dayWidth;\n    const newStart: Date = addDays(weekEvent.event.start, daysDragged);\n    let newEnd: Date;\n    if (weekEvent.event.end) {\n      newEnd = addDays(weekEvent.event.end, daysDragged);\n    }\n\n    this.eventTimesChanged.emit({ newStart, newEnd, event: weekEvent.event });\n  }\n\n  /**\n   * @hidden\n   */\n  getDayColumnWidth(eventRowContainer: HTMLElement): number {\n    return Math.floor(eventRowContainer.offsetWidth / this.days.length);\n  }\n\n  /**\n   * @hidden\n   */\n  dragStart(weekViewContainer: HTMLElement, event: HTMLElement): void {\n    this.dayColumnWidth = this.getDayColumnWidth(weekViewContainer);\n    const dragHelper: CalendarDragHelper = new CalendarDragHelper(\n      weekViewContainer,\n      event\n    );\n    this.validateDrag = ({ x, y }) =>\n      this.currentResizes.size === 0 && dragHelper.validateDrag({ x, y });\n    this.cdr.markForCheck();\n  }\n\n  private refreshHeader(): void {\n    this.days = this.utils.getWeekViewHeader({\n      viewDate: this.viewDate,\n      weekStartsOn: this.weekStartsOn,\n      excluded: this.excludeDays,\n      weekendDays: this.weekendDays\n    });\n    this.emitBeforeViewRender();\n  }\n\n  private refreshBody(): void {\n    this.view = this.utils.getWeekView({\n      events: this.events,\n      viewDate: this.viewDate,\n      weekStartsOn: this.weekStartsOn,\n      excluded: this.excludeDays,\n      precision: this.precision,\n      absolutePositionedEvents: true\n    });\n    this.emitBeforeViewRender();\n  }\n\n  private refreshAll(): void {\n    this.refreshHeader();\n    this.refreshBody();\n  }\n\n  private emitBeforeViewRender(): void {\n    if (this.days && this.view) {\n      this.beforeViewRender.emit({\n        header: this.days,\n        period: this.view.period\n      });\n    }\n  }\n}\n",
    "import { isInside } from './util';\n\nexport class CalendarResizeHelper {\n  constructor(\n    private resizeContainerElement: HTMLElement,\n    private minWidth?: number\n  ) {}\n\n  validateResize({ rectangle }: { rectangle: ClientRect }): boolean {\n    if (this.minWidth && rectangle.width < this.minWidth) {\n      return false;\n    }\n\n    return isInside(\n      this.resizeContainerElement.getBoundingClientRect(),\n      rectangle\n    );\n  }\n}\n",
    "import { isInside } from './util';\n\nexport class CalendarDragHelper {\n  startPosition: ClientRect;\n\n  constructor(\n    private dragContainerElement: HTMLElement,\n    draggableElement: HTMLElement\n  ) {\n    this.startPosition = draggableElement.getBoundingClientRect();\n  }\n\n  validateDrag({ x, y }: { x: number; y: number }): boolean {\n    const newRect: ClientRect = Object.assign({}, this.startPosition, {\n      left: this.startPosition.left + x,\n      right: this.startPosition.right + x,\n      top: this.startPosition.top + y,\n      bottom: this.startPosition.bottom + y\n    });\n\n    return isInside(this.dragContainerElement.getBoundingClientRect(), newRect);\n  }\n}\n",
    "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { DragAndDropModule } from 'angular-draggable-droppable';\nimport { CalendarMonthViewComponent } from './calendar-month-view.component';\nimport { CalendarMonthViewHeaderComponent } from './calendar-month-view-header.component';\nimport { CalendarMonthCellComponent } from './calendar-month-cell.component';\nimport { CalendarOpenDayEventsComponent } from './calendar-open-day-events.component';\nimport { CalendarCommonModule } from '../common/calendar-common.module';\n\nexport {\n  CalendarMonthViewComponent,\n  CalendarMonthViewBeforeRenderEvent,\n  CalendarMonthViewEventTimesChangedEvent\n} from './calendar-month-view.component';\nexport { MonthViewDay as CalendarMonthViewDay } from 'calendar-utils';\n\n@NgModule({\n  imports: [CommonModule, DragAndDropModule, CalendarCommonModule],\n  declarations: [\n    CalendarMonthViewComponent,\n    CalendarMonthCellComponent,\n    CalendarOpenDayEventsComponent,\n    CalendarMonthViewHeaderComponent\n  ],\n  exports: [\n    DragAndDropModule,\n    CalendarMonthViewComponent,\n    CalendarMonthCellComponent,\n    CalendarOpenDayEventsComponent,\n    CalendarMonthViewHeaderComponent\n  ]\n})\nexport class CalendarMonthModule {}\n",
    "import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  TemplateRef\n} from '@angular/core';\nimport { trigger, style, transition, animate } from '@angular/animations';\nimport { CalendarEvent } from 'calendar-utils';\nimport { trackByEventId } from '../common/util';\n\n@Component({\n  selector: 'mwl-calendar-open-day-events',\n  template: `\n    <ng-template\n      #defaultTemplate\n      let-events=\"events\"\n      let-eventClicked=\"eventClicked\">\n      <div\n        *ngFor=\"let event of events; trackBy:trackByEventId\"\n        [ngClass]=\"event?.cssClass\"\n        mwlDraggable\n        [dropData]=\"{event: event}\"\n        [dragAxis]=\"{x: event.draggable, y: event.draggable}\">\n        <span\n          class=\"cal-event\"\n          [style.backgroundColor]=\"event.color.primary\">\n        </span>\n        <mwl-calendar-event-title\n          [event]=\"event\"\n          [customTemplate]=\"eventTitleTemplate\"\n          view=\"month\"\n          (mwlClick)=\"eventClicked.emit({event: event})\">\n        </mwl-calendar-event-title>\n        <mwl-calendar-event-actions [event]=\"event\"></mwl-calendar-event-actions>\n      </div>\n    </ng-template>\n    <div class=\"cal-open-day-events\" [@collapse] *ngIf=\"isOpen\">\n      <ng-template\n        [ngTemplateOutlet]=\"customTemplate || defaultTemplate\"\n        [ngTemplateOutletContext]=\"{\n          events: events,\n          eventClicked: eventClicked\n        }\">\n      </ng-template>\n    </div>\n  `,\n  animations: [\n    trigger('collapse', [\n      transition('void => *', [\n        style({ height: 0, overflow: 'hidden' }),\n        animate('150ms', style({ height: '*' }))\n      ]),\n      transition('* => void', [\n        style({ height: '*', overflow: 'hidden' }),\n        animate('150ms', style({ height: 0 }))\n      ])\n    ])\n  ]\n})\nexport class CalendarOpenDayEventsComponent {\n  @Input() isOpen: boolean = false;\n\n  @Input() events: CalendarEvent[];\n\n  @Input() customTemplate: TemplateRef<any>;\n\n  @Input() eventTitleTemplate: TemplateRef<any>;\n\n  @Output()\n  eventClicked: EventEmitter<{ event: CalendarEvent }> = new EventEmitter<{\n    event: CalendarEvent;\n  }>();\n\n  trackByEventId = trackByEventId;\n}\n",
    "import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  TemplateRef\n} from '@angular/core';\nimport { MonthViewDay, CalendarEvent } from 'calendar-utils';\nimport { trackByEventId } from '../common/util';\n\n@Component({\n  selector: 'mwl-calendar-month-cell',\n  template: `\n    <ng-template\n      #defaultTemplate\n      let-day=\"day\"\n      let-openDay=\"openDay\"\n      let-locale=\"locale\"\n      let-tooltipPlacement=\"tooltipPlacement\"\n      let-highlightDay=\"highlightDay\"\n      let-unhighlightDay=\"unhighlightDay\"\n      let-eventClicked=\"eventClicked\"\n      let-tooltipTemplate=\"tooltipTemplate\"\n      let-tooltipAppendToBody=\"tooltipAppendToBody\">\n      <div class=\"cal-cell-top\">\n        <span class=\"cal-day-badge\" *ngIf=\"day.badgeTotal > 0\">{{ day.badgeTotal }}</span>\n        <span class=\"cal-day-number\">{{ day.date | calendarDate:'monthViewDayNumber':locale }}</span>\n      </div>\n      <div class=\"cal-events\" *ngIf=\"day.events.length > 0\">\n        <div\n          class=\"cal-event\"\n          *ngFor=\"let event of day.events; trackBy:trackByEventId\"\n          [style.backgroundColor]=\"event.color.primary\"\n          [ngClass]=\"event?.cssClass\"\n          (mouseenter)=\"highlightDay.emit({event: event})\"\n          (mouseleave)=\"unhighlightDay.emit({event: event})\"\n          [mwlCalendarTooltip]=\"event.title | calendarEventTitle:'monthTooltip':event\"\n          [tooltipPlacement]=\"tooltipPlacement\"\n          [tooltipEvent]=\"event\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [tooltipAppendToBody]=\"tooltipAppendToBody\"\n          mwlDraggable\n          [dropData]=\"{event: event}\"\n          [dragAxis]=\"{x: event.draggable, y: event.draggable}\"\n          (mwlClick)=\"eventClicked.emit({ event: event })\">\n        </div>\n      </div>\n    </ng-template>\n    <ng-template\n      [ngTemplateOutlet]=\"customTemplate || defaultTemplate\"\n      [ngTemplateOutletContext]=\"{\n        day: day,\n        openDay: openDay,\n        locale: locale,\n        tooltipPlacement: tooltipPlacement,\n        highlightDay: highlightDay,\n        unhighlightDay: unhighlightDay,\n        eventClicked: eventClicked,\n        tooltipTemplate: tooltipTemplate,\n        tooltipAppendToBody: tooltipAppendToBody\n      }\">\n    </ng-template>\n  `,\n  host: {\n    class: 'cal-cell cal-day-cell',\n    '[class.cal-past]': 'day.isPast',\n    '[class.cal-today]': 'day.isToday',\n    '[class.cal-future]': 'day.isFuture',\n    '[class.cal-weekend]': 'day.isWeekend',\n    '[class.cal-in-month]': 'day.inMonth',\n    '[class.cal-out-month]': '!day.inMonth',\n    '[class.cal-has-events]': 'day.events.length > 0',\n    '[class.cal-open]': 'day === openDay',\n    '[style.backgroundColor]': 'day.backgroundColor'\n  }\n})\nexport class CalendarMonthCellComponent {\n  @Input() day: MonthViewDay;\n\n  @Input() openDay: MonthViewDay;\n\n  @Input() locale: string;\n\n  @Input() tooltipPlacement: string;\n\n  @Input() tooltipAppendToBody: boolean;\n\n  @Input() customTemplate: TemplateRef<any>;\n\n  @Input() tooltipTemplate: TemplateRef<any>;\n\n  @Output() highlightDay: EventEmitter<any> = new EventEmitter();\n\n  @Output() unhighlightDay: EventEmitter<any> = new EventEmitter();\n\n  @Output()\n  eventClicked: EventEmitter<{ event: CalendarEvent }> = new EventEmitter<{\n    event: CalendarEvent;\n  }>();\n\n  trackByEventId = trackByEventId;\n}\n",
    "import { Component, Input, TemplateRef } from '@angular/core';\nimport { WeekDay } from 'calendar-utils';\nimport { trackByWeekDayHeaderDate } from '../common/util';\n\n@Component({\n  selector: 'mwl-calendar-month-view-header',\n  template: `\n    <ng-template\n      #defaultTemplate\n      let-days=\"days\"\n      let-locale=\"locale\">\n      <div class=\"cal-cell-row cal-header\">\n        <div\n          class=\"cal-cell\"\n          *ngFor=\"let day of days; trackBy:trackByWeekDayHeaderDate\"\n          [class.cal-past]=\"day.isPast\"\n          [class.cal-today]=\"day.isToday\"\n          [class.cal-future]=\"day.isFuture\"\n          [class.cal-weekend]=\"day.isWeekend\"\n          [ngClass]=\"day.cssClass\">\n          {{ day.date | calendarDate:'monthViewColumnHeader':locale }}\n        </div>\n      </div>\n    </ng-template>\n    <ng-template\n      [ngTemplateOutlet]=\"customTemplate || defaultTemplate\"\n      [ngTemplateOutletContext]=\"{days: days, locale: locale}\">\n    </ng-template>\n  `\n})\nexport class CalendarMonthViewHeaderComponent {\n  @Input() days: WeekDay[];\n\n  @Input() locale: string;\n\n  @Input() customTemplate: TemplateRef<any>;\n\n  trackByWeekDayHeaderDate = trackByWeekDayHeaderDate;\n}\n",
    "import {\n  Component,\n  OnChanges,\n  Input,\n  Output,\n  EventEmitter,\n  ChangeDetectorRef,\n  OnInit,\n  OnDestroy,\n  LOCALE_ID,\n  Inject,\n  TemplateRef\n} from '@angular/core';\nimport {\n  CalendarEvent,\n  WeekDay,\n  MonthView,\n  MonthViewDay,\n  ViewPeriod\n} from 'calendar-utils';\nimport { Subject } from 'rxjs/Subject';\nimport { Subscription } from 'rxjs/Subscription';\nimport isSameDay from 'date-fns/is_same_day/index';\nimport setDate from 'date-fns/set_date/index';\nimport setMonth from 'date-fns/set_month/index';\nimport setYear from 'date-fns/set_year/index';\nimport getDate from 'date-fns/get_date/index';\nimport getMonth from 'date-fns/get_month/index';\nimport getYear from 'date-fns/get_year/index';\nimport differenceInSeconds from 'date-fns/difference_in_seconds/index';\nimport addSeconds from 'date-fns/add_seconds/index';\nimport { CalendarEventTimesChangedEvent } from '../common/calendar-event-times-changed-event.interface';\nimport { CalendarUtils } from '../common/calendar-utils.provider';\nimport { validateEvents, trackByIndex } from '../common/util';\n\nexport interface CalendarMonthViewBeforeRenderEvent {\n  header: WeekDay[];\n  body: MonthViewDay[];\n  period: ViewPeriod;\n}\n\nexport interface CalendarMonthViewEventTimesChangedEvent\n  extends CalendarEventTimesChangedEvent {\n  day: MonthViewDay;\n}\n\n/**\n * Shows all events on a given month. Example usage:\n *\n * ```typescript\n * <mwl-calendar-month-view\n *  [viewDate]=\"viewDate\"\n *  [events]=\"events\">\n * </mwl-calendar-month-view>\n * ```\n */\n@Component({\n  selector: 'mwl-calendar-month-view',\n  template: `\n    <div class=\"cal-month-view\">\n      <mwl-calendar-month-view-header\n        [days]=\"columnHeaders\"\n        [locale]=\"locale\"\n        [customTemplate]=\"headerTemplate\">\n      </mwl-calendar-month-view-header>\n      <div class=\"cal-days\">\n        <div *ngFor=\"let rowIndex of view.rowOffsets; trackByIndex\">\n          <div class=\"cal-cell-row\">\n            <mwl-calendar-month-cell\n              *ngFor=\"let day of (view.days | slice : rowIndex : rowIndex + (view.totalDaysVisibleInWeek)); trackBy:trackByDate\"\n              [class.cal-drag-over]=\"day.dragOver\"\n              [ngClass]=\"day?.cssClass\"\n              [day]=\"day\"\n              [openDay]=\"openDay\"\n              [locale]=\"locale\"\n              [tooltipPlacement]=\"tooltipPlacement\"\n              [tooltipAppendToBody]=\"tooltipAppendToBody\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              [customTemplate]=\"cellTemplate\"\n              (click)=\"handleDayClick($event, day)\"\n              (highlightDay)=\"toggleDayHighlight($event.event, true)\"\n              (unhighlightDay)=\"toggleDayHighlight($event.event, false)\"\n              mwlDroppable\n              (dragEnter)=\"day.dragOver = true\"\n              (dragLeave)=\"day.dragOver = false\"\n              (drop)=\"day.dragOver = false; eventDropped(day, $event.dropData.event)\"\n              (eventClicked)=\"eventClicked.emit({event: $event.event})\">\n            </mwl-calendar-month-cell>\n          </div>\n          <mwl-calendar-open-day-events\n            [isOpen]=\"openRowIndex === rowIndex\"\n            [events]=\"openDay?.events\"\n            [customTemplate]=\"openDayEventsTemplate\"\n            [eventTitleTemplate]=\"eventTitleTemplate\"\n            (eventClicked)=\"eventClicked.emit({event: $event.event})\">\n          </mwl-calendar-open-day-events>\n        </div>\n      </div>\n    </div>\n  `\n})\nexport class CalendarMonthViewComponent\n  implements OnChanges, OnInit, OnDestroy {\n  /**\n   * The current view date\n   */\n  @Input() viewDate: Date;\n\n  /**\n   * An array of events to display on view.\n   * The schema is available here: https://github.com/mattlewis92/calendar-utils/blob/c51689985f59a271940e30bc4e2c4e1fee3fcb5c/src/calendarUtils.ts#L49-L63\n   */\n  @Input() events: CalendarEvent[] = [];\n\n  /**\n   * An array of day indexes (0 = sunday, 1 = monday etc) that will be hidden on the view\n   */\n  @Input() excludeDays: number[] = [];\n\n  /**\n   * Whether the events list for the day of the `viewDate` option is visible or not\n   */\n  @Input() activeDayIsOpen: boolean = false;\n\n  /**\n   * An observable that when emitted on will re-render the current view\n   */\n  @Input() refresh: Subject<any>;\n\n  /**\n   * The locale used to format dates\n   */\n  @Input() locale: string;\n\n  /**\n   * The placement of the event tooltip\n   */\n  @Input() tooltipPlacement: string = 'top';\n\n  /**\n   * A custom template to use for the event tooltips\n   */\n  @Input() tooltipTemplate: TemplateRef<any>;\n\n  /**\n   * Whether to append tooltips to the body or next to the trigger element\n   */\n  @Input() tooltipAppendToBody: boolean = true;\n\n  /**\n   * The start number of the week\n   */\n  @Input() weekStartsOn: number;\n\n  /**\n   * A custom template to use to replace the header\n   */\n  @Input() headerTemplate: TemplateRef<any>;\n\n  /**\n   * A custom template to use to replace the day cell\n   */\n  @Input() cellTemplate: TemplateRef<any>;\n\n  /**\n   * A custom template to use for the slide down box of events for the active day\n   */\n  @Input() openDayEventsTemplate: TemplateRef<any>;\n\n  /**\n   * A custom template to use for event titles\n   */\n  @Input() eventTitleTemplate: TemplateRef<any>;\n\n  /**\n   * An array of day indexes (0 = sunday, 1 = monday etc) that indicate which days are weekends\n   */\n  @Input() weekendDays: number[];\n\n  /**\n   * An output that will be called before the view is rendered for the current month.\n   * If you add the `cssClass` property to a day in the body it will add that class to the cell element in the template\n   */\n  @Output()\n  beforeViewRender = new EventEmitter<CalendarMonthViewBeforeRenderEvent>();\n\n  /**\n   * Called when the day cell is clicked\n   */\n  @Output()\n  dayClicked = new EventEmitter<{\n    day: MonthViewDay;\n  }>();\n\n  /**\n   * Called when the event title is clicked\n   */\n  @Output()\n  eventClicked = new EventEmitter<{\n    event: CalendarEvent;\n  }>();\n\n  /**\n   * Called when an event is dragged and dropped\n   */\n  @Output()\n  eventTimesChanged = new EventEmitter<\n    CalendarMonthViewEventTimesChangedEvent\n  >();\n\n  /**\n   * @hidden\n   */\n  columnHeaders: WeekDay[];\n\n  /**\n   * @hidden\n   */\n  view: MonthView;\n\n  /**\n   * @hidden\n   */\n  openRowIndex: number;\n\n  /**\n   * @hidden\n   */\n  openDay: MonthViewDay;\n\n  /**\n   * @hidden\n   */\n  refreshSubscription: Subscription;\n\n  /**\n   * @hidden\n   */\n  trackByIndex = trackByIndex;\n\n  /**\n   * @hidden\n   */\n  trackByDate = (index: number, day: MonthViewDay) => day.date.toISOString();\n\n  /**\n   * @hidden\n   */\n  constructor(\n    private cdr: ChangeDetectorRef,\n    private utils: CalendarUtils,\n    @Inject(LOCALE_ID) locale: string\n  ) {\n    this.locale = locale;\n  }\n\n  /**\n   * @hidden\n   */\n  ngOnInit(): void {\n    if (this.refresh) {\n      this.refreshSubscription = this.refresh.subscribe(() => {\n        this.refreshAll();\n        this.cdr.markForCheck();\n      });\n    }\n  }\n\n  /**\n   * @hidden\n   */\n  ngOnChanges(changes: any): void {\n    if (changes.viewDate || changes.excludeDays || changes.weekendDays) {\n      this.refreshHeader();\n    }\n\n    if (changes.events) {\n      validateEvents(this.events);\n    }\n\n    if (\n      changes.viewDate ||\n      changes.events ||\n      changes.excludeDays ||\n      changes.weekendDays\n    ) {\n      this.refreshBody();\n    }\n\n    if (\n      changes.activeDayIsOpen ||\n      changes.viewDate ||\n      changes.events ||\n      changes.excludeDays\n    ) {\n      this.checkActiveDayIsOpen();\n    }\n  }\n\n  /**\n   * @hidden\n   */\n  ngOnDestroy(): void {\n    if (this.refreshSubscription) {\n      this.refreshSubscription.unsubscribe();\n    }\n  }\n\n  /**\n   * @hidden\n   */\n  toggleDayHighlight(event: CalendarEvent, isHighlighted: boolean): void {\n    this.view.days.forEach(day => {\n      if (isHighlighted && day.events.indexOf(event) > -1) {\n        day.backgroundColor = event.color.secondary;\n      } else {\n        delete day.backgroundColor;\n      }\n    });\n  }\n\n  /**\n   * @hidden\n   */\n  eventDropped(day: MonthViewDay, event: CalendarEvent): void {\n    const year: number = getYear(day.date);\n    const month: number = getMonth(day.date);\n    const date: number = getDate(day.date);\n    const newStart: Date = setDate(\n      setMonth(setYear(event.start, year), month),\n      date\n    );\n    let newEnd: Date;\n    if (event.end) {\n      const secondsDiff: number = differenceInSeconds(newStart, event.start);\n      newEnd = addSeconds(event.end, secondsDiff);\n    }\n    this.eventTimesChanged.emit({ event, newStart, newEnd, day });\n  }\n\n  /**\n   * @hidden\n   */\n  handleDayClick(clickEvent: any, day: MonthViewDay) {\n    // when using hammerjs, stopPropagation doesn't work. See https://github.com/mattlewis92/angular-calendar/issues/318\n    if (!clickEvent.target.classList.contains('cal-event')) {\n      this.dayClicked.emit({ day });\n    }\n  }\n\n  private refreshHeader(): void {\n    this.columnHeaders = this.utils.getWeekViewHeader({\n      viewDate: this.viewDate,\n      weekStartsOn: this.weekStartsOn,\n      excluded: this.excludeDays,\n      weekendDays: this.weekendDays\n    });\n    this.emitBeforeViewRender();\n  }\n\n  private refreshBody(): void {\n    this.view = this.utils.getMonthView({\n      events: this.events,\n      viewDate: this.viewDate,\n      weekStartsOn: this.weekStartsOn,\n      excluded: this.excludeDays,\n      weekendDays: this.weekendDays\n    });\n    this.emitBeforeViewRender();\n  }\n\n  private checkActiveDayIsOpen(): void {\n    if (this.activeDayIsOpen === true) {\n      this.openDay = this.view.days.find(day =>\n        isSameDay(day.date, this.viewDate)\n      );\n      const index: number = this.view.days.indexOf(this.openDay);\n      this.openRowIndex =\n        Math.floor(index / this.view.totalDaysVisibleInWeek) *\n        this.view.totalDaysVisibleInWeek;\n    } else {\n      this.openRowIndex = null;\n      this.openDay = null;\n    }\n  }\n\n  private refreshAll(): void {\n    this.columnHeaders = null;\n    this.view = null;\n    this.refreshHeader();\n    this.refreshBody();\n    this.checkActiveDayIsOpen();\n  }\n\n  private emitBeforeViewRender(): void {\n    if (this.columnHeaders && this.view) {\n      this.beforeViewRender.emit({\n        header: this.columnHeaders,\n        body: this.view.days,\n        period: this.view.period\n      });\n    }\n  }\n}\n",
    "import { ModuleWithProviders, NgModule, Provider } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { DraggableHelper } from 'angular-draggable-droppable';\nimport { CalendarEventActionsComponent } from './calendar-event-actions.component';\nimport { CalendarEventTitleComponent } from './calendar-event-title.component';\nimport {\n  CalendarTooltipDirective,\n  CalendarTooltipWindowComponent\n} from './calendar-tooltip.directive';\nimport { CalendarPreviousViewDirective } from './calendar-previous-view.directive';\nimport { CalendarNextViewDirective } from './calendar-next-view.directive';\nimport { CalendarTodayDirective } from './calendar-today.directive';\nimport { CalendarDatePipe } from './calendar-date.pipe';\nimport { CalendarEventTitlePipe } from './calendar-event-title.pipe';\nimport { ClickDirective } from './click.directive';\nimport { CalendarEventTitleFormatter } from './calendar-event-title-formatter.provider';\nimport { CalendarDateFormatter } from './calendar-date-formatter.provider';\nimport { CalendarUtils } from './calendar-utils.provider';\n\nexport interface CalendarModuleConfig {\n  eventTitleFormatter?: Provider;\n  dateFormatter?: Provider;\n  utils?: Provider;\n}\n\nexport * from './calendar-event-title-formatter.provider';\nexport * from './calendar-moment-date-formatter.provider';\nexport * from './calendar-native-date-formatter.provider';\nexport * from './calendar-angular-date-formatter.provider';\nexport * from './calendar-date-formatter.provider';\nexport * from './calendar-utils.provider';\nexport * from './calendar-date-formatter.interface';\nexport * from './calendar-event-times-changed-event.interface';\n\nexport {\n  CalendarEvent,\n  EventAction as CalendarEventAction,\n  DAYS_OF_WEEK,\n  ViewPeriod as CalendarViewPeriod\n} from 'calendar-utils';\n\n/**\n * Import this module to if you're just using a singular view and want to save on bundle size. Example usage:\n *\n * ```typescript\n * import { CalendarCommonModule } from 'angular-calendar/modules/common';\n * import { CalendarMonthModule } from 'angular-calendar/modules/month';\n *\n * @NgModule({\n *   imports: [\n *     CalendarCommonModule.forRoot(),\n *     CalendarMonthModule\n *   ]\n * })\n * class MyModule {}\n * ```\n *\n */\n@NgModule({\n  declarations: [\n    CalendarEventActionsComponent,\n    CalendarEventTitleComponent,\n    CalendarTooltipWindowComponent,\n    CalendarTooltipDirective,\n    CalendarPreviousViewDirective,\n    CalendarNextViewDirective,\n    CalendarTodayDirective,\n    CalendarDatePipe,\n    CalendarEventTitlePipe,\n    ClickDirective\n  ],\n  imports: [CommonModule],\n  exports: [\n    CalendarEventActionsComponent,\n    CalendarEventTitleComponent,\n    CalendarTooltipWindowComponent,\n    CalendarTooltipDirective,\n    CalendarPreviousViewDirective,\n    CalendarNextViewDirective,\n    CalendarTodayDirective,\n    CalendarDatePipe,\n    CalendarEventTitlePipe,\n    ClickDirective\n  ],\n  entryComponents: [CalendarTooltipWindowComponent]\n})\nexport class CalendarCommonModule {\n  static forRoot(config: CalendarModuleConfig = {}): ModuleWithProviders {\n    return {\n      ngModule: CalendarCommonModule,\n      providers: [\n        DraggableHelper,\n        config.eventTitleFormatter || CalendarEventTitleFormatter,\n        config.dateFormatter || CalendarDateFormatter,\n        config.utils || CalendarUtils\n      ]\n    };\n  }\n}\n",
    "import {\n  CalendarDateFormatterInterface,\n  DateFormatterParams\n} from './calendar-date-formatter.interface';\nimport getISOWeek from 'date-fns/get_iso_week/index';\n\n/**\n * This will use <a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Intl\" target=\"_blank\">Intl</a> API to do all date formatting.\n *\n * You will need to include a <a href=\"https://github.com/andyearnshaw/Intl.js/\">polyfill</a> for older browsers.\n */\nexport class CalendarNativeDateFormatter\n  implements CalendarDateFormatterInterface {\n  /**\n   * The month view header week day labels\n   */\n  public monthViewColumnHeader({ date, locale }: DateFormatterParams): string {\n    return new Intl.DateTimeFormat(locale, { weekday: 'long' }).format(date);\n  }\n\n  /**\n   * The month view cell day number\n   */\n  public monthViewDayNumber({ date, locale }: DateFormatterParams): string {\n    return new Intl.DateTimeFormat(locale, { day: 'numeric' }).format(date);\n  }\n\n  /**\n   * The month view title\n   */\n  public monthViewTitle({ date, locale }: DateFormatterParams): string {\n    return new Intl.DateTimeFormat(locale, {\n      year: 'numeric',\n      month: 'long'\n    }).format(date);\n  }\n\n  /**\n   * The week view header week day labels\n   */\n  public weekViewColumnHeader({ date, locale }: DateFormatterParams): string {\n    return new Intl.DateTimeFormat(locale, { weekday: 'long' }).format(date);\n  }\n\n  /**\n   * The week view sub header day and month labels\n   */\n  public weekViewColumnSubHeader({\n    date,\n    locale\n  }: DateFormatterParams): string {\n    return new Intl.DateTimeFormat(locale, {\n      day: 'numeric',\n      month: 'short'\n    }).format(date);\n  }\n\n  /**\n   * The week view title\n   */\n  public weekViewTitle({ date, locale }: DateFormatterParams): string {\n    const year: string = new Intl.DateTimeFormat(locale, {\n      year: 'numeric'\n    }).format(date);\n    const weekNumber: number = getISOWeek(date);\n    return `Week ${weekNumber} of ${year}`;\n  }\n\n  /**\n   * The time formatting down the left hand side of the day view\n   */\n  public dayViewHour({ date, locale }: DateFormatterParams): string {\n    return new Intl.DateTimeFormat(locale, { hour: 'numeric' }).format(date);\n  }\n\n  /**\n   * The day view title\n   */\n  public dayViewTitle({ date, locale }: DateFormatterParams): string {\n    return new Intl.DateTimeFormat(locale, {\n      day: 'numeric',\n      month: 'long',\n      year: 'numeric',\n      weekday: 'long'\n    }).format(date);\n  }\n}\n",
    "import { InjectionToken, Inject } from '@angular/core';\nimport {\n  CalendarDateFormatterInterface,\n  DateFormatterParams\n} from './calendar-date-formatter.interface';\n\nexport const MOMENT: InjectionToken<string> = new InjectionToken('Moment');\n\n/**\n * This will use <a href=\"http://momentjs.com/\" target=\"_blank\">moment</a> to do all date formatting. To use this class:\n *\n * ```typescript\n * import { CalendarDateFormatter, CalendarMomentDateFormatter, MOMENT } from 'angular-calendar';\n * import moment from 'moment';\n *\n * // in your component\n * provide: [{\n *   provide: MOMENT, useValue: moment\n * }, {\n *   provide: CalendarDateFormatter, useClass: CalendarMomentDateFormatter\n * }]\n *\n * ```\n */\nexport class CalendarMomentDateFormatter\n  implements CalendarDateFormatterInterface {\n  /**\n   * @hidden\n   */\n  constructor(@Inject(MOMENT) private moment: any) {}\n\n  /**\n   * The month view header week day labels\n   */\n  public monthViewColumnHeader({ date, locale }: DateFormatterParams): string {\n    return this.moment(date)\n      .locale(locale)\n      .format('dddd');\n  }\n\n  /**\n   * The month view cell day number\n   */\n  public monthViewDayNumber({ date, locale }: DateFormatterParams): string {\n    return this.moment(date)\n      .locale(locale)\n      .format('D');\n  }\n\n  /**\n   * The month view title\n   */\n  public monthViewTitle({ date, locale }: DateFormatterParams): string {\n    return this.moment(date)\n      .locale(locale)\n      .format('MMMM YYYY');\n  }\n\n  /**\n   * The week view header week day labels\n   */\n  public weekViewColumnHeader({ date, locale }: DateFormatterParams): string {\n    return this.moment(date)\n      .locale(locale)\n      .format('dddd');\n  }\n\n  /**\n   * The week view sub header day and month labels\n   */\n  public weekViewColumnSubHeader({\n    date,\n    locale\n  }: DateFormatterParams): string {\n    return this.moment(date)\n      .locale(locale)\n      .format('D MMM');\n  }\n\n  /**\n   * The week view title\n   */\n  public weekViewTitle({ date, locale }: DateFormatterParams): string {\n    return this.moment(date)\n      .locale(locale)\n      .format('[Week] W [of] YYYY');\n  }\n\n  /**\n   * The time formatting down the left hand side of the day view\n   */\n  public dayViewHour({ date, locale }: DateFormatterParams): string {\n    return this.moment(date)\n      .locale(locale)\n      .format('ha');\n  }\n\n  /**\n   * The day view title\n   */\n  public dayViewTitle({ date, locale }: DateFormatterParams): string {\n    return this.moment(date)\n      .locale(locale)\n      .format('dddd, D MMMM, YYYY');\n  }\n}\n",
    "import { Injectable } from '@angular/core';\nimport {\n  getMonthView,\n  GetMonthViewArgs,\n  MonthView,\n  getWeekViewHeader,\n  GetWeekViewHeaderArgs,\n  WeekDay,\n  getWeekView,\n  GetWeekViewArgs,\n  getDayView,\n  GetDayViewArgs,\n  DayView,\n  getDayViewHourGrid,\n  GetDayViewHourGridArgs,\n  DayViewHour,\n  WeekView\n} from 'calendar-utils';\n\n@Injectable()\nexport class CalendarUtils {\n  getMonthView(args: GetMonthViewArgs): MonthView {\n    return getMonthView(args);\n  }\n\n  getWeekViewHeader(args: GetWeekViewHeaderArgs): WeekDay[] {\n    return getWeekViewHeader(args);\n  }\n\n  getWeekView(args: GetWeekViewArgs): WeekView {\n    return getWeekView(args);\n  }\n\n  getDayView(args: GetDayViewArgs): DayView {\n    return getDayView(args);\n  }\n\n  getDayViewHourGrid(args: GetDayViewHourGridArgs): DayViewHour[] {\n    return getDayViewHourGrid(args);\n  }\n}\n",
    "import {\n  Directive,\n  Renderer2,\n  ElementRef,\n  OnInit,\n  OnDestroy,\n  Output,\n  EventEmitter\n} from '@angular/core';\n\n@Directive({\n  selector: '[mwlClick]'\n})\nexport class ClickDirective implements OnInit, OnDestroy {\n  @Output('mwlClick') click: EventEmitter<MouseEvent> = new EventEmitter(); // tslint:disable-line\n\n  private removeListener: () => void;\n\n  constructor(private renderer: Renderer2, private elm: ElementRef) {}\n\n  ngOnInit(): void {\n    const eventName: string =\n      typeof window !== 'undefined' && typeof window['Hammer'] !== 'undefined'\n        ? 'tap'\n        : 'click';\n    this.removeListener = this.renderer.listen(\n      this.elm.nativeElement,\n      eventName,\n      event => {\n        this.click.next(event);\n      }\n    );\n  }\n\n  ngOnDestroy(): void {\n    this.removeListener();\n  }\n}\n",
    "import { Pipe, PipeTransform } from '@angular/core';\nimport { CalendarEvent } from 'calendar-utils';\nimport { CalendarEventTitleFormatter } from './calendar-event-title-formatter.provider';\n\n@Pipe({\n  name: 'calendarEventTitle'\n})\nexport class CalendarEventTitlePipe implements PipeTransform {\n  constructor(private calendarEventTitle: CalendarEventTitleFormatter) {}\n\n  transform(title: string, titleType: string, event: CalendarEvent): string {\n    return this.calendarEventTitle[titleType](event);\n  }\n}\n",
    "import { CalendarEvent } from 'calendar-utils';\n\n/**\n * This class is responsible for displaying all event titles within the calendar. You may override any of its methods via angulars DI to suit your requirements. For example:\n *\n * ```typescript\n * import { CalendarEventTitleFormatter, CalendarEvent } from 'angular-calendar';\n *\n * class CustomEventTitleFormatter extends CalendarEventTitleFormatter {\n *\n *   month(event: CalendarEvent): string {\n *     return `Custom prefix: ${event.title}`;\n *   }\n *\n * }\n *\n * // in your component\n * providers: [{\n *  provide: CalendarEventTitleFormatter,\n *  useClass: CustomEventTitleFormatter\n * }]\n * ```\n */\nexport class CalendarEventTitleFormatter {\n  /**\n   * The month view event title.\n   */\n  month(event: CalendarEvent): string {\n    return event.title;\n  }\n\n  /**\n   * The month view event tooltip. Return a falsey value from this to disable the tooltip.\n   */\n  monthTooltip(event: CalendarEvent): string {\n    return event.title;\n  }\n\n  /**\n   * The week view event title.\n   */\n  week(event: CalendarEvent): string {\n    return event.title;\n  }\n\n  /**\n   * The week view event tooltip. Return a falsey value from this to disable the tooltip.\n   */\n  weekTooltip(event: CalendarEvent): string {\n    return event.title;\n  }\n\n  /**\n   * The day view event title.\n   */\n  day(event: CalendarEvent): string {\n    return event.title;\n  }\n\n  /**\n   * The day view event tooltip. Return a falsey value from this to disable the tooltip.\n   */\n  dayTooltip(event: CalendarEvent): string {\n    return event.title;\n  }\n}\n",
    "import { Pipe, PipeTransform, LOCALE_ID, Inject } from '@angular/core';\nimport { CalendarDateFormatter } from './calendar-date-formatter.provider';\n\n/**\n * This pipe is primarily for rendering the current view title. Example usage:\n * ```typescript\n * // where `viewDate` is a `Date` and view is `'month' | 'week' | 'day'`\n * {{ viewDate | calendarDate:(view + 'ViewTitle'):'en' }}\n * ```\n */\n@Pipe({\n  name: 'calendarDate'\n})\nexport class CalendarDatePipe implements PipeTransform {\n  constructor(\n    private dateFormatter: CalendarDateFormatter,\n    @Inject(LOCALE_ID) private locale: string\n  ) {}\n\n  transform(date: Date, method: string, locale: string = this.locale): string {\n    return this.dateFormatter[method]({ date, locale });\n  }\n}\n",
    "import { CalendarAngularDateFormatter } from './calendar-angular-date-formatter.provider';\n\n/**\n * This class is responsible for all formatting of dates. There are 3 implementations available, the `CalendarAngularDateFormatter` (default) which uses the angular date pipe to format dates, the `CalendarNativeDateFormatter` which will use the <a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Intl\" target=\"_blank\">Intl</a> API to format dates, or there is the `CalendarMomentDateFormatter` which uses <a href=\"http://momentjs.com/\" target=\"_blank\">moment</a>.\n *\n * If you wish, you may override any of the defaults via angulars DI. For example:\n *\n * ```typescript\n * import { CalendarDateFormatter, DateFormatterParams } from 'angular-calendar';\n * import { DatePipe } from '@angular/common';\n *\n * class CustomDateFormatter extends CalendarDateFormatter {\n *\n *   public monthViewColumnHeader({date, locale}: DateFormatterParams): string {\n *     return new DatePipe(locale).transform(date, 'EEE', locale); // use short week days\n *   }\n *\n * }\n *\n * // in your component that uses the calendar\n * providers: [{\n *   provide: CalendarDateFormatter,\n *   useClass: CustomDateFormatter\n * }]\n * ```\n */\nexport class CalendarDateFormatter extends CalendarAngularDateFormatter {}\n",
    "import {\n  CalendarDateFormatterInterface,\n  DateFormatterParams\n} from './calendar-date-formatter.interface';\nimport getISOWeek from 'date-fns/get_iso_week/index';\nimport { DatePipe } from '@angular/common';\n\n/**\n * This will use the angular date pipe to do all date formatting. It is the default date formatter used by the calendar.\n */\nexport class CalendarAngularDateFormatter\n  implements CalendarDateFormatterInterface {\n  /**\n   * The month view header week day labels\n   */\n  public monthViewColumnHeader({ date, locale }: DateFormatterParams): string {\n    return new DatePipe(locale).transform(date, 'EEEE', locale);\n  }\n\n  /**\n   * The month view cell day number\n   */\n  public monthViewDayNumber({ date, locale }: DateFormatterParams): string {\n    return new DatePipe(locale).transform(date, 'd', locale);\n  }\n\n  /**\n   * The month view title\n   */\n  public monthViewTitle({ date, locale }: DateFormatterParams): string {\n    return new DatePipe(locale).transform(date, 'MMMM y', locale);\n  }\n\n  /**\n   * The week view header week day labels\n   */\n  public weekViewColumnHeader({ date, locale }: DateFormatterParams): string {\n    return new DatePipe(locale).transform(date, 'EEEE', locale);\n  }\n\n  /**\n   * The week view sub header day and month labels\n   */\n  public weekViewColumnSubHeader({\n    date,\n    locale\n  }: DateFormatterParams): string {\n    return new DatePipe(locale).transform(date, 'MMM d', locale);\n  }\n\n  /**\n   * The week view title\n   */\n  public weekViewTitle({ date, locale }: DateFormatterParams): string {\n    const year: string = new DatePipe(locale).transform(date, 'y', locale);\n    const weekNumber: number = getISOWeek(date);\n    return `Week ${weekNumber} of ${year}`;\n  }\n\n  /**\n   * The time formatting down the left hand side of the day view\n   */\n  public dayViewHour({ date, locale }: DateFormatterParams): string {\n    return new DatePipe(locale).transform(date, 'h a', locale);\n  }\n\n  /**\n   * The day view title\n   */\n  public dayViewTitle({ date, locale }: DateFormatterParams): string {\n    return new DatePipe(locale).transform(date, 'EEEE, MMMM d, y', locale);\n  }\n}\n",
    "import {\n  Directive,\n  HostListener,\n  Input,\n  Output,\n  EventEmitter\n} from '@angular/core';\nimport startOfToday from 'date-fns/start_of_today/index';\n\n/**\n * Change the view date to the current day. For example:\n *\n * ```typescript\n * <button\n *  mwlCalendarToday\n *  [(viewDate)]=\"viewDate\">\n *  Today\n * </button>\n * ```\n */\n@Directive({\n  selector: '[mwlCalendarToday]'\n})\nexport class CalendarTodayDirective {\n  /**\n   * The current view date\n   */\n  @Input() viewDate: Date;\n\n  /**\n   * Called when the view date is changed\n   */\n  @Output() viewDateChange: EventEmitter<Date> = new EventEmitter();\n\n  /**\n   * @hidden\n   */\n  @HostListener('click')\n  onClick(): void {\n    this.viewDateChange.emit(startOfToday());\n  }\n}\n",
    "import {\n  Directive,\n  HostListener,\n  Input,\n  Output,\n  EventEmitter\n} from '@angular/core';\nimport addDays from 'date-fns/add_days/index';\nimport addWeeks from 'date-fns/add_weeks/index';\nimport addMonths from 'date-fns/add_months/index';\n\n/**\n * Change the view date to the next view. For example:\n *\n * ```typescript\n * <button\n *  mwlCalendarNextView\n *  [(viewDate)]=\"viewDate\"\n *  [view]=\"view\">\n *  Next\n * </button>\n * ```\n */\n@Directive({\n  selector: '[mwlCalendarNextView]'\n})\nexport class CalendarNextViewDirective {\n  /**\n   * The current view\n   */\n  @Input() view: string;\n\n  /**\n   * The current view date\n   */\n  @Input() viewDate: Date;\n\n  /**\n   * Called when the view date is changed\n   */\n  @Output() viewDateChange: EventEmitter<Date> = new EventEmitter();\n\n  /**\n   * @hidden\n   */\n  @HostListener('click')\n  onClick(): void {\n    const addFn: any = {\n      day: addDays,\n      week: addWeeks,\n      month: addMonths\n    }[this.view];\n\n    this.viewDateChange.emit(addFn(this.viewDate, 1));\n  }\n}\n",
    "import {\n  Directive,\n  HostListener,\n  Input,\n  Output,\n  EventEmitter\n} from '@angular/core';\nimport subDays from 'date-fns/sub_days/index';\nimport subWeeks from 'date-fns/sub_weeks/index';\nimport subMonths from 'date-fns/sub_months/index';\n\n/**\n * Change the view date to the previous view. For example:\n *\n * ```typescript\n * <button\n *  mwlCalendarPreviousView\n *  [(viewDate)]=\"viewDate\"\n *  [view]=\"view\">\n *  Previous\n * </button>\n * ```\n */\n@Directive({\n  selector: '[mwlCalendarPreviousView]'\n})\nexport class CalendarPreviousViewDirective {\n  /**\n   * The current view\n   */\n  @Input() view: string;\n\n  /**\n   * The current view date\n   */\n  @Input() viewDate: Date;\n\n  /**\n   * Called when the view date is changed\n   */\n  @Output() viewDateChange: EventEmitter<Date> = new EventEmitter();\n\n  /**\n   * @hidden\n   */\n  @HostListener('click')\n  onClick(): void {\n    const subFn: any = {\n      day: subDays,\n      week: subWeeks,\n      month: subMonths\n    }[this.view];\n\n    this.viewDateChange.emit(subFn(this.viewDate, 1));\n  }\n}\n",
    "import {\n  Directive,\n  Component,\n  HostListener,\n  OnDestroy,\n  Input,\n  ComponentRef,\n  Injector,\n  ComponentFactoryResolver,\n  ViewContainerRef,\n  ElementRef,\n  ComponentFactory,\n  Inject,\n  Renderer2,\n  TemplateRef\n} from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\nimport { Positioning } from 'positioning';\nimport { CalendarEvent } from 'calendar-utils';\n\n@Component({\n  template: `\n    <ng-template\n      #defaultTemplate\n      let-contents=\"contents\"\n      let-placement=\"placement\"\n      let-event=\"event\">\n      <div class=\"cal-tooltip\" [ngClass]=\"'cal-tooltip-' + placement\">\n        <div class=\"cal-tooltip-arrow\"></div>\n        <div class=\"cal-tooltip-inner\" [innerHtml]=\"contents\"></div>\n      </div>\n    </ng-template>\n    <ng-template\n      [ngTemplateOutlet]=\"customTemplate || defaultTemplate\"\n      [ngTemplateOutletContext]=\"{\n        contents: contents,\n        placement: placement,\n        event: event\n      }\">\n    </ng-template>\n  `\n})\nexport class CalendarTooltipWindowComponent {\n  @Input() contents: string;\n\n  @Input() placement: string;\n\n  @Input() event: CalendarEvent;\n\n  @Input() customTemplate: TemplateRef<any>;\n}\n\n@Directive({\n  selector: '[mwlCalendarTooltip]'\n})\nexport class CalendarTooltipDirective implements OnDestroy {\n  @Input('mwlCalendarTooltip') contents: string; // tslint:disable-line no-input-rename\n\n  @Input('tooltipPlacement') placement: string = 'top'; // tslint:disable-line no-input-rename\n\n  @Input('tooltipTemplate') customTemplate: TemplateRef<any>; // tslint:disable-line no-input-rename\n\n  @Input('tooltipEvent') event: CalendarEvent; // tslint:disable-line no-input-rename\n\n  @Input('tooltipAppendToBody') appendToBody: boolean; // tslint:disable-line no-input-rename\n\n  private tooltipFactory: ComponentFactory<CalendarTooltipWindowComponent>;\n  private tooltipRef: ComponentRef<CalendarTooltipWindowComponent>;\n  private positioning: Positioning = new Positioning();\n\n  constructor(\n    private elementRef: ElementRef,\n    private injector: Injector,\n    private renderer: Renderer2,\n    componentFactoryResolver: ComponentFactoryResolver,\n    private viewContainerRef: ViewContainerRef,\n    @Inject(DOCUMENT) private document //tslint:disable-line\n  ) {\n    this.tooltipFactory = componentFactoryResolver.resolveComponentFactory(\n      CalendarTooltipWindowComponent\n    );\n  }\n\n  ngOnDestroy(): void {\n    this.hide();\n  }\n\n  @HostListener('mouseenter')\n  onMouseOver(): void {\n    this.show();\n  }\n\n  @HostListener('mouseleave')\n  onMouseOut(): void {\n    this.hide();\n  }\n\n  private show(): void {\n    if (!this.tooltipRef && this.contents) {\n      this.tooltipRef = this.viewContainerRef.createComponent(\n        this.tooltipFactory,\n        0,\n        this.injector,\n        []\n      );\n      this.tooltipRef.instance.contents = this.contents;\n      this.tooltipRef.instance.placement = this.placement;\n      this.tooltipRef.instance.customTemplate = this.customTemplate;\n      this.tooltipRef.instance.event = this.event;\n      if (this.appendToBody) {\n        this.document.body.appendChild(this.tooltipRef.location.nativeElement);\n      }\n      requestAnimationFrame(() => {\n        this.positionTooltip();\n      });\n    }\n  }\n\n  private hide(): void {\n    if (this.tooltipRef) {\n      this.viewContainerRef.remove(\n        this.viewContainerRef.indexOf(this.tooltipRef.hostView)\n      );\n      this.tooltipRef = null;\n    }\n  }\n\n  private positionTooltip(): void {\n    if (this.tooltipRef) {\n      const targetPosition: ClientRect = this.positioning.positionElements(\n        this.elementRef.nativeElement,\n        this.tooltipRef.location.nativeElement.children[0],\n        this.placement,\n        this.appendToBody\n      );\n\n      const elm: HTMLElement = this.tooltipRef.location.nativeElement\n        .children[0];\n\n      this.renderer.setStyle(elm, 'top', `${targetPosition.top}px`);\n      this.renderer.setStyle(elm, 'left', `${targetPosition.left}px`);\n    }\n  }\n}\n",
    "import { Component, Input, TemplateRef } from '@angular/core';\nimport { CalendarEvent } from 'calendar-utils';\n\n@Component({\n  selector: 'mwl-calendar-event-title',\n  template: `\n    <ng-template\n      #defaultTemplate\n      let-event=\"event\"\n      let-view=\"view\">\n      <a\n        class=\"cal-event-title\"\n        href=\"javascript:;\"\n        [innerHTML]=\"event.title | calendarEventTitle:view:event\">\n      </a>\n    </ng-template>\n    <ng-template\n      [ngTemplateOutlet]=\"customTemplate || defaultTemplate\"\n      [ngTemplateOutletContext]=\"{\n        event: event,\n        view: view\n      }\">\n    </ng-template>\n  `\n})\nexport class CalendarEventTitleComponent {\n  @Input() event: CalendarEvent;\n\n  @Input() customTemplate: TemplateRef<any>;\n\n  @Input() view: string;\n}\n",
    "import { Component, Input } from '@angular/core';\nimport { CalendarEvent } from 'calendar-utils';\nimport { trackByIndex } from './util';\n\n@Component({\n  selector: 'mwl-calendar-event-actions',\n  template: `\n    <span *ngIf=\"event.actions\" class=\"cal-event-actions\">\n      <a\n        class=\"cal-event-action\"\n        href=\"javascript:;\"\n        *ngFor=\"let action of event.actions; trackBy:trackByIndex\"\n        (mwlClick)=\"action.onClick({event: event})\"\n        [ngClass]=\"action.cssClass\"\n        [innerHtml]=\"action.label\">\n      </a>\n    </span>\n  `\n})\nexport class CalendarEventActionsComponent {\n  @Input() event: CalendarEvent;\n  trackByIndex = trackByIndex;\n}\n",
    "import {\n  CalendarEvent,\n  validateEvents as validateEventsWithoutLog,\n  WeekDay\n} from 'calendar-utils';\n\nexport const validateEvents = (events: CalendarEvent[]) => {\n  const warn = (...args) => console.warn('angular-calendar', ...args);\n  return validateEventsWithoutLog(events, warn);\n};\n\nexport function isInside(outer: ClientRect, inner: ClientRect): boolean {\n  return (\n    outer.left <= inner.left &&\n    inner.left <= outer.right &&\n    outer.left <= inner.right &&\n    inner.right <= outer.right &&\n    outer.top <= inner.top &&\n    inner.top <= outer.bottom &&\n    outer.top <= inner.bottom &&\n    inner.bottom <= outer.bottom\n  );\n}\n\nexport const trackByEventId = (index: number, event: CalendarEvent) =>\n  event.id ? event.id : event;\n\nexport const trackByWeekDayHeaderDate = (index: number, day: WeekDay) =>\n  day.date.toISOString();\n\nexport const trackByIndex = (index: number) => index;\n",
    "/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n"
  ],
  "names": [
    "NgModule",
    "DragAndDropModule",
    "ResizableModule",
    "Input",
    "EventEmitter",
    "Component",
    "validateEvents",
    "Output",
    "animate",
    "style",
    "transition",
    "CommonModule",
    "DraggableHelper",
    "Inject",
    "getMonthView",
    "ElementRef",
    "Renderer2",
    "LOCALE_ID",
    "DatePipe",
    "HostListener",
    "Directive",
    "DOCUMENT",
    "ViewContainerRef",
    "ComponentFactoryResolver",
    "Injector"
  ],
  "mappings": "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"
}
